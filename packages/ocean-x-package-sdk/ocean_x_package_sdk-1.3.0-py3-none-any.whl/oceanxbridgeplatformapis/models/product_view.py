# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.models.pagination import Pagination
from oceanxbridgeplatformapis.models.product import Product


class ProductView(object):

    """Implementation of the 'productView' model.

    Used to view how Product Codes have been created and defined

    Attributes:
        products (list of Product): List of Product Code definitions
        pagination (Pagination): Pagination is the sequence of numbers
            assigned to the data request of the API. This is used to help
            managed the viewing of large data sets via API calls.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "products": 'products',
        "pagination": 'pagination'
    }

    _optionals = [
        'products',
        'pagination',
    ]

    def __init__(self,
                 products=APIHelper.SKIP,
                 pagination=APIHelper.SKIP):
        """Constructor for the ProductView class"""

        # Initialize members of the class
        if products is not APIHelper.SKIP:
            self.products = products 
        if pagination is not APIHelper.SKIP:
            self.pagination = pagination 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        products = None
        if dictionary.get('products') is not None:
            products = [Product.from_dictionary(x) for x in dictionary.get('products')]
        else:
            products = APIHelper.SKIP
        pagination = Pagination.from_dictionary(dictionary.get('pagination')) if 'pagination' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(products,
                   pagination)
