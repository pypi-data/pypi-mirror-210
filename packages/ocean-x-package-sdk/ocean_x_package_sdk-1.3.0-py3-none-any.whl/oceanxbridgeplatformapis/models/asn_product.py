# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.models.option import Option


class ASNProduct(object):

    """Implementation of the 'ASNProduct' model.

    TODO: type model description here.

    Attributes:
        product_code (string): Product Code.
        quantity (int): Quantity of the items in the shipment.
        uom (ASNUOMEnum): Description:    Used to indicate the product
            shipment Unit of Measure. > Shipment Mode Types:   * `EA` = Each  
            * `CS` = Case
        lot_number (string): Lot number of the item in the box.
        purchase_order_number (string): Purchase order number
        is_active (bool): TODO: type description here.
        source_line_number (string): Line number in the source system.
        source_revision_number (string): TODO: type description here.
        expiry_date (datetime): TODO: type description here.
        product_options (list of Option): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "product_code": 'productCode',
        "quantity": 'quantity',
        "uom": 'uom',
        "is_active": 'isActive',
        "lot_number": 'lotNumber',
        "purchase_order_number": 'purchaseOrderNumber',
        "source_line_number": 'sourceLineNumber',
        "source_revision_number": 'sourceRevisionNumber',
        "expiry_date": 'expiryDate',
        "product_options": 'productOptions'
    }

    _optionals = [
        'lot_number',
        'purchase_order_number',
        'source_line_number',
        'source_revision_number',
        'expiry_date',
        'product_options',
    ]

    def __init__(self,
                 product_code=None,
                 quantity=None,
                 uom=None,
                 is_active=None,
                 lot_number=APIHelper.SKIP,
                 purchase_order_number=APIHelper.SKIP,
                 source_line_number=APIHelper.SKIP,
                 source_revision_number=APIHelper.SKIP,
                 expiry_date=APIHelper.SKIP,
                 product_options=APIHelper.SKIP):
        """Constructor for the ASNProduct class"""

        # Initialize members of the class
        self.product_code = product_code 
        self.quantity = quantity 
        self.uom = uom 
        if lot_number is not APIHelper.SKIP:
            self.lot_number = lot_number 
        if purchase_order_number is not APIHelper.SKIP:
            self.purchase_order_number = purchase_order_number 
        self.is_active = is_active 
        if source_line_number is not APIHelper.SKIP:
            self.source_line_number = source_line_number 
        if source_revision_number is not APIHelper.SKIP:
            self.source_revision_number = source_revision_number 
        if expiry_date is not APIHelper.SKIP:
            self.expiry_date = APIHelper.RFC3339DateTime(expiry_date) if expiry_date else None 
        if product_options is not APIHelper.SKIP:
            self.product_options = product_options 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        product_code = dictionary.get("productCode") if dictionary.get("productCode") else None
        quantity = dictionary.get("quantity") if dictionary.get("quantity") else None
        uom = dictionary.get("uom") if dictionary.get("uom") else None
        is_active = dictionary.get("isActive") if "isActive" in dictionary.keys() else None
        lot_number = dictionary.get("lotNumber") if dictionary.get("lotNumber") else APIHelper.SKIP
        purchase_order_number = dictionary.get("purchaseOrderNumber") if dictionary.get("purchaseOrderNumber") else APIHelper.SKIP
        source_line_number = dictionary.get("sourceLineNumber") if dictionary.get("sourceLineNumber") else APIHelper.SKIP
        source_revision_number = dictionary.get("sourceRevisionNumber") if dictionary.get("sourceRevisionNumber") else APIHelper.SKIP
        expiry_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("expiryDate")).datetime if dictionary.get("expiryDate") else APIHelper.SKIP
        product_options = None
        if dictionary.get('productOptions') is not None:
            product_options = [Option.from_dictionary(x) for x in dictionary.get('productOptions')]
        else:
            product_options = APIHelper.SKIP
        # Return an object of this model
        return cls(product_code,
                   quantity,
                   uom,
                   is_active,
                   lot_number,
                   purchase_order_number,
                   source_line_number,
                   source_revision_number,
                   expiry_date,
                   product_options)
