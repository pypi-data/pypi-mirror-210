# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.models.address import Address
from oceanxbridgeplatformapis.models.asn_product import ASNProduct
from oceanxbridgeplatformapis.models.asn_shipment import ASNShipment
from oceanxbridgeplatformapis.models.option import Option


class ASNResponseProduct(object):

    """Implementation of the 'ASNResponseProduct' model.

    TODO: type model description here.

    Attributes:
        product_code (string): Product Code.
        quantity (float): Quantity of the items in the shipment.
        uom (UomEnum): TODO: type description here.
        lot_number (string): Lot number of the item in the box.
        source_line_number (string): Line number in the source system.
        product_options (list of Option): TODO: type description here.
        received_quantity (float): Number of Products received
        asn_created_date (float): ASN Created date in source system.
        warehouse_code (WarehousesEnum): Description:    List of available
            warehouses within the OceanX platform. > Warehouses Codes:   *
            `ANC` - Arden, North Carolina   * `COH` - Columbus, Ohio   * `CO2`
            - Columbus SL, OH   * `FHR` - Foothill Ranch, CA > Note: All
            available warehouse codes may not be available for all clients or
            brands.
        is_purchase_order (bool): TODO: type description here.
        source_revision_number (string): TODO: type description here.
        line_items (list of ASNProduct): TODO: type description here.
        expected_arrival_date (float): Date on which the Advance Shipping
            Notice is expected to arrive at the OceanX warehouse.
        shipment (ASNShipment): TODO: type description here.
        ship_from (Address): The address object model definition that is
            used.
        ship_to (Address): The address object model definition that is used.
        recipient_note (string): Can be used to provide instructions to
            recipient on how to process and store received inventory.
        custom_options (Option): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "product_code": 'productCode',
        "quantity": 'quantity',
        "uom": 'uom',
        "lot_number": 'lotNumber',
        "source_line_number": 'sourceLineNumber',
        "product_options": 'productOptions',
        "received_quantity": 'receivedQuantity',
        "asn_created_date": 'asnCreatedDate',
        "warehouse_code": 'warehouseCode',
        "is_purchase_order": 'isPurchaseOrder',
        "source_revision_number": 'sourceRevisionNumber',
        "line_items": 'lineItems',
        "expected_arrival_date": 'expectedArrivalDate',
        "shipment": 'shipment',
        "ship_from": 'shipFrom',
        "ship_to": 'shipTo',
        "recipient_note": 'recipientNote',
        "custom_options": 'customOptions'
    }

    _optionals = [
        'product_code',
        'quantity',
        'uom',
        'lot_number',
        'source_line_number',
        'product_options',
        'received_quantity',
        'asn_created_date',
        'warehouse_code',
        'is_purchase_order',
        'source_revision_number',
        'line_items',
        'expected_arrival_date',
        'shipment',
        'ship_from',
        'ship_to',
        'recipient_note',
        'custom_options',
    ]

    def __init__(self,
                 product_code=APIHelper.SKIP,
                 quantity=APIHelper.SKIP,
                 uom=APIHelper.SKIP,
                 lot_number=APIHelper.SKIP,
                 source_line_number=APIHelper.SKIP,
                 product_options=APIHelper.SKIP,
                 received_quantity=APIHelper.SKIP,
                 asn_created_date=APIHelper.SKIP,
                 warehouse_code=APIHelper.SKIP,
                 is_purchase_order=APIHelper.SKIP,
                 source_revision_number=APIHelper.SKIP,
                 line_items=APIHelper.SKIP,
                 expected_arrival_date=APIHelper.SKIP,
                 shipment=APIHelper.SKIP,
                 ship_from=APIHelper.SKIP,
                 ship_to=APIHelper.SKIP,
                 recipient_note=APIHelper.SKIP,
                 custom_options=APIHelper.SKIP):
        """Constructor for the ASNResponseProduct class"""

        # Initialize members of the class
        if product_code is not APIHelper.SKIP:
            self.product_code = product_code 
        if quantity is not APIHelper.SKIP:
            self.quantity = quantity 
        if uom is not APIHelper.SKIP:
            self.uom = uom 
        if lot_number is not APIHelper.SKIP:
            self.lot_number = lot_number 
        if source_line_number is not APIHelper.SKIP:
            self.source_line_number = source_line_number 
        if product_options is not APIHelper.SKIP:
            self.product_options = product_options 
        if received_quantity is not APIHelper.SKIP:
            self.received_quantity = received_quantity 
        if asn_created_date is not APIHelper.SKIP:
            self.asn_created_date = asn_created_date 
        if warehouse_code is not APIHelper.SKIP:
            self.warehouse_code = warehouse_code 
        if is_purchase_order is not APIHelper.SKIP:
            self.is_purchase_order = is_purchase_order 
        if source_revision_number is not APIHelper.SKIP:
            self.source_revision_number = source_revision_number 
        if line_items is not APIHelper.SKIP:
            self.line_items = line_items 
        if expected_arrival_date is not APIHelper.SKIP:
            self.expected_arrival_date = expected_arrival_date 
        if shipment is not APIHelper.SKIP:
            self.shipment = shipment 
        if ship_from is not APIHelper.SKIP:
            self.ship_from = ship_from 
        if ship_to is not APIHelper.SKIP:
            self.ship_to = ship_to 
        if recipient_note is not APIHelper.SKIP:
            self.recipient_note = recipient_note 
        if custom_options is not APIHelper.SKIP:
            self.custom_options = custom_options 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        product_code = dictionary.get("productCode") if dictionary.get("productCode") else APIHelper.SKIP
        quantity = dictionary.get("quantity") if dictionary.get("quantity") else APIHelper.SKIP
        uom = dictionary.get("uom") if dictionary.get("uom") else APIHelper.SKIP
        lot_number = dictionary.get("lotNumber") if dictionary.get("lotNumber") else APIHelper.SKIP
        source_line_number = dictionary.get("sourceLineNumber") if dictionary.get("sourceLineNumber") else APIHelper.SKIP
        product_options = None
        if dictionary.get('productOptions') is not None:
            product_options = [Option.from_dictionary(x) for x in dictionary.get('productOptions')]
        else:
            product_options = APIHelper.SKIP
        received_quantity = dictionary.get("receivedQuantity") if dictionary.get("receivedQuantity") else APIHelper.SKIP
        asn_created_date = dictionary.get("asnCreatedDate") if dictionary.get("asnCreatedDate") else APIHelper.SKIP
        warehouse_code = dictionary.get("warehouseCode") if dictionary.get("warehouseCode") else APIHelper.SKIP
        is_purchase_order = dictionary.get("isPurchaseOrder") if "isPurchaseOrder" in dictionary.keys() else APIHelper.SKIP
        source_revision_number = dictionary.get("sourceRevisionNumber") if dictionary.get("sourceRevisionNumber") else APIHelper.SKIP
        line_items = None
        if dictionary.get('lineItems') is not None:
            line_items = [ASNProduct.from_dictionary(x) for x in dictionary.get('lineItems')]
        else:
            line_items = APIHelper.SKIP
        expected_arrival_date = dictionary.get("expectedArrivalDate") if dictionary.get("expectedArrivalDate") else APIHelper.SKIP
        shipment = ASNShipment.from_dictionary(dictionary.get('shipment')) if 'shipment' in dictionary.keys() else APIHelper.SKIP
        ship_from = Address.from_dictionary(dictionary.get('shipFrom')) if 'shipFrom' in dictionary.keys() else APIHelper.SKIP
        ship_to = Address.from_dictionary(dictionary.get('shipTo')) if 'shipTo' in dictionary.keys() else APIHelper.SKIP
        recipient_note = dictionary.get("recipientNote") if dictionary.get("recipientNote") else APIHelper.SKIP
        custom_options = Option.from_dictionary(dictionary.get('customOptions')) if 'customOptions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(product_code,
                   quantity,
                   uom,
                   lot_number,
                   source_line_number,
                   product_options,
                   received_quantity,
                   asn_created_date,
                   warehouse_code,
                   is_purchase_order,
                   source_revision_number,
                   line_items,
                   expected_arrival_date,
                   shipment,
                   ship_from,
                   ship_to,
                   recipient_note,
                   custom_options)
