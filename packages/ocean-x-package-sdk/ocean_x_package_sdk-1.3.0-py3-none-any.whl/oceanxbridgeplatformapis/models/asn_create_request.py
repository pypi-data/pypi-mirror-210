# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.models.address import Address
from oceanxbridgeplatformapis.models.asn_product import ASNProduct
from oceanxbridgeplatformapis.models.asn_shipment import ASNShipment
from oceanxbridgeplatformapis.models.option import Option


class ASNCreateRequest(object):

    """Implementation of the 'ASNCreateRequest' model.

    TODO: type model description here.

    Attributes:
        asn_number (string): Advance Shipment Notice number.
        asn_created_date (datetime): ASN Created date in source system.
        warehouse_code (WarehousesEnum): Description:    List of available
            warehouses within the OceanX platform. > Warehouses Codes:   *
            `ANC` - Arden, North Carolina   * `COH` - Columbus, Ohio   * `CO2`
            - Columbus SL, OH   * `FHR` - Foothill Ranch, CA > Note: All
            available warehouse codes may not be available for all clients or
            brands.
        sub_division (string): TODO: type description here.
        source_revision_number (string): TODO: type description here.
        is_purchase_order (bool): TODO: type description here.
        line_items (list of ASNProduct): TODO: type description here.
        expected_arrival_date (datetime): Date on which the Advance Shipping
            Notice is expected to arrive at the OceanX warehouse.
        shipment (ASNShipment): TODO: type description here.
        ship_from (Address): The address object model definition that is
            used.
        ship_to (Address): The address object model definition that is used.
        recipient_note (string): Can be used to provide instructions to
            recipient on how to process and store received inventory.
        custom_options (list of Option): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asn_number": 'asnNumber',
        "asn_created_date": 'asnCreatedDate',
        "warehouse_code": 'warehouseCode',
        "line_items": 'lineItems',
        "ship_from": 'shipFrom',
        "sub_division": 'subDivision',
        "source_revision_number": 'sourceRevisionNumber',
        "is_purchase_order": 'isPurchaseOrder',
        "expected_arrival_date": 'expectedArrivalDate',
        "shipment": 'shipment',
        "ship_to": 'shipTo',
        "recipient_note": 'recipientNote',
        "custom_options": 'customOptions'
    }

    _optionals = [
        'sub_division',
        'source_revision_number',
        'is_purchase_order',
        'expected_arrival_date',
        'shipment',
        'ship_to',
        'recipient_note',
        'custom_options',
    ]

    def __init__(self,
                 asn_number=None,
                 asn_created_date=None,
                 warehouse_code=None,
                 line_items=None,
                 ship_from=None,
                 sub_division=APIHelper.SKIP,
                 source_revision_number=APIHelper.SKIP,
                 is_purchase_order=APIHelper.SKIP,
                 expected_arrival_date=APIHelper.SKIP,
                 shipment=APIHelper.SKIP,
                 ship_to=APIHelper.SKIP,
                 recipient_note=APIHelper.SKIP,
                 custom_options=APIHelper.SKIP):
        """Constructor for the ASNCreateRequest class"""

        # Initialize members of the class
        self.asn_number = asn_number 
        self.asn_created_date = APIHelper.RFC3339DateTime(asn_created_date) if asn_created_date else None 
        self.warehouse_code = warehouse_code 
        if sub_division is not APIHelper.SKIP:
            self.sub_division = sub_division 
        if source_revision_number is not APIHelper.SKIP:
            self.source_revision_number = source_revision_number 
        if is_purchase_order is not APIHelper.SKIP:
            self.is_purchase_order = is_purchase_order 
        self.line_items = line_items 
        if expected_arrival_date is not APIHelper.SKIP:
            self.expected_arrival_date = APIHelper.RFC3339DateTime(expected_arrival_date) if expected_arrival_date else None 
        if shipment is not APIHelper.SKIP:
            self.shipment = shipment 
        self.ship_from = ship_from 
        if ship_to is not APIHelper.SKIP:
            self.ship_to = ship_to 
        if recipient_note is not APIHelper.SKIP:
            self.recipient_note = recipient_note 
        if custom_options is not APIHelper.SKIP:
            self.custom_options = custom_options 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        asn_number = dictionary.get("asnNumber") if dictionary.get("asnNumber") else None
        asn_created_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("asnCreatedDate")).datetime if dictionary.get("asnCreatedDate") else None
        warehouse_code = dictionary.get("warehouseCode") if dictionary.get("warehouseCode") else None
        line_items = None
        if dictionary.get('lineItems') is not None:
            line_items = [ASNProduct.from_dictionary(x) for x in dictionary.get('lineItems')]
        ship_from = Address.from_dictionary(dictionary.get('shipFrom')) if dictionary.get('shipFrom') else None
        sub_division = dictionary.get("subDivision") if dictionary.get("subDivision") else APIHelper.SKIP
        source_revision_number = dictionary.get("sourceRevisionNumber") if dictionary.get("sourceRevisionNumber") else APIHelper.SKIP
        is_purchase_order = dictionary.get("isPurchaseOrder") if "isPurchaseOrder" in dictionary.keys() else APIHelper.SKIP
        expected_arrival_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("expectedArrivalDate")).datetime if dictionary.get("expectedArrivalDate") else APIHelper.SKIP
        shipment = ASNShipment.from_dictionary(dictionary.get('shipment')) if 'shipment' in dictionary.keys() else APIHelper.SKIP
        ship_to = Address.from_dictionary(dictionary.get('shipTo')) if 'shipTo' in dictionary.keys() else APIHelper.SKIP
        recipient_note = dictionary.get("recipientNote") if dictionary.get("recipientNote") else APIHelper.SKIP
        custom_options = None
        if dictionary.get('customOptions') is not None:
            custom_options = [Option.from_dictionary(x) for x in dictionary.get('customOptions')]
        else:
            custom_options = APIHelper.SKIP
        # Return an object of this model
        return cls(asn_number,
                   asn_created_date,
                   warehouse_code,
                   line_items,
                   ship_from,
                   sub_division,
                   source_revision_number,
                   is_purchase_order,
                   expected_arrival_date,
                   shipment,
                   ship_to,
                   recipient_note,
                   custom_options)
