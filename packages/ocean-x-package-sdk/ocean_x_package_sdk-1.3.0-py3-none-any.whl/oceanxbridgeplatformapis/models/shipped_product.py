# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.models.component import Component


class ShippedProduct(object):

    """Implementation of the 'shippedProduct' model.

    TODO: type model description here.

    Attributes:
        product_code (string): The individual product code that has been
            requested to be fulfilled.
        product_name (string): The description of the product code that has
            been requested to be fulfilled.
        product_type (ProductTypesEnum): Description:    Used to indicate the
            type of product that is defined.  > Product Types:   * `BAG` = Bag
            - A Product that is a bag and is used to build a Finished Good   *
            `BOX` = Box - A Product that is a box and is used to build a
            Finished Good.   * `CAT` = Physical Catalog.   * `COMP` =
            Component - A product that doesn’t need to be built and is ready
            to ship.   * `FG` = Finished Good - A product that has been built
            and is ready to ship.   * `INC` =  Invoice - A Product that is
            used to print customer notification details on.   * `INP` =
            Collateral - A Product that is placed into shipments as extra
            details about product that help beautify the shipment or as extra
            filler to help products not move around.   * `KIT` = A Product
            that has children items and will need to be built on the fly.   *
            `LAB` = Label - A Product that is used to place on other products.
            * `MRL` = Merchandise Return Label.    * `PRD` = Other - A Product
            that doesn’t fit into any other defined products.   * `SHP`  =
            Shipper - A Product that is used to place all shippable product
            into and is used for shipping out to the customer.   * `TRY` =
            Tray - A Product that is used to organize Products within the
            Product Shipper.
        qty (int): The quantity request to fulfill for an individual product
            code.
        unit_price (float): The individual product code price the customer has
            / will pay.
        unit_sale_tax (float): TODO: type description here.
        unit_sh (float): TODO: type description here.
        unit_total_price (float): TODO: type description here.
        oms_line_number (string): The Order Management's line number
            associated individual product code.
        not_shippable (bool): Used to indicate if the product code will be
            physically shipped out to the customer. Note - If this flag is
            already setup within the OceanX Bridge Platfrom in the Product
            master, the flag sent in the this Shipment request will overright
            that configuration.
        print_invoice (bool): Use to indicate if the product code should be
            printed on the customer facing invoice notice. Note - If this flag
            is already setup within the OceanX Bridge Platfrom in the Product
            master, the flag sent in the this Shipment request will overright
            that configuration.
        post_ship_confirm_line (bool): Use to indicate whether this product
            code will be reported back to the client's system when shipment
            confirmations are posted back. Note - If this flag is already
            setup within the OceanX Bridge Platfrom in the Product master, the
            flag sent in the this Shipment request will overright that
            configuration.
        product_availability (AvailabilityEnum): The individual product code
            inventory availability status. Only returned when shipment status
            is Voided and reasonCode is “ItemOutOfStock”.
        lot_number (string): The inventory’s lot code number that the
            shipment’s product code was shipped out with.
        components (list of Component): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "product_code": 'productCode',
        "qty": 'qty',
        "oms_line_number": 'omsLineNumber',
        "lot_number": 'lotNumber',
        "product_name": 'productName',
        "product_type": 'productType',
        "unit_price": 'unitPrice',
        "unit_sale_tax": 'unitSaleTax',
        "unit_sh": 'unitSH',
        "unit_total_price": 'unitTotalPrice',
        "not_shippable": 'notShippable',
        "print_invoice": 'printInvoice',
        "post_ship_confirm_line": 'postShipConfirmLine',
        "product_availability": 'productAvailability',
        "components": 'components'
    }

    _optionals = [
        'product_name',
        'product_type',
        'unit_price',
        'unit_sale_tax',
        'unit_sh',
        'unit_total_price',
        'not_shippable',
        'print_invoice',
        'post_ship_confirm_line',
        'product_availability',
        'components',
    ]

    def __init__(self,
                 product_code=None,
                 qty=None,
                 oms_line_number=None,
                 lot_number=None,
                 product_name=APIHelper.SKIP,
                 product_type=APIHelper.SKIP,
                 unit_price=APIHelper.SKIP,
                 unit_sale_tax=APIHelper.SKIP,
                 unit_sh=APIHelper.SKIP,
                 unit_total_price=APIHelper.SKIP,
                 not_shippable=APIHelper.SKIP,
                 print_invoice=APIHelper.SKIP,
                 post_ship_confirm_line=APIHelper.SKIP,
                 product_availability=APIHelper.SKIP,
                 components=APIHelper.SKIP):
        """Constructor for the ShippedProduct class"""

        # Initialize members of the class
        self.product_code = product_code 
        if product_name is not APIHelper.SKIP:
            self.product_name = product_name 
        if product_type is not APIHelper.SKIP:
            self.product_type = product_type 
        self.qty = qty 
        if unit_price is not APIHelper.SKIP:
            self.unit_price = unit_price 
        if unit_sale_tax is not APIHelper.SKIP:
            self.unit_sale_tax = unit_sale_tax 
        if unit_sh is not APIHelper.SKIP:
            self.unit_sh = unit_sh 
        if unit_total_price is not APIHelper.SKIP:
            self.unit_total_price = unit_total_price 
        self.oms_line_number = oms_line_number 
        if not_shippable is not APIHelper.SKIP:
            self.not_shippable = not_shippable 
        if print_invoice is not APIHelper.SKIP:
            self.print_invoice = print_invoice 
        if post_ship_confirm_line is not APIHelper.SKIP:
            self.post_ship_confirm_line = post_ship_confirm_line 
        if product_availability is not APIHelper.SKIP:
            self.product_availability = product_availability 
        self.lot_number = lot_number 
        if components is not APIHelper.SKIP:
            self.components = components 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        product_code = dictionary.get("productCode") if dictionary.get("productCode") else None
        qty = dictionary.get("qty") if dictionary.get("qty") else None
        oms_line_number = dictionary.get("omsLineNumber") if dictionary.get("omsLineNumber") else None
        lot_number = dictionary.get("lotNumber") if dictionary.get("lotNumber") else None
        product_name = dictionary.get("productName") if dictionary.get("productName") else APIHelper.SKIP
        product_type = dictionary.get("productType") if dictionary.get("productType") else APIHelper.SKIP
        unit_price = dictionary.get("unitPrice") if dictionary.get("unitPrice") else APIHelper.SKIP
        unit_sale_tax = dictionary.get("unitSaleTax") if dictionary.get("unitSaleTax") else APIHelper.SKIP
        unit_sh = dictionary.get("unitSH") if dictionary.get("unitSH") else APIHelper.SKIP
        unit_total_price = dictionary.get("unitTotalPrice") if dictionary.get("unitTotalPrice") else APIHelper.SKIP
        not_shippable = dictionary.get("notShippable") if "notShippable" in dictionary.keys() else APIHelper.SKIP
        print_invoice = dictionary.get("printInvoice") if "printInvoice" in dictionary.keys() else APIHelper.SKIP
        post_ship_confirm_line = dictionary.get("postShipConfirmLine") if "postShipConfirmLine" in dictionary.keys() else APIHelper.SKIP
        product_availability = dictionary.get("productAvailability") if dictionary.get("productAvailability") else APIHelper.SKIP
        components = None
        if dictionary.get('components') is not None:
            components = [Component.from_dictionary(x) for x in dictionary.get('components')]
        else:
            components = APIHelper.SKIP
        # Return an object of this model
        return cls(product_code,
                   qty,
                   oms_line_number,
                   lot_number,
                   product_name,
                   product_type,
                   unit_price,
                   unit_sale_tax,
                   unit_sh,
                   unit_total_price,
                   not_shippable,
                   print_invoice,
                   post_ship_confirm_line,
                   product_availability,
                   components)
