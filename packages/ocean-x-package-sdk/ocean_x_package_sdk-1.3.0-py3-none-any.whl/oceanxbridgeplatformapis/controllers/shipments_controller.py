# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.configuration import Server
from oceanxbridgeplatformapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from oceanxbridgeplatformapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from oceanxbridgeplatformapis.models.shipments_view import ShipmentsView
from oceanxbridgeplatformapis.models.shipment_view import ShipmentView
from oceanxbridgeplatformapis.models.return_details import ReturnDetails
from oceanxbridgeplatformapis.models.shipments_response import ShipmentsResponse
from oceanxbridgeplatformapis.models.return_list_details import ReturnListDetails
from oceanxbridgeplatformapis.exceptions.error_responses_exception import ErrorResponsesException
from oceanxbridgeplatformapis.exceptions.api_exception import APIException


class ShipmentsController(BaseController):

    """A Controller to access Endpoints in the oceanxbridgeplatformapis API."""
    def __init__(self, config):
        super(ShipmentsController, self).__init__(config)

    def list_of_shipments(self,
                          start_date,
                          end_date,
                          timezone='PT',
                          order_number=None,
                          shipment_number=None,
                          tracking_number=None,
                          page=None,
                          per_page=20,
                          global_filter=None,
                          filter=None,
                          sort_by='Return Date',
                          sort_order='DESC',
                          with_products=False):
        """Does a GET request to /shipments/.

        Used to view a list of shipments within the OceanX Bridge Platform
        within a given date range.

        Args:
            start_date (date): Used to indicated the start date to begin pull
                shipments to view.
            end_date (date): Used to indicated the end date to stop pulling
                shipments to view.
            timezone (TimezonesEnum, optional): Used to indicate which
                timezone the data will be pulled for.
            order_number (string, optional): Used to view a single shipment by
                the shipment's order number.
            shipment_number (string, optional): Used to view a single shipment
                by the shipment's shipment number.
            tracking_number (string, optional): Used to view a single shipment
                by the shipment's tracking number that was provided during
                ship confirmation.
            page (int, optional): Used to indicate which pagination page
                number to pull data from.
            per_page (int, optional): Used to indicate how many records to
                display per pagination page.
            global_filter (string, optional): A filter on shipments which
                functions as a "LIKE" in the SQL query. Currently acceptable
                values include Order Number, Shipment ID, Tracking Number, and
                Product Code.
            filter (string, optional): A filter on shipments data elements to
                only include shipments that match those filters sent. Example
                - ?status=shipped&productCode=TEST1000
            sort_by (string, optional): A sort filter on shipments which
                functions as a "ORDER BY" in the SQL query.
            sort_order (SortOrderEnum, optional): A sort order filter on the
                shipments which works along with the sortBy filter. Possible
                values are Ascending (ASC) and Descending (DESC).
            with_products (bool, optional): Used to indicate whether to pass
                back shipment product details

        Returns:
            ShipmentsView: Response from the API. shipment accepted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/shipments/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('startDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('endDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('timezone')
                         .value(timezone))
            .query_param(Parameter()
                         .key('orderNumber')
                         .value(order_number))
            .query_param(Parameter()
                         .key('shipmentNumber')
                         .value(shipment_number))
            .query_param(Parameter()
                         .key('trackingNumber')
                         .value(tracking_number))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('perPage')
                         .value(per_page))
            .query_param(Parameter()
                         .key('globalFilter')
                         .value(global_filter))
            .query_param(Parameter()
                         .key('filter')
                         .value(filter))
            .query_param(Parameter()
                         .key('sortBy')
                         .value(sort_by))
            .query_param(Parameter()
                         .key('sortOrder')
                         .value(sort_order))
            .query_param(Parameter()
                         .key('withProducts')
                         .value(with_products))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ShipmentsView.from_dictionary)
            .local_error('400', 'invalid input, object invalid', ErrorResponsesException)
            .local_error('409', 'request issues', ErrorResponsesException)
            .local_error('422', 'request issues', ErrorResponsesException)
        ).execute()

    def view_a_shipment(self,
                        order_number,
                        client_id=None,
                        brand_id=None,
                        timezone='PT'):
        """Does a GET request to /shipments/{orderNumber}.

        Used to view shipment details for a single order number within the
        OceanX Bridge Platform system.

        Args:
            order_number (string): This is used to indicate what order number
                is use to find it's assoicated shipments that have been send
                to the OceanX platfrom.
            client_id (string, optional): This is used to request only Client
                data for the requested client Id. This Client Id must be used
                with Brand Id parameter. This is assigned by the OceanX
                platform during on-boarding. Please contact your OceanX Client
                Service Account Manager to get this Id.
            brand_id (string, optional): This is used to request only brand
                data for the requested brand Id. This Brand Id must be used
                with Client Id parameter. This is assigned by the OceanX
                platform during on-boarding. Please contact your OceanX Client
                Service Account Manager to get this Id.
            timezone (TimezonesEnum, optional): Used to indicate which
                timezone the data will be pulled for.

        Returns:
            ShipmentView: Response from the API. shipment accepted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/shipments/{orderNumber}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orderNumber')
                            .value(order_number)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('clientId')
                         .value(client_id))
            .query_param(Parameter()
                         .key('brandId')
                         .value(brand_id))
            .query_param(Parameter()
                         .key('timezone')
                         .value(timezone))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ShipmentView.from_dictionary)
            .local_error('400', 'invalid input, object invalid', ErrorResponsesException)
            .local_error('409', 'request issues', ErrorResponsesException)
            .local_error('422', 'request issues', ErrorResponsesException)
        ).execute()

    def shipment_return(self,
                        order_number):
        """Does a GET request to /shipments/returns/{orderNumber}/.

        View details for single shipment return by only orderNumber

        Args:
            order_number (string): Used to view return details for a single
                order number.

        Returns:
            ReturnDetails: Response from the API. Shipment return accepted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/shipments/returns/{orderNumber}/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('orderNumber')
                            .value(order_number)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnDetails.from_dictionary)
            .local_error('400', 'Bad Request', APIException)
            .local_error('422', 'Unprocessable Entity', APIException)
        ).execute()

    def shipment_for_fulfillment(self,
                                 body):
        """Does a POST request to /shipments/.

        Shipment for Fulfillment

        Args:
            body (ShipmentRequest): Allows shipments to be submitted into the
                OceanX Bridge Platform.

        Returns:
            ShipmentsResponse: Response from the API. shipment accepted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/shipments/')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ShipmentsResponse.from_dictionary)
            .local_error('400', 'request not formatted correctly', ErrorResponsesException)
            .local_error('409', 'request issues', ErrorResponsesException)
            .local_error('422', 'request issues', ErrorResponsesException)
        ).execute()

    def list_of_returns(self,
                        start_date=None,
                        end_date=None,
                        timezone='PT',
                        global_filter=None,
                        sort_by='returnDate',
                        sort_order='DESC',
                        page=1,
                        per_page=20):
        """Does a GET request to /shipments/returns/.

        View list shipment returns and related details upto default of 20
        records per page based on pagination.

        Args:
            start_date (date, optional): The begin date in a range to return
                event results by. Use the following format -> YYYY-MM-DD. Used
                in conjuction with endDate.
            end_date (date, optional): The end date in a range to return event
                results by. Use the following format -> YYYY-MM-DD. Used in
                conjuction with startDate.
            timezone (TimezonesEnum, optional): Used to indicate which
                timezone the data will be pulled for.
            global_filter (string, optional): A filter on returns which
                functions as a "LIKE" in the SQL query. Currently acceptable
                values include Order Number (i.e. orderNumber), Return Reason
                (i.e., returnReasonDesc), and Return SKU (i.e. productCode).
            sort_by (string, optional): A sort filter on returns which
                functions as a "ORDER BY" in the SQL query. Only using the
                values Return Location (i.e. returnedWarehouse), Ship Date
                (shipDate), Return Date (returnDate).
            sort_order (SortOrderEnum, optional): A sort order filter on the
                returns which works along with the sortBy filter. Possible
                values are Ascending (ASC) and Descending (DESC).
            page (int, optional): TODO: type description here. Example: 1
            per_page (int, optional): specify the number of records to return
                in one request, specified as an integer from 1 to 100

        Returns:
            ReturnListDetails: Response from the API. shipment return
                accepted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/shipments/returns/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('startDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('endDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('timezone')
                         .value(timezone))
            .query_param(Parameter()
                         .key('globalFilter')
                         .value(global_filter))
            .query_param(Parameter()
                         .key('sortBy')
                         .value(sort_by))
            .query_param(Parameter()
                         .key('sortOrder')
                         .value(sort_order))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('perPage')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ReturnListDetails.from_dictionary)
            .local_error('400', 'Bad Request', APIException)
            .local_error('422', 'Unprocessable Entity', APIException)
        ).execute()
