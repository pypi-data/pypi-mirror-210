# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.configuration import Server
from oceanxbridgeplatformapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from oceanxbridgeplatformapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from oceanxbridgeplatformapis.models.product_create_response import ProductCreateResponse
from oceanxbridgeplatformapis.models.product_view import ProductView
from oceanxbridgeplatformapis.models.product_update import ProductUpdate
from oceanxbridgeplatformapis.exceptions.error_responses_exception import ErrorResponsesException


class ProductsController(BaseController):

    """A Controller to access Endpoints in the oceanxbridgeplatformapis API."""
    def __init__(self, config):
        super(ProductsController, self).__init__(config)

    def add_a_product(self,
                      body):
        """Does a POST request to /products.

        Adds an product definiton into the OceanX Bridge Platform.

        Args:
            body (ProductCreate): TODO: type description here.

        Returns:
            ProductCreateResponse: Response from the API. product created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/products')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ProductCreateResponse.from_dictionary)
            .local_error('400', 'Message displayed when request is not formatted correctly', ErrorResponsesException)
            .local_error('409', 'Message to display when request has data issues', ErrorResponsesException)
        ).execute()

    def a_product_definition(self,
                             product_id,
                             global_filter=None,
                             page=None,
                             per_page=20):
        """Does a GET request to /product/{productId}.

        View a single product within the system

        Args:
            product_id (int): Used to search for Product Code with the OceanX
                internal Product Id.
            global_filter (string, optional): Used to search for Product
                Codes, Product Names, Product UPCs, and Product Notes.
            page (int, optional): Used to pull product details at a specific
                page number for pagination.
            per_page (int, optional): Limit the number of products to be
                displayed in the API request with pagination.

        Returns:
            ProductView: Response from the API. products found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/product/{productId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('productId')
                            .value(product_id)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('globalFilter')
                         .value(global_filter))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('perPage')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ProductView.from_dictionary)
            .local_error('400', 'Message displayed when request is not formatted correctly', ErrorResponsesException)
            .local_error('409', 'Message to display when request has data issues', ErrorResponsesException)
        ).execute()

    def product_definitions(self,
                            global_filter=None,
                            page=None,
                            per_page=20):
        """Does a GET request to /products.

        View an list of all existing product within the system

        Args:
            global_filter (string, optional): Used to search for Product
                Codes, Product Names, Product UPCs, and Product Notes.
            page (int, optional): Used to pull product details at a specific
                page number for pagination.
            per_page (int, optional): Limit the number of products to be
                displayed in the API request with pagination.

        Returns:
            ProductView: Response from the API. products found

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/products')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('globalFilter')
                         .value(global_filter))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('perPage')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ProductView.from_dictionary)
            .local_error('400', 'Message displayed when request is not formatted correctly', ErrorResponsesException)
            .local_error('409', 'Message to display when request has data issues', ErrorResponsesException)
        ).execute()

    def update_a_product(self,
                         product_id,
                         body):
        """Does a PUT request to /product/{productId}.

        Update a Product

        Args:
            product_id (string): This is used to indicate what order number is
                use to find it's assoicated shipments that have been send to
                the OceanX platfrom.
            body (ProductUpdate): TODO: type description here.

        Returns:
            ProductUpdate: Response from the API. product updated

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/product/{productId}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('productId')
                            .value(product_id)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ProductUpdate.from_dictionary)
            .local_error('400', 'Message displayed when request is not formatted correctly', ErrorResponsesException)
            .local_error('409', 'Message to display when request has data issues', ErrorResponsesException)
        ).execute()
