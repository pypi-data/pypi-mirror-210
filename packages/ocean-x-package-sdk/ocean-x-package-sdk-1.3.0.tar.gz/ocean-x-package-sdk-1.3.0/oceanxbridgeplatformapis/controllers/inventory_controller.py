# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.configuration import Server
from oceanxbridgeplatformapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from oceanxbridgeplatformapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from oceanxbridgeplatformapis.models.asn_response import ASNResponse
from oceanxbridgeplatformapis.models.inventory_view_levels import InventoryViewLevels
from oceanxbridgeplatformapis.exceptions.error_responses_exception import ErrorResponsesException


class InventoryController(BaseController):

    """A Controller to access Endpoints in the oceanxbridgeplatformapis API."""
    def __init__(self, config):
        super(InventoryController, self).__init__(config)

    def update_asn(self,
                   asn_number,
                   body):
        """Does a PUT request to /inventory/receivings/{asnNumber}.

        Update an advance ship notice

        Args:
            asn_number (string): ASN Number.
            body (ASNUpdateRequest): TODO: type description here.

        Returns:
            ASNResponse: Response from the API. product created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/inventory/receivings/{asnNumber}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('asnNumber')
                            .value(asn_number)
                            .should_encode(True))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ASNResponse.from_dictionary)
            .local_error('400', 'Message displayed when request is not formatted correctly', ErrorResponsesException)
            .local_error('409', 'Message to display when request has data issues', ErrorResponsesException)
        ).execute()

    def inventory_quantities(self,
                             client_id=None,
                             brand_id=None,
                             warehouse=None,
                             product_code=None,
                             product_upc=None,
                             product_type=None,
                             page=None,
                             per_page=20):
        """Does a GET request to /inventory.

        Displays inventory levels of products within the OceanX Bridge
        Platform warehouses.

        Args:
            client_id (string, optional): The OceanX platform Client
                identification. This is assigned by the OceanX platform during
                on-boarding. Please contact your OceanX Client Service Account
                Manager to get this Id.
            brand_id (string, optional): The OceanX platform Brand
                identification. This is assigned by the OceanX platform during
                on-boarding. Please contact your OceanX Client Service Account
                Manager to get this Id.
            warehouse (WarehousesEnum, optional): List of available warehouses
                within the OceanX Bridge Platform.
            product_code (string, optional): Used to indicate which product
                code to pull inventory data for.
            product_upc (string, optional): Used to indicate which product UPC
                code to pull inventory data for.
            product_type (ProductTypesEnum, optional): Description:    Used to
                indicate which type of product type to pull inventory data
                for. > Product Types:   * `BAG` = Bag - A Product that is a
                bag and is used to build a Finished Good   * `BOX` = Box - A
                Product that is a box and is used to build a Finished Good.  
                * `CAT` = Physical Catalog.   * `COMP` = Component - A product
                that doesn’t need to be built and is ready to ship.   * `FG` =
                Finished Good - A product that has been built and is ready to
                ship.   * `INC` =  Invoice - A Product that is used to print
                customer notification details on.   * `INP` = Collateral - A
                Product that is placed into shipments as extra details about
                product that help beautify the shipment or as extra filler to
                help products not move around.   * `KIT` = A Product that has
                children items and will need to be built on the fly.   * `LAB`
                = Label - A Product that is used to place on other products.  
                * `MRL` = Merchandise Return Label.    * `PRD` = Other - A
                Product that doesn’t fit into any other defined products.   *
                `SHP`  = Shipper - A Product that is used to place all
                shippable product into and is used for shipping out to the
                customer.   * `TRY` = Tray - A Product that is used to
                organize Products within the Product Shipper.
            page (int, optional): Used to pull product details at a specific
                page number with pagination.
            per_page (int, optional): Limit the number of products to be
                displayed in the API request with pagination.

        Returns:
            InventoryViewLevels: Response from the API. request accepted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/inventory')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('clientId')
                         .value(client_id))
            .query_param(Parameter()
                         .key('brandId')
                         .value(brand_id))
            .query_param(Parameter()
                         .key('warehouse')
                         .value(warehouse))
            .query_param(Parameter()
                         .key('productCode')
                         .value(product_code))
            .query_param(Parameter()
                         .key('productUPC')
                         .value(product_upc))
            .query_param(Parameter()
                         .key('productType')
                         .value(product_type))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('perPage')
                         .value(per_page))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(InventoryViewLevels.from_dictionary)
            .local_error('400', 'request format issues', ErrorResponsesException)
            .local_error('409', 'request issues', ErrorResponsesException)
            .local_error('422', 'request issues', ErrorResponsesException)
        ).execute()

    def create_asn(self,
                   body):
        """Does a POST request to /inventory/receivings.

        Create an advance ship notice

        Args:
            body (ASNCreateRequest): TODO: type description here.

        Returns:
            ASNResponse: Response from the API. product created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/inventory/receivings')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ASNResponse.from_dictionary)
            .local_error('400', 'Message displayed when request is not formatted correctly', ErrorResponsesException)
            .local_error('409', 'Message to display when request has data issues', ErrorResponsesException)
        ).execute()

    def view_an_asn_request(self,
                            asn_number):
        """Does a GET request to /inventory/receivings/{asnNumber}.

        View an advance ship notice

        Args:
            asn_number (string): ASN Number.

        Returns:
            ASNResponse: Response from the API. product created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT_SERVER)
            .path('/inventory/receivings/{asnNumber}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('asnNumber')
                            .value(asn_number)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ASNResponse.from_dictionary)
            .local_error('400', 'Message displayed when request is not formatted correctly', ErrorResponsesException)
            .local_error('409', 'Message to display when request has data issues', ErrorResponsesException)
        ).execute()
