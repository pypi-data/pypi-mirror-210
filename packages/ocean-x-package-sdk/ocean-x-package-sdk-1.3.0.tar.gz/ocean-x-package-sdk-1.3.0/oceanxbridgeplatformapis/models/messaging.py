# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper


class Messaging(object):

    """Implementation of the 'Messaging' model.

    TODO: type model description here.

    Attributes:
        message (string): The Customerâ€™s personalized message
        message_to (string): Use to indicate who will receive the message
        message_from (string): Used to indicate who the message originated
            from

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "message": 'message',
        "message_to": 'messageTo',
        "message_from": 'messageFrom'
    }

    _optionals = [
        'message_to',
        'message_from',
    ]

    def __init__(self,
                 message=None,
                 message_to=APIHelper.SKIP,
                 message_from=APIHelper.SKIP):
        """Constructor for the Messaging class"""

        # Initialize members of the class
        self.message = message 
        if message_to is not APIHelper.SKIP:
            self.message_to = message_to 
        if message_from is not APIHelper.SKIP:
            self.message_from = message_from 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        message = dictionary.get("message") if dictionary.get("message") else None
        message_to = dictionary.get("messageTo") if dictionary.get("messageTo") else APIHelper.SKIP
        message_from = dictionary.get("messageFrom") if dictionary.get("messageFrom") else APIHelper.SKIP
        # Return an object of this model
        return cls(message,
                   message_to,
                   message_from)
