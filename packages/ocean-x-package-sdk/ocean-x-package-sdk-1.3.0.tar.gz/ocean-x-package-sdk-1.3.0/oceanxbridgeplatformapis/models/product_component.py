# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper


class ProductComponent(object):

    """Implementation of the 'productComponent' model.

    TODO: type model description here.

    Attributes:
        component_code (string): This is the component code that makes up the
            parent product. (Note - This component code will need to be
            already created in the OceanX system as a product code and the
            product code is what will be used as the component code.)
        component_qty (int): This is used to indicate how many of this
            component code is used to create the parent product code.
        component_cost (float): This is used to indicate cost of the component
            when it is used to create the parent product code. (Note - This
            will be the Cost the customer will charged.)
        is_associated (bool): This flag will indicate if this component is
            still associated to the parent product code. (Notes - During
            creation (POST Call) this will always need to be set as true.
            During updates (PUT Call) this flag can be toggled to true or
            false)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "component_code": 'componentCode',
        "component_qty": 'componentQty',
        "is_associated": 'isAssociated',
        "component_cost": 'componentCost'
    }

    _optionals = [
        'component_cost',
    ]

    def __init__(self,
                 component_code=None,
                 component_qty=None,
                 is_associated=None,
                 component_cost=APIHelper.SKIP):
        """Constructor for the ProductComponent class"""

        # Initialize members of the class
        self.component_code = component_code 
        self.component_qty = component_qty 
        if component_cost is not APIHelper.SKIP:
            self.component_cost = component_cost 
        self.is_associated = is_associated 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        component_code = dictionary.get("componentCode") if dictionary.get("componentCode") else None
        component_qty = dictionary.get("componentQty") if dictionary.get("componentQty") else None
        is_associated = dictionary.get("isAssociated") if "isAssociated" in dictionary.keys() else None
        component_cost = dictionary.get("componentCost") if dictionary.get("componentCost") else APIHelper.SKIP
        # Return an object of this model
        return cls(component_code,
                   component_qty,
                   is_associated,
                   component_cost)
