# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.models.inventory_web_transaction_product import InventoryWebTransactionProduct


class InventoryWebTransaction(object):

    """Implementation of the 'inventoryWebTransaction' model.

    TODO: type model description here.

    Attributes:
        transaction_code (string): TODO: type description here.
        warehouse_code (WarehousesEnum): Description:    List of available
            warehouses within the OceanX platform. > Warehouses Codes:   *
            `ANC` - Arden, North Carolina   * `COH` - Columbus, Ohio   * `CO2`
            - Columbus SL, OH   * `FHR` - Foothill Ranch, CA > Note: All
            available warehouse codes may not be available for all clients or
            brands.
        transaction_reference (string): TODO: type description here.
        transaction_type (InventoryTransactionTypesEnum): Description:    List
            of inventory transaction types. > Types:   * `AAI` - Adjusted
            Available In   * `AAO` - Adjusted Available Out   * `MII` - Misc.
            Inventory Issue   * `MIR` - Misc. Inventory Receipt   * `REC` -
            Receipt   * `SHP` - Shipment >
        transaction_type_desc (string): TODO: type description here.
        transaction_sub_type (InventoryTransactionSubTypesEnum): Description: 
            List of inventory sub transaction types. > Types:   * `B2B` - Sale
            Order Shipment B2B   * `CCT` - Cycle Count   * `D2C` - Sale Order
            Shipment D2C             * `DST` - Destroy   * `MAN` - Manual   *
            `QNT` - Quarantine   * `REC` - Receipt   * `RQC` - Release   *
            `RSV` - Reserve   * `RTR` - Retail Transfer   * `RTS` - FF Return 
            * `SCP` - FF Scrap   * `SOA` - Sale Order Allocation   * `WOA` -
            Work Order Allocation   * `WOR` - Work Order Build   * `WTR` -
            Warehouse Transfer >
        transaction_sub_type_desc (string): TODO: type description here.
        transaction_date (datetime): TODO: type description here.
        created_at (datetime): TODO: type description here.
        products (InventoryWebTransactionProduct): TEST

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transaction_code": 'transactionCode',
        "warehouse_code": 'warehouseCode',
        "transaction_reference": 'transactionReference',
        "transaction_type": 'transactionType',
        "transaction_type_desc": 'transactionTypeDesc',
        "transaction_sub_type": 'transactionSubType',
        "transaction_sub_type_desc": 'transactionSubTypeDesc',
        "transaction_date": 'transactionDate',
        "created_at": 'createdAt',
        "products": 'products'
    }

    def __init__(self,
                 transaction_code=None,
                 warehouse_code=None,
                 transaction_reference=None,
                 transaction_type=None,
                 transaction_type_desc=None,
                 transaction_sub_type=None,
                 transaction_sub_type_desc=None,
                 transaction_date=None,
                 created_at=None,
                 products=None):
        """Constructor for the InventoryWebTransaction class"""

        # Initialize members of the class
        self.transaction_code = transaction_code 
        self.warehouse_code = warehouse_code 
        self.transaction_reference = transaction_reference 
        self.transaction_type = transaction_type 
        self.transaction_type_desc = transaction_type_desc 
        self.transaction_sub_type = transaction_sub_type 
        self.transaction_sub_type_desc = transaction_sub_type_desc 
        self.transaction_date = APIHelper.RFC3339DateTime(transaction_date) if transaction_date else None 
        self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None 
        self.products = products 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        transaction_code = dictionary.get("transactionCode") if dictionary.get("transactionCode") else None
        warehouse_code = dictionary.get("warehouseCode") if dictionary.get("warehouseCode") else None
        transaction_reference = dictionary.get("transactionReference") if dictionary.get("transactionReference") else None
        transaction_type = dictionary.get("transactionType") if dictionary.get("transactionType") else None
        transaction_type_desc = dictionary.get("transactionTypeDesc") if dictionary.get("transactionTypeDesc") else None
        transaction_sub_type = dictionary.get("transactionSubType") if dictionary.get("transactionSubType") else None
        transaction_sub_type_desc = dictionary.get("transactionSubTypeDesc") if dictionary.get("transactionSubTypeDesc") else None
        transaction_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("transactionDate")).datetime if dictionary.get("transactionDate") else None
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("createdAt")).datetime if dictionary.get("createdAt") else None
        products = InventoryWebTransactionProduct.from_dictionary(dictionary.get('products')) if dictionary.get('products') else None
        # Return an object of this model
        return cls(transaction_code,
                   warehouse_code,
                   transaction_reference,
                   transaction_type,
                   transaction_type_desc,
                   transaction_sub_type,
                   transaction_sub_type_desc,
                   transaction_date,
                   created_at,
                   products)
