# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.models.inventory_product import InventoryProduct
from oceanxbridgeplatformapis.models.pagination import Pagination


class InventoryViewLevels(object):

    """Implementation of the 'inventoryViewLevels' model.

    TODO: type model description here.

    Attributes:
        inventory_levels (list of InventoryProduct): TODO: type description
            here.
        pagination (Pagination): Pagination is the sequence of numbers
            assigned to the data request of the API. This is used to help
            managed the viewing of large data sets via API calls.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "inventory_levels": 'inventoryLevels',
        "pagination": 'pagination'
    }

    _optionals = [
        'inventory_levels',
        'pagination',
    ]

    def __init__(self,
                 inventory_levels=APIHelper.SKIP,
                 pagination=APIHelper.SKIP):
        """Constructor for the InventoryViewLevels class"""

        # Initialize members of the class
        if inventory_levels is not APIHelper.SKIP:
            self.inventory_levels = inventory_levels 
        if pagination is not APIHelper.SKIP:
            self.pagination = pagination 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        inventory_levels = None
        if dictionary.get('inventoryLevels') is not None:
            inventory_levels = [InventoryProduct.from_dictionary(x) for x in dictionary.get('inventoryLevels')]
        else:
            inventory_levels = APIHelper.SKIP
        pagination = Pagination.from_dictionary(dictionary.get('pagination')) if 'pagination' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(inventory_levels,
                   pagination)
