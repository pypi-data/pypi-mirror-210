# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class InventoryProduct(object):

    """Implementation of the 'inventoryProduct' model.

    TODO: type model description here.

    Attributes:
        product_code (string): TODO: type description here.
        product_name (string): TODO: type description here.
        product_type (ProductTypesEnum): Description:    Used to indicate the
            type of product that is defined.  > Product Types:   * `BAG` = Bag
            - A Product that is a bag and is used to build a Finished Good   *
            `BOX` = Box - A Product that is a box and is used to build a
            Finished Good.   * `CAT` = Physical Catalog.   * `COMP` =
            Component - A product that doesn’t need to be built and is ready
            to ship.   * `FG` = Finished Good - A product that has been built
            and is ready to ship.   * `INC` =  Invoice - A Product that is
            used to print customer notification details on.   * `INP` =
            Collateral - A Product that is placed into shipments as extra
            details about product that help beautify the shipment or as extra
            filler to help products not move around.   * `KIT` = A Product
            that has children items and will need to be built on the fly.   *
            `LAB` = Label - A Product that is used to place on other products.
            * `MRL` = Merchandise Return Label.    * `PRD` = Other - A Product
            that doesn’t fit into any other defined products.   * `SHP`  =
            Shipper - A Product that is used to place all shippable product
            into and is used for shipping out to the customer.   * `TRY` =
            Tray - A Product that is used to organize Products within the
            Product Shipper.
        product_upc (string): TODO: type description here.
        warehouse (WarehousesEnum): Description:    List of available
            warehouses within the OceanX platform. > Warehouses Codes:   *
            `ANC` - Arden, North Carolina   * `COH` - Columbus, Ohio   * `CO2`
            - Columbus SL, OH   * `FHR` - Foothill Ranch, CA > Note: All
            available warehouse codes may not be available for all clients or
            brands.
        allocated_qty (int): TODO: type description here.
        available_qty (int): TODO: type description here.
        held_quarantine_qty (int): TODO: type description here.
        qcinspection_qty (int): TODO: type description here.
        reserved_qty (int): TODO: type description here.
        onhand_qty (int): TODO: type description here.
        status (ProductStatusEnum): TODO: type description here.
        last_updated_at (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "product_code": 'productCode',
        "product_name": 'productName',
        "product_type": 'productType',
        "product_upc": 'productUPC',
        "warehouse": 'warehouse',
        "allocated_qty": 'allocatedQty',
        "available_qty": 'availableQty',
        "held_quarantine_qty": 'heldQuarantineQty',
        "qcinspection_qty": 'qcinspectionQty',
        "reserved_qty": 'reservedQty',
        "onhand_qty": 'onhandQty',
        "status": 'status',
        "last_updated_at": 'lastUpdatedAt'
    }

    def __init__(self,
                 product_code=None,
                 product_name=None,
                 product_type=None,
                 product_upc=None,
                 warehouse=None,
                 allocated_qty=None,
                 available_qty=None,
                 held_quarantine_qty=None,
                 qcinspection_qty=None,
                 reserved_qty=None,
                 onhand_qty=None,
                 status=None,
                 last_updated_at=None):
        """Constructor for the InventoryProduct class"""

        # Initialize members of the class
        self.product_code = product_code 
        self.product_name = product_name 
        self.product_type = product_type 
        self.product_upc = product_upc 
        self.warehouse = warehouse 
        self.allocated_qty = allocated_qty 
        self.available_qty = available_qty 
        self.held_quarantine_qty = held_quarantine_qty 
        self.qcinspection_qty = qcinspection_qty 
        self.reserved_qty = reserved_qty 
        self.onhand_qty = onhand_qty 
        self.status = status 
        self.last_updated_at = last_updated_at 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        product_code = dictionary.get("productCode") if dictionary.get("productCode") else None
        product_name = dictionary.get("productName") if dictionary.get("productName") else None
        product_type = dictionary.get("productType") if dictionary.get("productType") else None
        product_upc = dictionary.get("productUPC") if dictionary.get("productUPC") else None
        warehouse = dictionary.get("warehouse") if dictionary.get("warehouse") else None
        allocated_qty = dictionary.get("allocatedQty") if dictionary.get("allocatedQty") else None
        available_qty = dictionary.get("availableQty") if dictionary.get("availableQty") else None
        held_quarantine_qty = dictionary.get("heldQuarantineQty") if dictionary.get("heldQuarantineQty") else None
        qcinspection_qty = dictionary.get("qcinspectionQty") if dictionary.get("qcinspectionQty") else None
        reserved_qty = dictionary.get("reservedQty") if dictionary.get("reservedQty") else None
        onhand_qty = dictionary.get("onhandQty") if dictionary.get("onhandQty") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        last_updated_at = dictionary.get("lastUpdatedAt") if dictionary.get("lastUpdatedAt") else None
        # Return an object of this model
        return cls(product_code,
                   product_name,
                   product_type,
                   product_upc,
                   warehouse,
                   allocated_qty,
                   available_qty,
                   held_quarantine_qty,
                   qcinspection_qty,
                   reserved_qty,
                   onhand_qty,
                   status,
                   last_updated_at)
