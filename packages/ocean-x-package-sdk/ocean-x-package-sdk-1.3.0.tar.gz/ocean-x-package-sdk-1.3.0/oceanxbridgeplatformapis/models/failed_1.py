# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper


class Failed1(object):

    """Implementation of the 'Failed1' model.

    TODO: type model description here.

    Attributes:
        code (string): TODO: type description here.
        reason (string): TODO: type description here.
        is_fatal (bool): TODO: type description here.
        error_code (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'code',
        "reason": 'reason',
        "is_fatal": 'isFatal',
        "error_code": 'errorCode'
    }

    _optionals = [
        'code',
        'reason',
        'is_fatal',
        'error_code',
    ]

    def __init__(self,
                 code=APIHelper.SKIP,
                 reason=APIHelper.SKIP,
                 is_fatal=APIHelper.SKIP,
                 error_code=APIHelper.SKIP):
        """Constructor for the Failed1 class"""

        # Initialize members of the class
        if code is not APIHelper.SKIP:
            self.code = code 
        if reason is not APIHelper.SKIP:
            self.reason = reason 
        if is_fatal is not APIHelper.SKIP:
            self.is_fatal = is_fatal 
        if error_code is not APIHelper.SKIP:
            self.error_code = error_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        reason = dictionary.get("reason") if dictionary.get("reason") else APIHelper.SKIP
        is_fatal = dictionary.get("isFatal") if "isFatal" in dictionary.keys() else APIHelper.SKIP
        error_code = dictionary.get("errorCode") if dictionary.get("errorCode") else APIHelper.SKIP
        # Return an object of this model
        return cls(code,
                   reason,
                   is_fatal,
                   error_code)
