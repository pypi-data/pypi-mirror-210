# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper


class OrderDetails(object):

    """Implementation of the 'OrderDetails' model.

    Order Details object model of the shipment definition.

    Attributes:
        sub_division (string): TODO: type description here.
        customer_number (string): The Order Management's unique customer
            identification that has been sent to the OceanX platform for
            fulfillment.
        order_number (string): The Order Management's unique Order
            identification that has been requested for fulfillment.
        shipment_number (string): The Order Management's unique shipment
            identification that has been sent to the OceanX platform for
            fulfillment.
        order_date (datetime): The date the order was taken in the Order
            Management system. Format used ISO 8601 (YYYY-MM-DDThh:mm:ssTZD).
        order_sh (float): The shipping & handling price the customer has /
            will pay.
        order_tax (float): The tax price the customer has / will pay
        order_subtotal (float): The sum of all product codes unitPrice
            multiplied by Qty
        order_total (float): The complete order total price the customer has /
            will pay

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "order_number": 'orderNumber',
        "order_date": 'orderDate',
        "order_total": 'orderTotal',
        "sub_division": 'subDivision',
        "customer_number": 'customerNumber',
        "shipment_number": 'shipmentNumber',
        "order_sh": 'orderSH',
        "order_tax": 'orderTax',
        "order_subtotal": 'orderSubtotal'
    }

    _optionals = [
        'sub_division',
        'customer_number',
        'shipment_number',
        'order_sh',
        'order_tax',
        'order_subtotal',
    ]

    def __init__(self,
                 order_number=None,
                 order_date=None,
                 order_total=None,
                 sub_division=APIHelper.SKIP,
                 customer_number=APIHelper.SKIP,
                 shipment_number=APIHelper.SKIP,
                 order_sh=APIHelper.SKIP,
                 order_tax=APIHelper.SKIP,
                 order_subtotal=APIHelper.SKIP):
        """Constructor for the OrderDetails class"""

        # Initialize members of the class
        if sub_division is not APIHelper.SKIP:
            self.sub_division = sub_division 
        if customer_number is not APIHelper.SKIP:
            self.customer_number = customer_number 
        self.order_number = order_number 
        if shipment_number is not APIHelper.SKIP:
            self.shipment_number = shipment_number 
        self.order_date = APIHelper.RFC3339DateTime(order_date) if order_date else None 
        if order_sh is not APIHelper.SKIP:
            self.order_sh = order_sh 
        if order_tax is not APIHelper.SKIP:
            self.order_tax = order_tax 
        if order_subtotal is not APIHelper.SKIP:
            self.order_subtotal = order_subtotal 
        self.order_total = order_total 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        order_number = dictionary.get("orderNumber") if dictionary.get("orderNumber") else None
        order_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("orderDate")).datetime if dictionary.get("orderDate") else None
        order_total = dictionary.get("orderTotal") if dictionary.get("orderTotal") else None
        sub_division = dictionary.get("subDivision") if dictionary.get("subDivision") else APIHelper.SKIP
        customer_number = dictionary.get("customerNumber") if dictionary.get("customerNumber") else APIHelper.SKIP
        shipment_number = dictionary.get("shipmentNumber") if dictionary.get("shipmentNumber") else APIHelper.SKIP
        order_sh = dictionary.get("orderSH") if dictionary.get("orderSH") else APIHelper.SKIP
        order_tax = dictionary.get("orderTax") if dictionary.get("orderTax") else APIHelper.SKIP
        order_subtotal = dictionary.get("orderSubtotal") if dictionary.get("orderSubtotal") else APIHelper.SKIP
        # Return an object of this model
        return cls(order_number,
                   order_date,
                   order_total,
                   sub_division,
                   customer_number,
                   shipment_number,
                   order_sh,
                   order_tax,
                   order_subtotal)
