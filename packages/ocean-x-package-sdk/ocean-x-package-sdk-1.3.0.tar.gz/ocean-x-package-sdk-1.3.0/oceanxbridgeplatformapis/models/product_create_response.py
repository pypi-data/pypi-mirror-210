# -*- coding: utf-8 -*-

"""
oceanxbridgeplatformapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from oceanxbridgeplatformapis.api_helper import APIHelper
from oceanxbridgeplatformapis.models.product_component import ProductComponent
from oceanxbridgeplatformapis.models.threshold import Threshold


class ProductCreateResponse(object):

    """Implementation of the 'productCreateResponse' model.

    TODO: type model description here.

    Attributes:
        id (int): This is the internal OceanX Bridge Portal Id for the newly
            created Product Code.
        sub_division (string): This will be used to indicate if a product is
            part of a sub division within the brand.
        product_code (string): The individual product code that will be
            configured within the OceanX warehouses. (Note - Product Code is
            not updatable and only used as a reference)
        product_name (string): The individual product code's description.
        product_type (ProductTypesEnum): Description:    Used to indicate the
            type of product that is defined.  > Product Types:   * `BAG` = Bag
            - A Product that is a bag and is used to build a Finished Good   *
            `BOX` = Box - A Product that is a box and is used to build a
            Finished Good.   * `CAT` = Physical Catalog.   * `COMP` =
            Component - A product that doesn’t need to be built and is ready
            to ship.   * `FG` = Finished Good - A product that has been built
            and is ready to ship.   * `INC` =  Invoice - A Product that is
            used to print customer notification details on.   * `INP` =
            Collateral - A Product that is placed into shipments as extra
            details about product that help beautify the shipment or as extra
            filler to help products not move around.   * `KIT` = A Product
            that has children items and will need to be built on the fly.   *
            `LAB` = Label - A Product that is used to place on other products.
            * `MRL` = Merchandise Return Label.    * `PRD` = Other - A Product
            that doesn’t fit into any other defined products.   * `SHP`  =
            Shipper - A Product that is used to place all shippable product
            into and is used for shipping out to the customer.   * `TRY` =
            Tray - A Product that is used to organize Products within the
            Product Shipper.
        product_length (float): The individual product code’s length in
            inches.
        product_width (float): The individual product code’s width in inches.
        product_height (float): The individual product code’s height in
            inches.
        product_weight (float): The individual product code’s weight in
            ounces.
        product_unit_of_measure (ProductUnitOfMeasureEnum): Used to indicate
            how the Product is counted, i.e. EA (each), CA (case), PL
            (pallet).
        product_cost (float): This is used to indicate cost of the product.
            (Note - This will be the Cost the customer will charged.)
        product_upc (string): Universal Product Code will support UPC-A and
            EAN-13 format.
        supply_size (string): The product's Supply Size.
        regulatory_class (string): Used to indicate if the product code is an
            FDA regulatory controlled. i.e. Class I, Class II, Class III.
        harmonized_tariff_code (string): Used to indicate the product code’s
            harmonized tariff code
        shipping_restrictions (list of object): Used to indicate if product
            cannot be shipped via specific ship method or locations. i.e. air,
            sea, Hawaii, Canada.
        is_hazardous (bool): Used to indicate if product requires special
            handling or special packaging labeling.
        country_of_origin (string): Used to indicate which country the product
            code was created in. The 2 or 3 character code is in the ISO code
            for the country. For valid ISO code please refer to this link
            (https://countrycode.org/)
        product_notes (string): Internal notes for the product.
        product_legal_language (string): Legal language for the product to
            appear in customer's package or invoice.
        product_category (list of object): Product category used to organize
            any product traits like OTC, ACNE, SKINCARE etc.
        not_shippable (bool): Used to indicate if the product code will be
            physically shipped out to the customer.
        print_invoice (bool): Use to indicate if the product code should be
            printed on the customer facing invoice notice.
        allow_back_order (bool): Use to indicate if the there is no avaliable
            inventory for this product code, still take the shipment request.
        post_ship_confirm_line (bool): Use to indicate whether this product
            code will be reported back to the client's system when shipment
            confirmations are posted back.
        is_oceanx_managed (bool): Use to indicate whether this product code is
            managed internally by OceanX and not directly by the client. i.e.
            Generic Shippers, Generic Inserts, Generic Labels
        thresholds (list of Threshold): TODO: type description here.
        is_kit_explosion (bool): This flag is used to indicate if the OceanX
            platform will add the configured components to Shipments when this
            product code is sent via the Shipment Request API. (true = OCX
            will add add configured components to the shipment. false = OCX
            will not add configured components to the shipment) (Note - This
            is only need when product type is configured as KIT. All other
            product Types this element will need to be passed as false)
        components (list of ProductComponent): This is used to define what
            components are used to create the Product / Kit. This is only
            needed when the Product Type is set as KIT. (Note - Components
            must be first created as products and then they can be added to
            the Product code's component definition.)
        status (ProductStatusEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "product_code": 'productCode',
        "product_name": 'productName',
        "product_type": 'productType',
        "post_ship_confirm_line": 'postShipConfirmLine',
        "is_oceanx_managed": 'isOceanxManaged',
        "status": 'status',
        "id": 'id',
        "sub_division": 'subDivision',
        "product_length": 'productLength',
        "product_width": 'productWidth',
        "product_height": 'productHeight',
        "product_weight": 'productWeight',
        "product_unit_of_measure": 'productUnitOfMeasure',
        "product_cost": 'productCost',
        "product_upc": 'productUPC',
        "supply_size": 'supplySize',
        "regulatory_class": 'regulatoryClass',
        "harmonized_tariff_code": 'harmonizedTariffCode',
        "shipping_restrictions": 'shippingRestrictions',
        "is_hazardous": 'isHazardous',
        "country_of_origin": 'countryOfOrigin',
        "product_notes": 'productNotes',
        "product_legal_language": 'productLegalLanguage',
        "product_category": 'productCategory',
        "not_shippable": 'notShippable',
        "print_invoice": 'printInvoice',
        "allow_back_order": 'allowBackOrder',
        "thresholds": 'thresholds',
        "is_kit_explosion": 'isKitExplosion',
        "components": 'components'
    }

    _optionals = [
        'id',
        'sub_division',
        'product_length',
        'product_width',
        'product_height',
        'product_weight',
        'product_unit_of_measure',
        'product_cost',
        'product_upc',
        'supply_size',
        'regulatory_class',
        'harmonized_tariff_code',
        'shipping_restrictions',
        'is_hazardous',
        'country_of_origin',
        'product_notes',
        'product_legal_language',
        'product_category',
        'not_shippable',
        'print_invoice',
        'allow_back_order',
        'thresholds',
        'is_kit_explosion',
        'components',
    ]

    def __init__(self,
                 product_code=None,
                 product_name=None,
                 product_type=None,
                 post_ship_confirm_line=None,
                 is_oceanx_managed=None,
                 status=None,
                 id=APIHelper.SKIP,
                 sub_division=APIHelper.SKIP,
                 product_length=APIHelper.SKIP,
                 product_width=APIHelper.SKIP,
                 product_height=APIHelper.SKIP,
                 product_weight=APIHelper.SKIP,
                 product_unit_of_measure=APIHelper.SKIP,
                 product_cost=APIHelper.SKIP,
                 product_upc=APIHelper.SKIP,
                 supply_size=APIHelper.SKIP,
                 regulatory_class=APIHelper.SKIP,
                 harmonized_tariff_code=APIHelper.SKIP,
                 shipping_restrictions=APIHelper.SKIP,
                 is_hazardous=APIHelper.SKIP,
                 country_of_origin=APIHelper.SKIP,
                 product_notes=APIHelper.SKIP,
                 product_legal_language=APIHelper.SKIP,
                 product_category=APIHelper.SKIP,
                 not_shippable=APIHelper.SKIP,
                 print_invoice=APIHelper.SKIP,
                 allow_back_order=APIHelper.SKIP,
                 thresholds=APIHelper.SKIP,
                 is_kit_explosion=APIHelper.SKIP,
                 components=APIHelper.SKIP):
        """Constructor for the ProductCreateResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if sub_division is not APIHelper.SKIP:
            self.sub_division = sub_division 
        self.product_code = product_code 
        self.product_name = product_name 
        self.product_type = product_type 
        if product_length is not APIHelper.SKIP:
            self.product_length = product_length 
        if product_width is not APIHelper.SKIP:
            self.product_width = product_width 
        if product_height is not APIHelper.SKIP:
            self.product_height = product_height 
        if product_weight is not APIHelper.SKIP:
            self.product_weight = product_weight 
        if product_unit_of_measure is not APIHelper.SKIP:
            self.product_unit_of_measure = product_unit_of_measure 
        if product_cost is not APIHelper.SKIP:
            self.product_cost = product_cost 
        if product_upc is not APIHelper.SKIP:
            self.product_upc = product_upc 
        if supply_size is not APIHelper.SKIP:
            self.supply_size = supply_size 
        if regulatory_class is not APIHelper.SKIP:
            self.regulatory_class = regulatory_class 
        if harmonized_tariff_code is not APIHelper.SKIP:
            self.harmonized_tariff_code = harmonized_tariff_code 
        if shipping_restrictions is not APIHelper.SKIP:
            self.shipping_restrictions = shipping_restrictions 
        if is_hazardous is not APIHelper.SKIP:
            self.is_hazardous = is_hazardous 
        if country_of_origin is not APIHelper.SKIP:
            self.country_of_origin = country_of_origin 
        if product_notes is not APIHelper.SKIP:
            self.product_notes = product_notes 
        if product_legal_language is not APIHelper.SKIP:
            self.product_legal_language = product_legal_language 
        if product_category is not APIHelper.SKIP:
            self.product_category = product_category 
        if not_shippable is not APIHelper.SKIP:
            self.not_shippable = not_shippable 
        if print_invoice is not APIHelper.SKIP:
            self.print_invoice = print_invoice 
        if allow_back_order is not APIHelper.SKIP:
            self.allow_back_order = allow_back_order 
        self.post_ship_confirm_line = post_ship_confirm_line 
        self.is_oceanx_managed = is_oceanx_managed 
        if thresholds is not APIHelper.SKIP:
            self.thresholds = thresholds 
        if is_kit_explosion is not APIHelper.SKIP:
            self.is_kit_explosion = is_kit_explosion 
        if components is not APIHelper.SKIP:
            self.components = components 
        self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        product_code = dictionary.get("productCode") if dictionary.get("productCode") else None
        product_name = dictionary.get("productName") if dictionary.get("productName") else None
        product_type = dictionary.get("productType") if dictionary.get("productType") else None
        post_ship_confirm_line = dictionary.get("postShipConfirmLine") if "postShipConfirmLine" in dictionary.keys() else None
        is_oceanx_managed = dictionary.get("isOceanxManaged") if "isOceanxManaged" in dictionary.keys() else None
        status = dictionary.get("status") if dictionary.get("status") else None
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        sub_division = dictionary.get("subDivision") if dictionary.get("subDivision") else APIHelper.SKIP
        product_length = dictionary.get("productLength") if dictionary.get("productLength") else APIHelper.SKIP
        product_width = dictionary.get("productWidth") if dictionary.get("productWidth") else APIHelper.SKIP
        product_height = dictionary.get("productHeight") if dictionary.get("productHeight") else APIHelper.SKIP
        product_weight = dictionary.get("productWeight") if dictionary.get("productWeight") else APIHelper.SKIP
        product_unit_of_measure = dictionary.get("productUnitOfMeasure") if dictionary.get("productUnitOfMeasure") else APIHelper.SKIP
        product_cost = dictionary.get("productCost") if dictionary.get("productCost") else APIHelper.SKIP
        product_upc = dictionary.get("productUPC") if dictionary.get("productUPC") else APIHelper.SKIP
        supply_size = dictionary.get("supplySize") if dictionary.get("supplySize") else APIHelper.SKIP
        regulatory_class = dictionary.get("regulatoryClass") if dictionary.get("regulatoryClass") else APIHelper.SKIP
        harmonized_tariff_code = dictionary.get("harmonizedTariffCode") if dictionary.get("harmonizedTariffCode") else APIHelper.SKIP
        shipping_restrictions = dictionary.get("shippingRestrictions") if dictionary.get("shippingRestrictions") else APIHelper.SKIP
        is_hazardous = dictionary.get("isHazardous") if "isHazardous" in dictionary.keys() else APIHelper.SKIP
        country_of_origin = dictionary.get("countryOfOrigin") if dictionary.get("countryOfOrigin") else APIHelper.SKIP
        product_notes = dictionary.get("productNotes") if dictionary.get("productNotes") else APIHelper.SKIP
        product_legal_language = dictionary.get("productLegalLanguage") if dictionary.get("productLegalLanguage") else APIHelper.SKIP
        product_category = dictionary.get("productCategory") if dictionary.get("productCategory") else APIHelper.SKIP
        not_shippable = dictionary.get("notShippable") if "notShippable" in dictionary.keys() else APIHelper.SKIP
        print_invoice = dictionary.get("printInvoice") if "printInvoice" in dictionary.keys() else APIHelper.SKIP
        allow_back_order = dictionary.get("allowBackOrder") if "allowBackOrder" in dictionary.keys() else APIHelper.SKIP
        thresholds = None
        if dictionary.get('thresholds') is not None:
            thresholds = [Threshold.from_dictionary(x) for x in dictionary.get('thresholds')]
        else:
            thresholds = APIHelper.SKIP
        is_kit_explosion = dictionary.get("isKitExplosion") if "isKitExplosion" in dictionary.keys() else APIHelper.SKIP
        components = None
        if dictionary.get('components') is not None:
            components = [ProductComponent.from_dictionary(x) for x in dictionary.get('components')]
        else:
            components = APIHelper.SKIP
        # Return an object of this model
        return cls(product_code,
                   product_name,
                   product_type,
                   post_ship_confirm_line,
                   is_oceanx_managed,
                   status,
                   id,
                   sub_division,
                   product_length,
                   product_width,
                   product_height,
                   product_weight,
                   product_unit_of_measure,
                   product_cost,
                   product_upc,
                   supply_size,
                   regulatory_class,
                   harmonized_tariff_code,
                   shipping_restrictions,
                   is_hazardous,
                   country_of_origin,
                   product_notes,
                   product_legal_language,
                   product_category,
                   not_shippable,
                   print_invoice,
                   allow_back_order,
                   thresholds,
                   is_kit_explosion,
                   components)
