syntax = "proto3";

package gaoliang.dwjk.datacenter.pb;

message Stock {
    string szWindCode = 1;      //Wind代码
    string szCode = 2;      //原始代码
    int32 nActionDay = 3;      //业务发生日
    int32 nTradingDay = 4;
    int32 nTime = 5;
    int32 nStatus = 6;
    int64 nPreClose = 7;
    int64 nOpen = 8;
    int64 nHigh = 9;
    int64 nLow = 10;
    int64 nMatch = 11;
    int64 nAskPrice_0 = 12;
    int64 nAskPrice_1 = 13;
    int64 nAskPrice_2 = 14;
    int64 nAskPrice_3 = 15;
    int64 nAskPrice_4 = 16;
    int64 nAskPrice_5 = 17;
    int64 nAskPrice_6 = 18;
    int64 nAskPrice_7 = 19;
    int64 nAskPrice_8 = 20;
    int64 nAskPrice_9 = 21;
    int64 nAskVol_0 = 22;
    int64 nAskVol_1 = 23;
    int64 nAskVol_2 = 24;
    int64 nAskVol_3 = 25;
    int64 nAskVol_4 = 26;
    int64 nAskVol_5 = 27;
    int64 nAskVol_6 = 28;
    int64 nAskVol_7 = 29;
    int64 nAskVol_8 = 30;
    int64 nAskVol_9 = 31;
    int64 nBidPrice_0 = 32;
    int64 nBidPrice_1 = 33;
    int64 nBidPrice_2 = 34;
    int64 nBidPrice_3 = 35;
    int64 nBidPrice_4 = 36;
    int64 nBidPrice_5 = 37;
    int64 nBidPrice_6 = 38;
    int64 nBidPrice_7 = 39;
    int64 nBidPrice_8 = 40;
    int64 nBidPrice_9 = 41;
    int64 nBidVol_0 = 42;
    int64 nBidVol_1 = 43;
    int64 nBidVol_2 = 44;
    int64 nBidVol_3 = 45;
    int64 nBidVol_4 = 46;
    int64 nBidVol_5 = 47;
    int64 nBidVol_6 = 48;
    int64 nBidVol_7 = 49;
    int64 nBidVol_8 = 50;
    int64 nBidVol_9 = 51;
    int32 nNumTrades = 52;
    int64 iVolume = 53;
    int64 iTurnover = 54;
    int64 nTotalBidVol = 55;
    int64 nTotalAskVol = 56;
    int64 nWeightedAvgBidPrice = 57;
    int64 nWeightedAvgAskPrice = 58;
    int32 nIOPV = 59;
    int32 nYieldToMaturity = 60;
    int64 nHighLimited = 61;
    int64 nLowLimited = 62;
    string chPrefix = 63;
    int32 nSyl1 = 64;
    int32 nSyl2 = 65;
    int32 nSD2 = 66;
    int32 nLocalTime = 67;
}

message Future {
    string code = 1;                                    //合约代码
    string exchange = 2;                                //交易所代码
    string tradeDay = 3;                                //交易日
    string updateTime = 4;                              //行情更新时间
    int32  updateMilliSecond = 5;                       //行情更新毫秒
    double lastPrice = 6;                               //成交价格
    int32  volume = 7;                                  //成交量
    double openPrice = 8;                               //开盘价格
    double highestPrice = 9 ;                           //交易日最高价格
    double lowestPrice = 10;                           //交易日最低价格
    double closePrice = 11;                             //收盘价，盘中无效
    double suttlementPrice = 12;                        //交易日结算价格，盘中无效
    double limitUpPrice = 13;                           //交易日合约涨停价格
    double limitDownPrice = 14;                         //交易日合约跌停价格
    double turnover = 15;                               //成交额
    int64  openInterest = 16;                           //持仓量
    double preClosePrice = 17;                          //昨收盘价格
    double preSettlementPrice = 18;                     //昨结算价格
    int64  preOpenInterest = 19;                        //昨持仓量
    string actionDay = 20;                              //业务日期
    double askPrice1 = 21;                              //卖一价
    double askPrice2 = 22;                              //卖二价
    double askPrice3 = 23;                              //卖三价
    double askPrice4 = 24;                              //卖四价
    double askPrice5 = 25;                              //卖五价
    int32  askVolume1 = 26;                             //卖一量
    int32  askVolume2 = 27;                             //卖二量
    int32  askVolume3 = 28;                             //卖三量
    int32  askVolume4 = 29;                             //卖四量
    int32  askVolume5 = 30;                             //卖五量
    double bidPrice1 = 31;                              //买一价
    double bidPrice2 = 32;                              //买二价
    double bidPrice3 = 33;                              //买三价
    double bidPrice4 = 34;                              //买四价
    double bidPrice5 = 35;                              //买五价
    int32  bidVolume1 = 36;                             //买一量
    int32  bidVolume2 = 37;                             //买二量
    int32  bidVolume3 = 38;                             //买三量
    int32  bidVolume4 = 39;                             //买四量
    int32  bidVolume5 = 40;                             //买五量
}

message Option {
    string code = 1;                                    //合约代码
    string exchange = 2;                                //交易所代码
    string tradeDay = 3;                                //交易日
    string updateTime = 4;                              //行情更新时间
    int32  updateMilliSecond = 5;                       //行情更新毫秒
    double lastPrice = 6;                               //成交价格
    int32  volume = 7;                                  //成交量
    double openPrice = 8;                               //开盘价格
    double highestPrice = 9 ;                           //交易日最高价格
    double lowestPrice = 10;                           //交易日最低价格
    double closePrice = 11;                             //收盘价，盘中无效
    double suttlementPrice = 12;                        //交易日结算价格，盘中无效
    double limitUpPrice = 13;                           //交易日合约涨停价格
    double limitDownPrice = 14;                         //交易日合约跌停价格
    double turnover = 15;                               //成交额
    int64  openInterest = 16;                           //持仓量
    double preClosePrice = 17;                          //昨收盘价格
    double preSettlementPrice = 18;                     //昨结算价格
    int64  preOpenInterest = 19;                        //昨持仓量
    string actionDay = 20;                              //业务日期
    double askPrice1 = 21;                              //卖一价
    double askPrice2 = 22;                              //卖二价
    double askPrice3 = 23;                              //卖三价
    double askPrice4 = 24;                              //卖四价
    double askPrice5 = 25;                              //卖五价
    int32  askVolume1 = 26;                             //卖一量
    int32  askVolume2 = 27;                             //卖二量
    int32  askVolume3 = 28;                             //卖三量
    int32  askVolume4 = 29;                             //卖四量
    int32  askVolume5 = 30;                             //卖五量
    double bidPrice1 = 31;                              //买一价
    double bidPrice2 = 32;                              //买二价
    double bidPrice3 = 33;                              //买三价
    double bidPrice4 = 34;                              //买四价
    double bidPrice5 = 35;                              //买五价
    int32  bidVolume1 = 36;                             //买一量
    int32  bidVolume2 = 37;                             //买二量
    int32  bidVolume3 = 38;                             //买三量
    int32  bidVolume4 = 39;                             //买四量
    int32  bidVolume5 = 40;                             //买五量
}

message Index {
    string szWindCode = 1;
    string szCode = 2;
    int32 nActionDay = 3;
    int32 nTradingDay = 4;
    int32 nTime = 5;
    int64 nOpenIndex = 6;
    int64 nHighIndex = 7;
    int64 nLowIndex = 8;
    int64 nLastIndex = 9;
    int64 iTotalVolume = 10;
    int64 iTurnover = 11;
    int64 nPreCloseIndex = 12;
    int32 nLocalTime = 13;
}

message Transaction {
    string szWindCode = 1;
    string szCode = 2;
    int32 nActionDay = 3;
    int32 nTime = 4;
    int32 nIndex = 5;
    int64 nPrice = 6;
    int32 nVolume = 7;
    int64 nTurnover = 8;
    int32 nBSFlag = 9;
    bytes chOrderKind = 10;
    string chFunctionCode = 11;
    int32 nAskOrder = 12;
    int32 nBidOrder = 13;
    int32 nLocalTime = 14;
}

//逐笔委托
message Order {
    string szWindCode = 1;
    string szCode = 2;
    int32 nActionDay = 3;
    int32 nTime = 4;
    int32 nOrder = 5;
    int64 nPrice = 6;
    int32 nVolume = 7;
    bytes chOrderKind = 8;
    string chFunctionCode = 9;
    int32 nBroker = 10;
    string chStatus = 11;
    string chFlag = 12;
    int32 nLocalTime = 13;
}

//委托队列
message OrderQueue {
    string szWindCode = 1;
    string szCode = 2;
    int32 nActionDay = 3;
    int32 nTime = 4;
    int32 nSide = 5;
    int64 nPrice = 6;
    int32 nOrders = 7;
    int32 nABItems = 8;
    repeated int32 nABVolume = 9;
    int32 nLocalTime = 10;
}

message MarketData {
    oneof data {
        Stock stock = 1;
        Future future = 2;
        Index index = 3;
        Transaction transaction = 4;
        Order order = 5;
        OrderQueue queue = 6;
        Option option = 7;
    }
    enum Type {
        STOCK = 0;
        INDEX = 1;
        FUTURE = 2;
        TRANSACTION = 3;
        ORDER = 4;
        QUEUE = 5;
        OPTION = 6;
    }
    Type type = 8;
}