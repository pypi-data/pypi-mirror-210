{"version":3,"file":"chunks/app_components_charts_components_dataZoomInside_tsx-app_components_charts_components_toolBox_-e7e825.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/components/dataZoomInside.tsx","webpack:///./app/components/charts/components/toolBox.tsx","webpack:///./app/components/charts/transparentLoadingMask.tsx","webpack:///./app/utils/performance/vitals/vitalsCardsDiscoverQuery.tsx","webpack:///./app/components/sparklines/index.tsx","webpack:///./app/views/performance/vitalDetail/colorBar.tsx","webpack:///./app/views/performance/vitalDetail/vitalPercents.tsx","webpack:///./app/views/performance/landing/vitalsCards.tsx"],"sourcesContent":["import 'echarts/lib/component/dataZoomInside';\n\nimport type {InsideDataZoomComponentOption} from 'echarts';\n\nconst DEFAULT: InsideDataZoomComponentOption = {\n  type: 'inside',\n  // Mouse wheel can not trigger zoom\n  zoomOnMouseWheel: false,\n  // The translation (by mouse drag or touch drag) is available but zoom is not\n  zoomLock: true,\n  throttle: 50,\n};\n\nexport default function DataZoomInside(\n  props: InsideDataZoomComponentOption | InsideDataZoomComponentOption[]\n): InsideDataZoomComponentOption[] {\n  // `props` can be boolean, if so return default\n  if (!props || !Array.isArray(props)) {\n    const dataZoom = {\n      ...DEFAULT,\n      ...props,\n    };\n    return [dataZoom];\n  }\n\n  return props;\n}\n","import type {ToolboxComponentOption} from 'echarts';\n\nfunction getFeatures({\n  dataZoom,\n  ...features\n}: ToolboxComponentOption['feature'] = {}): ToolboxComponentOption['feature'] {\n  return {\n    ...(dataZoom\n      ? {\n          dataZoom: {\n            yAxisIndex: 'none',\n            title: {\n              zoom: 'zoom',\n              back: 'undo',\n            },\n            ...dataZoom,\n          },\n        }\n      : {}),\n    ...features,\n  };\n}\n\nexport default function ToolBox(\n  options: ToolboxComponentOption,\n  features: ToolboxComponentOption['feature']\n): ToolboxComponentOption {\n  return {\n    right: 0,\n    top: 0,\n    itemSize: 16,\n    // Stack the toolbox under the legend.\n    // so all series names are clickable.\n    z: -1,\n\n    feature: getFeatures(features),\n    ...options,\n  };\n}\n","import styled from '@emotion/styled';\n\nimport LoadingMask, {LoadingMaskProps} from 'sentry/components/loadingMask';\n\ninterface TransparentLoadingMaskProps extends LoadingMaskProps {\n  visible: boolean;\n  children?: React.ReactNode;\n  className?: string;\n}\n\nconst TransparentLoadingMask = styled(\n  ({className, visible, children, ...props}: TransparentLoadingMaskProps) => {\n    const other = visible ? {...props, 'data-test-id': 'loading-placeholder'} : props;\n    return (\n      <LoadingMask className={className} {...other}>\n        {children}\n      </LoadingMask>\n    );\n  }\n)<TransparentLoadingMaskProps>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nexport default TransparentLoadingMask;\n","import pick from 'lodash/pick';\n\nimport {MetaType} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryPropsWithContext,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {WebVital} from 'sentry/utils/fields';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\n\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type VitalData = {\n  good: number;\n  meh: number;\n  p75: number | null;\n  poor: number;\n  total: number;\n};\n\nexport type VitalsData = Record<string, VitalData>;\n\ntype VitalsProps = {\n  vitals: WebVital[];\n};\n\ntype RequestProps = DiscoverQueryPropsWithContext & VitalsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<VitalsProps>, 'tableData'> & {\n  vitalsData: VitalsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getRequestPayload(props: RequestProps) {\n  const {eventView, vitals} = props;\n  const apiPayload = eventView?.getEventsAPIPayload(props.location);\n  return {\n    vital: vitals,\n    ...pick(apiPayload, ['query', ...Object.values(PERFORMANCE_URL_PARAM)]),\n  };\n}\n\nfunction VitalsCardsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<VitalsData, VitalsProps>\n      getRequestPayload={getRequestPayload}\n      route=\"events-vitals\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({vitalsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default VitalsCardsDiscoverQuery;\n","import {Sparklines as BaseSparklines} from 'react-sparklines';\nimport * as PropTypes from 'prop-types';\n\n/**\n * This is required because:\n *\n * - React.Suspense only works with default exports\n * - typescript complains that the library's `propTypes` does not\n * have `children defined.\n * - typescript also won't let us access `Sparklines.propTypes`\n */\nexport class Sparklines extends BaseSparklines {\n  static propTypes = {\n    children: PropTypes.node,\n    data: PropTypes.array,\n    limit: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    svgWidth: PropTypes.number,\n    svgHeight: PropTypes.number,\n    preserveAspectRatio: PropTypes.string,\n    margin: PropTypes.number,\n    style: PropTypes.object,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onMouseMove: PropTypes.func,\n  };\n}\n","import {ReactNode} from 'react';\nimport styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\n\ntype ColorStop = {\n  color: Color | string;\n  percent: number;\n  renderBarStatus?: (barStatus: ReactNode, key: string) => ReactNode;\n};\n\ntype Props = {\n  colorStops: ColorStop[];\n  barHeight?: number;\n};\n\nfunction ColorBar(props: Props) {\n  return (\n    <VitalBar\n      barHeight={props.barHeight}\n      fractions={props.colorStops.map(({percent}) => percent)}\n    >\n      {props.colorStops.map(colorStop => {\n        const barStatus = <BarStatus color={colorStop.color} key={colorStop.color} />;\n\n        return colorStop.renderBarStatus?.(barStatus, colorStop.color) ?? barStatus;\n      })}\n    </VitalBar>\n  );\n}\n\ntype VitalBarProps = {\n  fractions: number[];\n  barHeight?: number;\n};\n\nconst VitalBar = styled('div')<VitalBarProps>`\n  height: ${p => (p.barHeight ? `${p.barHeight}px` : '16px')};\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  background: ${p => p.theme.gray100};\n  display: grid;\n  grid-template-columns: ${p => p.fractions.map(f => `${f}fr`).join(' ')};\n  margin-bottom: ${p => (p.barHeight ? '' : space(1))};\n  border-radius: 2px;\n`;\n\ntype ColorProps = {\n  color: Color | string;\n};\n\nconst BarStatus = styled('div')<ColorProps>`\n  background-color: ${p => p.theme[p.color] ?? p.color};\n`;\n\nexport default ColorBar;\n","import styled from '@emotion/styled';\n\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {WebVital} from 'sentry/utils/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\n\nimport {VitalState, vitalStateIcons, webVitalMeh, webVitalPoor} from './utils';\n\ntype Percent = {\n  percent: number;\n  vitalState: VitalState;\n};\n\ntype Props = {\n  percents: Percent[];\n  vital: WebVital | WebVital[];\n  hideTooltips?: boolean;\n  showVitalPercentNames?: boolean;\n  showVitalThresholds?: boolean;\n};\n\nfunction getVitalStateText(vital: WebVital | WebVital[], vitalState) {\n  const unit = !Array.isArray(vital) && vital !== WebVital.CLS ? 'ms' : '';\n  switch (vitalState) {\n    case VitalState.POOR:\n      return Array.isArray(vital)\n        ? t('Poor')\n        : tct('(>[threshold][unit])', {threshold: webVitalPoor[vital], unit});\n    case VitalState.MEH:\n      return Array.isArray(vital)\n        ? t('Meh')\n        : tct('(>[threshold][unit])', {threshold: webVitalMeh[vital], unit});\n    case VitalState.GOOD:\n      return Array.isArray(vital)\n        ? t('Good')\n        : tct('(<=[threshold][unit])', {threshold: webVitalMeh[vital], unit});\n    default:\n      return null;\n  }\n}\n\nexport default function VitalPercents(props: Props) {\n  return (\n    <VitalSet>\n      {props.percents.map(pct => (\n        <VitalStatus data-test-id=\"vital-status\" key={pct.vitalState}>\n          {vitalStateIcons[pct.vitalState]}\n          {props.showVitalPercentNames && pct.vitalState}{' '}\n          {formatPercentage(pct.percent, 0)}\n          {props.showVitalThresholds && getVitalStateText(props.vital, pct.vitalState)}\n        </VitalStatus>\n      ))}\n    </VitalSet>\n  );\n}\n\nconst VitalSet = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n`;\n\nconst VitalStatus = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport Card from 'sentry/components/card';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitle} from 'sentry/components/charts/styles';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {Sparklines} from 'sentry/components/sparklines';\nimport SparklinesLine from 'sentry/components/sparklines/line';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Column,\n  generateFieldAsString,\n  getAggregateAlias,\n} from 'sentry/utils/discover/fields';\nimport {WebVital} from 'sentry/utils/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport VitalsCardsDiscoverQuery, {\n  VitalData,\n  VitalsData,\n} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport toArray from 'sentry/utils/toArray';\nimport useApi from 'sentry/utils/useApi';\n\nimport ColorBar from '../vitalDetail/colorBar';\nimport {\n  vitalAbbreviations,\n  vitalDetailRouteWithQuery,\n  vitalMap,\n  VitalState,\n  vitalStateColors,\n} from '../vitalDetail/utils';\nimport VitalPercents from '../vitalDetail/vitalPercents';\n\nimport {\n  getDefaultDisplayFieldForPlatform,\n  LandingDisplayField,\n  vitalCardDetails,\n} from './utils';\n\ntype FrontendCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  frontendOnly?: boolean;\n};\n\nexport function FrontendCards(props: FrontendCardsProps) {\n  const {eventView, location, organization, projects, frontendOnly = false} = props;\n\n  if (frontendOnly) {\n    const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n    const isFrontend = defaultDisplay === LandingDisplayField.FRONTEND_PAGELOAD;\n\n    if (!isFrontend) {\n      return null;\n    }\n  }\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\n  return (\n    <VitalsCardsDiscoverQuery\n      eventView={eventView}\n      location={location}\n      orgSlug={organization.slug}\n      vitals={vitals}\n    >\n      {({isLoading, vitalsData}) => {\n        return (\n          <VitalsContainer>\n            {vitals.map(vital => {\n              const target = vitalDetailRouteWithQuery({\n                orgSlug: organization.slug,\n                query: eventView.generateQueryStringObject(),\n                vitalName: vital,\n                projectID: decodeList(location.query.project),\n              });\n\n              const value = isLoading\n                ? '\\u2014'\n                : getP75(vitalsData?.[vital] ?? null, vital);\n              const chart = (\n                <VitalBarContainer>\n                  <VitalBar isLoading={isLoading} vital={vital} data={vitalsData} />\n                </VitalBarContainer>\n              );\n\n              return (\n                <Link\n                  key={vital}\n                  to={target}\n                  data-test-id={`vitals-linked-card-${vitalAbbreviations[vital]}`}\n                >\n                  <VitalCard\n                    title={vitalMap[vital] ?? ''}\n                    tooltip={WEB_VITAL_DETAILS[vital].description ?? ''}\n                    value={isLoading ? '\\u2014' : value}\n                    chart={chart}\n                    minHeight={150}\n                  />\n                </Link>\n              );\n            })}\n          </VitalsContainer>\n        );\n      }}\n    </VitalsCardsDiscoverQuery>\n  );\n}\n\nconst VitalBarContainer = styled('div')`\n  margin-top: ${space(1.5)};\n`;\n\ntype BaseCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\ntype GenericCardsProps = BaseCardsProps & {\n  functions: Column[];\n};\n\nfunction GenericCards(props: GenericCardsProps) {\n  const api = useApi();\n\n  const {eventView: baseEventView, location, organization, functions} = props;\n  const {query} = location;\n  const eventView = baseEventView.withColumns(functions);\n\n  // construct request parameters for fetching chart data\n  const globalSelection = eventView.getPageFilters();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : undefined;\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : undefined;\n  const interval =\n    typeof query.sparkInterval === 'string'\n      ? query.sparkInterval\n      : getInterval(\n          {\n            start: start || null,\n            end: end || null,\n            period: globalSelection.datetime.period,\n          },\n          'low'\n        );\n  const apiPayload = eventView.getEventsAPIPayload(location);\n\n  return (\n    <DiscoverQuery\n      location={location}\n      eventView={eventView}\n      orgSlug={organization.slug}\n      limit={1}\n      referrer=\"api.performance.vitals-cards\"\n    >\n      {({isLoading: isSummaryLoading, tableData}) => (\n        <EventsRequest\n          api={api}\n          organization={organization}\n          period={globalSelection.datetime.period}\n          project={globalSelection.projects}\n          environment={globalSelection.environments}\n          team={apiPayload.team}\n          start={start}\n          end={end}\n          interval={interval}\n          query={apiPayload.query}\n          includePrevious={false}\n          yAxis={eventView.getFields()}\n          partial\n        >\n          {({results}) => {\n            const series = results?.reduce((allSeries, oneSeries) => {\n              allSeries[oneSeries.seriesName] = oneSeries.data.map(item => item.value);\n              return allSeries;\n            }, {});\n            const details = vitalCardDetails(organization);\n\n            return (\n              <VitalsContainer>\n                {functions.map(func => {\n                  let fieldName = generateFieldAsString(func);\n\n                  if (fieldName.includes('apdex')) {\n                    // Replace apdex with explicit thresholds with a generic one for lookup\n                    fieldName = 'apdex()';\n                  }\n\n                  const cardDetail = details[fieldName];\n                  if (!cardDetail) {\n                    Sentry.captureMessage(`Missing field '${fieldName}' in vital cards.`);\n                    return null;\n                  }\n\n                  const {title, tooltip, formatter} = cardDetail;\n                  const alias = getAggregateAlias(fieldName);\n                  const rawValue = tableData?.data?.[0]?.[alias] as number;\n\n                  const data = series?.[fieldName];\n                  const value =\n                    isSummaryLoading || !defined(rawValue)\n                      ? '\\u2014'\n                      : formatter(rawValue);\n                  const chart = <SparklineChart data={data} />;\n                  return (\n                    <VitalCard\n                      key={fieldName}\n                      title={title}\n                      tooltip={tooltip}\n                      value={value}\n                      chart={chart}\n                      horizontal\n                      minHeight={96}\n                      isNotInteractive\n                    />\n                  );\n                })}\n              </VitalsContainer>\n            );\n          }}\n        </EventsRequest>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nfunction _BackendCards(props: BaseCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'transaction.duration', undefined, undefined],\n    },\n    {kind: 'function', function: ['tpm', '', undefined, undefined]},\n    {kind: 'function', function: ['failure_rate', '', undefined, undefined]},\n    {\n      kind: 'function',\n      function: ['apdex', '', undefined, undefined],\n    },\n  ];\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const BackendCards = _BackendCards;\n\ntype MobileCardsProps = BaseCardsProps & {\n  showStallPercentage: boolean;\n};\n\nfunction _MobileCards(props: MobileCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_cold', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_warm', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.frames_slow_rate', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.frames_frozen_rate', undefined, undefined],\n    },\n  ];\n  if (props.showStallPercentage) {\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.stall_percentage', undefined, undefined],\n    });\n  }\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const MobileCards = _MobileCards;\n\ntype SparklineChartProps = {\n  data: number[];\n};\n\nfunction SparklineChart(props: SparklineChartProps) {\n  const {data} = props;\n  const width = 150;\n  const height = 24;\n  const lineColor = theme.charts.getColorPalette(1)[0];\n  return (\n    <SparklineContainer data-test-id=\"sparkline\" width={width} height={height}>\n      <Sparklines data={data} width={width} height={height}>\n        <SparklinesLine style={{stroke: lineColor, fill: 'none', strokeWidth: 3}} />\n      </Sparklines>\n    </SparklineContainer>\n  );\n}\n\ntype SparklineContainerProps = {\n  height: number;\n  width: number;\n};\n\nconst SparklineContainer = styled('div')<SparklineContainerProps>`\n  flex-grow: 4;\n  max-height: ${p => p.height}px;\n  max-width: ${p => p.width}px;\n  margin: ${space(1)} ${space(0)} ${space(0.5)} ${space(3)};\n`;\n\nconst VitalsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n`;\n\ntype VitalBarProps = {\n  data: VitalsData | null;\n  isLoading: boolean;\n  vital: WebVital | WebVital[];\n  barHeight?: number;\n  showBar?: boolean;\n  showDetail?: boolean;\n  showDurationDetail?: boolean;\n  showStates?: boolean;\n  showTooltip?: boolean;\n  showVitalPercentNames?: boolean;\n  showVitalThresholds?: boolean;\n  value?: string;\n};\n\nexport function VitalBar(props: VitalBarProps) {\n  const {\n    isLoading,\n    data,\n    vital,\n    value,\n    showBar = true,\n    showStates = false,\n    showDurationDetail = false,\n    showVitalPercentNames = true,\n    showVitalThresholds = false,\n    showDetail = true,\n    showTooltip = false,\n    barHeight,\n  } = props;\n\n  if (isLoading) {\n    return showStates ? <Placeholder height=\"48px\" /> : null;\n  }\n\n  const emptyState = showStates ? (\n    <EmptyVitalBar small>{t('No vitals found')}</EmptyVitalBar>\n  ) : null;\n\n  if (!data) {\n    return emptyState;\n  }\n\n  const counts: Pick<VitalData, 'poor' | 'meh' | 'good' | 'total'> = {\n    poor: 0,\n    meh: 0,\n    good: 0,\n    total: 0,\n  };\n  const vitals = toArray(vital);\n  vitals.forEach(vitalName => {\n    const c = data?.[vitalName] ?? {};\n    Object.keys(counts).forEach(countKey => (counts[countKey] += c[countKey]));\n  });\n\n  if (!counts.total) {\n    return emptyState;\n  }\n\n  const p75: React.ReactNode = Array.isArray(vital)\n    ? null\n    : value ?? getP75(data?.[vital] ?? null, vital);\n  const percents = getPercentsFromCounts(counts);\n  const colorStops = getColorStopsFromPercents(percents);\n\n  return (\n    <Fragment>\n      {showBar && (\n        <StyledTooltip\n          title={\n            <VitalPercents\n              vital={vital}\n              percents={percents}\n              showVitalPercentNames={false}\n              showVitalThresholds={false}\n              hideTooltips={showTooltip}\n            />\n          }\n          disabled={!showTooltip}\n          position=\"bottom\"\n        >\n          <ColorBar barHeight={barHeight} colorStops={colorStops} />\n        </StyledTooltip>\n      )}\n      {showDetail && (\n        <BarDetail>\n          {showDurationDetail && p75 && (\n            <div>\n              {t('The p75 for all transactions is ')}\n              <strong>{p75}</strong>\n            </div>\n          )}\n\n          <VitalPercents\n            vital={vital}\n            percents={percents}\n            showVitalPercentNames={showVitalPercentNames}\n            showVitalThresholds={showVitalThresholds}\n          />\n        </BarDetail>\n      )}\n    </Fragment>\n  );\n}\n\nconst EmptyVitalBar = styled(EmptyStateWarning)`\n  height: 48px;\n  padding: ${space(1.5)} 15%;\n`;\n\ntype VitalCardProps = {\n  chart: React.ReactNode;\n  title: string;\n  tooltip: string;\n  value: string | number;\n  horizontal?: boolean;\n  isNotInteractive?: boolean;\n  minHeight?: number;\n};\n\nfunction VitalCard(props: VitalCardProps) {\n  const {chart, minHeight, horizontal, title, tooltip, value, isNotInteractive} = props;\n  return (\n    <StyledCard interactive={!isNotInteractive} minHeight={minHeight}>\n      <HeaderTitle>\n        <OverflowEllipsis>{title}</OverflowEllipsis>\n        <QuestionTooltip size=\"sm\" position=\"top\" title={tooltip} />\n      </HeaderTitle>\n      <CardContent horizontal={horizontal}>\n        <CardValue>{value}</CardValue>\n        {chart}\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst CardContent = styled('div')<{horizontal?: boolean}>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${p => (p.horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n`;\n\nconst StyledCard = styled(Card)<{minHeight?: number}>`\n  color: ${p => p.theme.textColor};\n  padding: ${space(2)} ${space(3)};\n  align-items: flex-start;\n  margin-bottom: ${space(2)};\n  ${p => p.minHeight && `min-height: ${p.minHeight}px`};\n`;\n\nconst StyledTooltip = styled(Tooltip)`\n  width: 100%;\n`;\n\nfunction getP75(data: VitalData | null, vitalName: WebVital): string {\n  const p75 = data?.p75 ?? null;\n  if (p75 === null) {\n    return '\\u2014';\n  }\n  return vitalName === WebVital.CLS ? p75.toFixed(2) : `${p75.toFixed(0)}ms`;\n}\n\ntype Percent = {\n  percent: number;\n  vitalState: VitalState;\n};\n\nfunction getPercentsFromCounts({poor, meh, good, total}) {\n  const poorPercent = poor / total;\n  const mehPercent = meh / total;\n  const goodPercent = good / total;\n\n  const percents: Percent[] = [\n    {\n      vitalState: VitalState.GOOD,\n      percent: goodPercent,\n    },\n    {\n      vitalState: VitalState.MEH,\n      percent: mehPercent,\n    },\n    {\n      vitalState: VitalState.POOR,\n      percent: poorPercent,\n    },\n  ];\n\n  return percents;\n}\n\nfunction getColorStopsFromPercents(percents: Percent[]) {\n  return percents.map(({percent, vitalState}) => ({\n    percent,\n    color: vitalStateColors[vitalState],\n  }));\n}\n\nconst BarDetail = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst CardValue = styled('div')`\n  font-size: 32px;\n  margin-top: ${space(1)};\n`;\n\nconst OverflowEllipsis = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n"],"names":["DEFAULT","type","zoomOnMouseWheel","zoomLock","throttle","DataZoomInside","props","Array","isArray","getFeatures","dataZoom","features","arguments","length","undefined","yAxisIndex","title","zoom","back","ToolBox","options","right","top","itemSize","z","feature","_styled","_ref","className","visible","children","other","_jsx","LoadingMask","target","p","getRequestPayload","eventView","vitals","apiPayload","getEventsAPIPayload","location","vital","pick","Object","values","PERFORMANCE_URL_PARAM","VitalsCardsDiscoverQuery","GenericDiscoverQuery","route","tableData","rest","vitalsData","displayName","Sparklines","BaseSparklines","_defineProperty","PropTypes","data","limit","width","height","svgWidth","svgHeight","preserveAspectRatio","margin","style","min","max","onMouseMove","ColorBar","VitalBar","barHeight","fractions","colorStops","map","percent","colorStop","barStatus","BarStatus","color","renderBarStatus","theme","gray100","f","join","space","getVitalStateText","vitalState","unit","WebVital","VitalState","t","tct","threshold","webVitalPoor","webVitalMeh","VitalPercents","VitalSet","percents","pct","_jsxs","VitalStatus","vitalStateIcons","showVitalPercentNames","formatPercentage","showVitalThresholds","fontSizeMedium","GenericCards","api","useApi","baseEventView","organization","functions","query","withColumns","globalSelection","getPageFilters","start","datetime","getUtcToLocalDateObject","end","interval","sparkInterval","getInterval","period","DiscoverQuery","orgSlug","slug","referrer","_ref2","isLoading","isSummaryLoading","EventsRequest","project","projects","environment","environments","team","includePrevious","yAxis","getFields","partial","_ref3","results","series","reduce","allSeries","oneSeries","seriesName","item","value","details","vitalCardDetails","VitalsContainer","func","fieldName","generateFieldAsString","includes","cardDetail","Sentry","tooltip","formatter","alias","getAggregateAlias","rawValue","defined","chart","SparklineChart","VitalCard","horizontal","minHeight","isNotInteractive","lineColor","SparklineContainer","SparklinesLine","stroke","fill","strokeWidth","breakpoints","small","large","showBar","showStates","showDurationDetail","showDetail","showTooltip","Placeholder","emptyState","EmptyVitalBar","counts","poor","meh","good","total","toArray","forEach","vitalName","c","keys","countKey","p75","toFixed","getP75","_ref4","poorPercent","mehPercent","goodPercent","getPercentsFromCounts","_ref5","vitalStateColors","getColorStopsFromPercents","Fragment","StyledTooltip","hideTooltips","disabled","position","BarDetail","EmptyStateWarning","StyledCard","interactive","HeaderTitle","OverflowEllipsis","QuestionTooltip","size","CardContent","CardValue","Card","textColor","Tooltip","name","styles","overflowEllipsis"],"sourceRoot":""}