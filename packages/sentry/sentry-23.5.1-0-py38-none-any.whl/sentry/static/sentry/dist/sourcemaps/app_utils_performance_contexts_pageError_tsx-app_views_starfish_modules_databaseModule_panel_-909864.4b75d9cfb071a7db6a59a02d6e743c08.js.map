{"version":3,"file":"chunks/app_utils_performance_contexts_pageError_tsx-app_views_starfish_modules_databaseModule_panel_-909864.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/contexts/pageError.tsx","webpack:///./app/utils/useKeyPress.tsx","webpack:///./app/utils/useOnClickOutside.tsx","webpack:///./app/views/starfish/components/slideOverPanel.tsx","webpack:///./app/views/starfish/components/detailPanel.tsx","webpack:///./app/views/starfish/components/formattedCode.tsx","webpack:///./app/views/starfish/modules/databaseModule/panel/profileView.tsx","webpack:///./app/views/starfish/modules/databaseModule/panel/similarQueryView.tsx","webpack:///./app/views/starfish/modules/databaseModule/panel/index.tsx","webpack:///./app/views/starfish/modules/databaseModule/utils.ts"],"sourcesContent":["import {createContext, useContext, useState} from 'react';\n\nimport {Alert} from 'sentry/components/alert';\n\nconst pageErrorContext = createContext<{\n  setPageError: (error: string | undefined) => void;\n  pageError?: string;\n}>({\n  pageError: undefined,\n  setPageError: (_: string | undefined) => {},\n});\n\nexport function PageErrorProvider({children}: {children: React.ReactNode}) {\n  const [pageError, setPageError] = useState<string | undefined>();\n  return (\n    <pageErrorContext.Provider\n      value={{\n        pageError,\n        setPageError,\n      }}\n    >\n      {children}\n    </pageErrorContext.Provider>\n  );\n}\n\nexport function PageErrorAlert() {\n  const {pageError} = useContext(pageErrorContext);\n  if (!pageError) {\n    return null;\n  }\n\n  return (\n    <Alert type=\"error\" data-test-id=\"page-error-alert\" showIcon>\n      {pageError}\n    </Alert>\n  );\n}\n\nexport const usePageError = () => useContext(pageErrorContext);\n","import {useEffect, useState} from 'react';\n\n/**\n * Hook to detect when a specific key is being pressed\n */\nconst useKeyPress = (targetKey: string, target?: HTMLElement) => {\n  const [keyPressed, setKeyPressed] = useState(false);\n  const current = target ?? document.body;\n\n  useEffect(() => {\n    const downHandler = ({key}: KeyboardEvent) => {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    };\n\n    const upHandler = ({key}: KeyboardEvent) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    };\n\n    current.addEventListener('keydown', downHandler);\n    current.addEventListener('keyup', upHandler);\n\n    return () => {\n      current.removeEventListener('keydown', downHandler);\n      current.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey, current]);\n\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","import {useEffect} from 'react';\n\n// hook from https://usehooks.com/useOnClickOutside/\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T>,\n  handler: (event: MouseEvent | TouchEvent) => void\n) {\n  useEffect(\n    () => {\n      const listener = (event: MouseEvent | TouchEvent) => {\n        const el = ref?.current;\n\n        // Do nothing if clicking ref's element or descendent elements\n        if (!el || el.contains(event.target as Node)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Reload only if ref or handler changes\n    [ref, handler]\n  );\n}\n\nexport default useOnClickOutside;\n","import {ForwardedRef, forwardRef} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\nimport {motion} from 'framer-motion';\n\nconst PANEL_WIDTH = '50vw';\n\ntype SlideOverPanelProps = {\n  children: React.ReactNode;\n  collapsed: boolean;\n};\n\nexport default forwardRef(SlideOverPanel);\n\nfunction SlideOverPanel(\n  {collapsed, children}: SlideOverPanelProps,\n  ref: ForwardedRef<HTMLDivElement>\n) {\n  return (\n    <_SlideOverPanel\n      ref={ref}\n      collapsed={collapsed}\n      initial={{opacity: 0, x: PANEL_WIDTH}}\n      animate={!collapsed ? {opacity: 1, x: 0} : {opacity: 0, x: PANEL_WIDTH}}\n      transition={{\n        type: 'spring',\n        stiffness: 500,\n        damping: 50,\n      }}\n    >\n      {children}\n    </_SlideOverPanel>\n  );\n}\n\nconst _SlideOverPanel = styled(motion.div, {\n  shouldForwardProp: prop =>\n    ['animate', 'transition'].includes(prop) ||\n    (prop !== 'collapsed' && isPropValid(prop)),\n})<{\n  collapsed: boolean;\n}>`\n  width: ${PANEL_WIDTH};\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: ${p => p.theme.background};\n  color: ${p => p.theme.textColor};\n  border-left: 1px solid ${p => p.theme.border};\n  text-align: left;\n  z-index: ${p => p.theme.zIndex.sidebar - 1};\n  ${p =>\n    p.collapsed\n      ? 'overflow: hidden;'\n      : `overflow-x: hidden;\n  overflow-y: scroll;`}\n`;\n","import {useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport useKeyPress from 'sentry/utils/useKeyPress';\nimport useOnClickOutside from 'sentry/utils/useOnClickOutside';\nimport SlideOverPanel from 'sentry/views/starfish/components/slideOverPanel';\n\ntype DetailProps = {\n  children: React.ReactNode;\n  detailKey?: string;\n  onClose?: () => void;\n};\n\ntype DetailState = {\n  collapsed: boolean;\n};\n\nexport default function Detail({children, detailKey, onClose}: DetailProps) {\n  const [state, setState] = useState<DetailState>({collapsed: true});\n  const escapeKeyPressed = useKeyPress('Escape');\n\n  // Any time the key prop changes (due to user interaction), we want to open the panel\n  useEffect(() => {\n    if (detailKey) {\n      setState({collapsed: false});\n    }\n  }, [detailKey]);\n\n  const panelRef = useRef<HTMLDivElement>(null);\n  useOnClickOutside(panelRef, () => {\n    if (!state.collapsed) {\n      onClose?.();\n      setState({collapsed: true});\n    }\n  });\n\n  useEffect(() => {\n    if (escapeKeyPressed) {\n      if (!state.collapsed) {\n        onClose?.();\n        setState({collapsed: true});\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [escapeKeyPressed]);\n\n  return (\n    <SlideOverPanel collapsed={state.collapsed} ref={panelRef}>\n      <CloseButtonWrapper>\n        <CloseButton\n          priority=\"link\"\n          size=\"zero\"\n          borderless\n          aria-label={t('Close Details')}\n          icon={<IconClose size=\"sm\" />}\n          onClick={() => {\n            setState({collapsed: true});\n            onClose?.();\n          }}\n        />\n      </CloseButtonWrapper>\n      <DetailWrapper>{children}</DetailWrapper>\n    </SlideOverPanel>\n  );\n}\n\nconst CloseButton = styled(Button)`\n  color: ${p => p.theme.gray300};\n  &:hover {\n    color: ${p => p.theme.gray400};\n  }\n`;\n\nconst CloseButtonWrapper = styled('div')`\n  justify-content: flex-end;\n  display: flex;\n  padding: ${space(2)};\n`;\n\nconst DetailWrapper = styled('div')`\n  padding: 0 ${space(4)};\n`;\n","import styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\nexport const FormattedCode = styled('div')`\n  padding: ${space(1)};\n  margin-bottom: ${space(3)};\n  background: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  overflow-x: auto;\n  white-space: pre;\n`;\n","import {Fragment, useState} from 'react';\n\nimport {SpanProfileDetails} from 'sentry/components/events/interfaces/spans/spanProfileDetails';\nimport {RawSpanType} from 'sentry/components/events/interfaces/spans/types';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {ProfileGroupProvider} from 'sentry/views/profiling/profileGroupProvider';\nimport {ProfileContext, ProfilesProvider} from 'sentry/views/profiling/profilesProvider';\nimport {\n  useQueryGetEvent,\n  useQueryGetProfileIds,\n} from 'sentry/views/starfish/modules/databaseModule/queries';\n\ntype Props = {\n  spanHash: string;\n  transactionNames: string[];\n};\n\nexport function ProfileView(props: Props) {\n  const {spanHash, transactionNames} = props;\n  const organization = useOrganization();\n  const [transactionIdx, setTransactionIdx] = useState<number>(0);\n\n  const result = useQueryGetProfileIds(transactionNames);\n  const transactionIds = result?.data?.data?.map(d => d.id) ?? [];\n  const eventResult = useQueryGetEvent(transactionIds[transactionIdx]);\n\n  const isLoading = result.isLoading || eventResult.isLoading || eventResult.isRefetching;\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  const handleNoProfileFound = () => {\n    setTransactionIdx(transactionIdx + 1);\n  };\n\n  if (eventResult.data.id && transactionIdx < transactionIds.length) {\n    const event = eventResult.data;\n    const spans = event.entries[0].data as RawSpanType[];\n\n    const currentSpan = spans.find(s => s.hash === spanHash);\n    const profileId = event.contexts?.profile?.profile_id ?? undefined;\n    if (currentSpan && profileId) {\n      return (\n        <ProfilesProvider\n          orgSlug={organization.slug}\n          profileId={profileId}\n          projectSlug=\"sentry\" // TODO - don't harcode this\n        >\n          <ProfileContext.Consumer>\n            {profiles => (\n              <ProfileGroupProvider\n                type=\"flamechart\"\n                input={profiles?.type === 'resolved' ? profiles.data : null}\n                traceID={profileId || ''}\n              >\n                <SpanProfileDetails\n                  onNoProfileFound={handleNoProfileFound}\n                  event={event}\n                  span={currentSpan}\n                />\n              </ProfileGroupProvider>\n            )}\n          </ProfileContext.Consumer>\n        </ProfilesProvider>\n      );\n    }\n    handleNoProfileFound();\n  }\n\n  return <Fragment>'No profile found'</Fragment>;\n}\n\nexport default ProfileView;\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\n\nimport GridEditable from 'sentry/components/gridEditable';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {\n  DataRow,\n  Keys,\n  similarity,\n  TableColumnHeader,\n} from 'sentry/views/starfish/modules/databaseModule/databaseTableView';\nimport {useQueryMainTable} from 'sentry/views/starfish/modules/databaseModule/queries';\n\ntype Props = {\n  mainTableRow: DataRow;\n};\n\nconst COLUMN_ORDER: TableColumnHeader[] = [\n  {\n    key: 'description',\n    name: 'Query',\n    width: 300,\n  },\n  {\n    key: 'epm',\n    name: 'Tpm',\n  },\n  {\n    key: 'p50',\n    name: 'p50',\n  },\n  {\n    key: 'p95',\n    name: 'p95',\n  },\n  {\n    key: 'total_time',\n    name: 'Total Time',\n  },\n];\n\nfunction SimilarQueryView(props: Props) {\n  const {mainTableRow} = props;\n  const {isLoading, data} = useQueryMainTable({\n    limit: 410,\n  });\n  const location = useLocation();\n  const theme = useTheme();\n\n  const similarQueries = data.filter(\n    row => similarity(row.description, mainTableRow.description) > 0.8\n  );\n\n  const renderHeadCell = (col): React.ReactNode => {\n    return <span>{col.name}</span>;\n  };\n  const renderBodyCell = (column: TableColumnHeader, row: DataRow): React.ReactNode => {\n    const {key} = column;\n\n    let renderedValue: React.ReactNode = row[key];\n    if (key === 'description') {\n      const mainTableQueryWords = new Set(mainTableRow.description.split(' '));\n      const diffQuery = (\n        <div>\n          {row.description.split(' ').map(word => {\n            if (mainTableQueryWords.has(word)) {\n              return `${word} `;\n            }\n            return (\n              <span style={{color: theme.green400}} key={word}>\n                {`${word} `}\n              </span>\n            );\n          })}\n        </div>\n      );\n      renderedValue = diffQuery;\n    }\n    const timeBasedKeys: Keys[] = ['p50', 'p95', 'total_time'];\n    if ((['epm', ...timeBasedKeys] as Keys[]).includes(key)) {\n      const val = row[key] as number;\n      const mainTableVal = mainTableRow[key] as number;\n      const sign = val > mainTableVal ? '+' : '';\n      const percentage = (val / mainTableVal - 1) * 100;\n\n      let unit = '';\n      if (timeBasedKeys.includes(key)) {\n        unit = 'ms';\n      }\n\n      renderedValue = (\n        <Fragment>\n          {val.toFixed(3)}\n          {unit} ({sign}\n          <span style={{color: sign ? theme.red400 : theme.green400}}>\n            {percentage.toFixed(2)}%\n          </span>\n          )\n        </Fragment>\n      );\n    }\n    return <span>{renderedValue}</span>;\n  };\n  if (!isLoading && similarQueries.length > 0) {\n    return (\n      <GridEditable\n        isLoading={isLoading}\n        data={similarQueries as any}\n        columnOrder={COLUMN_ORDER}\n        columnSortBy={[]}\n        grid={{\n          renderHeadCell,\n          renderBodyCell,\n        }}\n        location={location}\n      />\n    );\n  }\n  return <Fragment />;\n}\n\nexport default SimilarQueryView;\n","import {useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport keyBy from 'lodash/keyBy';\nimport moment from 'moment';\n\nimport Badge from 'sentry/components/badge';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport TimeSince from 'sentry/components/timeSince';\nimport Version from 'sentry/components/version';\nimport VersionHoverCard from 'sentry/components/versionHoverCard';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport Detail from 'sentry/views/starfish/components/detailPanel';\nimport {FormattedCode} from 'sentry/views/starfish/components/formattedCode';\nimport {generateMarkLine} from 'sentry/views/starfish/components/sparkline';\nimport ProfileView from 'sentry/views/starfish/modules/databaseModule/panel/profileView';\nimport QueryTransactionTable, {\n  PanelSort,\n} from 'sentry/views/starfish/modules/databaseModule/panel/queryTransactionTable';\nimport SimilarQueryView from 'sentry/views/starfish/modules/databaseModule/panel/similarQueryView';\nimport {\n  useQueryExampleTransaction,\n  useQueryGetEvent,\n  useQueryPanelEventCount,\n  useQueryPanelGraph,\n  useQueryPanelSparklines,\n  useQueryPanelTable,\n  useQueryTransactionByTPMAndDuration,\n} from 'sentry/views/starfish/modules/databaseModule/queries';\nimport {queryToSeries} from 'sentry/views/starfish/modules/databaseModule/utils';\nimport {getDateFilters} from 'sentry/views/starfish/utils/dates';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nimport {DataRow, MainTableSort} from '../databaseTableView';\n\nconst INTERVAL = 12;\nconst SPARKLINE_INTERVAL = 24;\n\ntype DbQueryDetailProps = {\n  isDataLoading: boolean;\n  mainTableSort: MainTableSort;\n  onRowChange: (row: DataRow | undefined) => void;\n  row: DataRow;\n  nextRow?: DataRow;\n  prevRow?: DataRow;\n  transaction?: string;\n};\n\nexport type TransactionListDataRow = {\n  count: number;\n  example: string;\n  frequency: number;\n  group_id: string;\n  p75: number;\n  transaction: string;\n  uniqueEvents: number;\n};\n\nexport default function QueryDetail({\n  row,\n  nextRow,\n  prevRow,\n  isDataLoading,\n  onClose,\n  onRowChange,\n  mainTableSort,\n  transaction,\n}: Partial<DbQueryDetailProps> & {\n  isDataLoading: boolean;\n  mainTableSort: MainTableSort;\n  onClose: () => void;\n  onRowChange: (row: DataRow) => void;\n}) {\n  return (\n    <Detail detailKey={row?.description} onClose={onClose}>\n      {row && (\n        <QueryDetailBody\n          mainTableSort={mainTableSort}\n          onRowChange={onRowChange}\n          isDataLoading={isDataLoading}\n          row={row}\n          nextRow={nextRow}\n          prevRow={prevRow}\n          transaction={transaction}\n        />\n      )}\n    </Detail>\n  );\n}\n\nfunction QueryDetailBody({\n  row,\n  nextRow,\n  prevRow,\n  onRowChange,\n  transaction,\n  isDataLoading: isRowLoading,\n}: DbQueryDetailProps) {\n  const theme = useTheme();\n  const pageFilter = usePageFilters();\n  const organization = useOrganization();\n  const {startTime, endTime} = getDateFilters(pageFilter);\n  const isNew = row.newish === 1;\n  const isOld = row.retired === 1;\n\n  const [sort, setSort] = useState<PanelSort>({\n    direction: undefined,\n    sortHeader: undefined,\n  });\n\n  const {isLoading, data: graphData} = useQueryPanelGraph(row, INTERVAL);\n\n  const {isLoading: isTableLoading, data: tableData} = useQueryPanelTable(\n    row,\n    sort.sortHeader?.key,\n    sort.direction,\n    transaction\n  );\n\n  const {isLoading: isSparklinesLoading, data: sparklineData} = useQueryPanelSparklines(\n    row,\n    sort.sortHeader?.key,\n    sort.direction,\n    SPARKLINE_INTERVAL,\n    transaction\n  );\n\n  const {isLoading: isP75GraphLoading, data: transactionGraphData} =\n    useQueryTransactionByTPMAndDuration(\n      tableData.map(d => d.transaction).splice(0, 5),\n      SPARKLINE_INTERVAL\n    );\n\n  const {isLoading: isEventCountLoading, data: eventCountData} =\n    useQueryPanelEventCount(row);\n\n  const {isLoading: isExampleLoading, data: exampleTransaction} =\n    useQueryExampleTransaction(row);\n\n  const {isLoading: isFirstExampleLoading, data: firstSeenExample} = useQueryGetEvent(\n    exampleTransaction?.[0]?.first\n  );\n  const {isLoading: isLastExampleLoading, data: lastSeenExample} = useQueryGetEvent(\n    exampleTransaction?.[0]?.latest\n  );\n\n  const isDataLoading =\n    isLoading ||\n    isTableLoading ||\n    isEventCountLoading ||\n    isRowLoading ||\n    isP75GraphLoading ||\n    isExampleLoading ||\n    isFirstExampleLoading ||\n    isLastExampleLoading ||\n    isSparklinesLoading;\n\n  const eventCountMap = keyBy(eventCountData, 'transaction');\n\n  const mergedTableData: TransactionListDataRow[] = tableData.map(data => {\n    const tableTransaction = data.transaction;\n    const eventData = eventCountMap[tableTransaction];\n    if (eventData?.uniqueEvents) {\n      const frequency = data.count / eventData.uniqueEvents;\n      return {...data, frequency, ...eventData} as TransactionListDataRow;\n    }\n    return data as TransactionListDataRow;\n  });\n\n  const [countSeries, p50Series, p95Series] = throughputQueryToChartData(\n    graphData,\n    startTime,\n    endTime\n  );\n\n  const spmTransactionSeries = queryToSeries(\n    sparklineData,\n    'transaction',\n    'spm',\n    startTime,\n    endTime,\n    SPARKLINE_INTERVAL\n  );\n\n  const spanp50TransactionSeries = queryToSeries(\n    sparklineData,\n    'transaction',\n    'p50',\n    startTime,\n    endTime,\n    SPARKLINE_INTERVAL\n  );\n\n  const tpmTransactionSeries = queryToSeries(\n    transactionGraphData,\n    'group',\n    'epm()',\n    startTime,\n    endTime,\n    SPARKLINE_INTERVAL\n  );\n\n  const p50TransactionSeries = queryToSeries(\n    transactionGraphData,\n    'group',\n    'p50(transaction.duration)',\n    startTime,\n    endTime,\n    SPARKLINE_INTERVAL\n  );\n\n  const markLine =\n    spmTransactionSeries?.[0]?.data && (isNew || isOld)\n      ? generateMarkLine(\n          isNew ? 'First Seen' : 'Last Seen',\n          isNew ? row.firstSeen : row.lastSeen,\n          spmTransactionSeries[0].data,\n          theme\n        )\n      : undefined;\n\n  return (\n    <div>\n      <FlexRowContainer>\n        <FlexRowItem>\n          <h2>{t('Query Detail')}</h2>\n        </FlexRowItem>\n        <FlexRowItem>\n          <SimplePagination\n            disableLeft={!prevRow}\n            disableRight={!nextRow}\n            onLeftClick={() => onRowChange(prevRow)}\n            onRightClick={() => onRowChange(nextRow)}\n          />\n        </FlexRowItem>\n      </FlexRowContainer>\n\n      <FlexRowContainer>\n        <FlexRowItem>\n          <SubHeader>\n            {t('First Seen')}\n            {row.newish === 1 && <Badge type=\"new\" text=\"new\" />}\n          </SubHeader>\n          {Math.abs(moment(row.firstSeen).diff(startTime, 'minutes')) < 720 ? (\n            <SubSubHeader>\n              More than <TimeSince date={row.firstSeen} />{' '}\n            </SubSubHeader>\n          ) : (\n            <span>\n              <SubSubHeader>\n                <TimeSince date={row.firstSeen} />{' '}\n              </SubSubHeader>\n              {firstSeenExample?.release && (\n                <VersionHoverCard\n                  organization={organization}\n                  projectSlug=\"sentry\"\n                  releaseVersion={firstSeenExample.release.version}\n                  showUnderline\n                  underlineColor=\"linkUnderline\"\n                >\n                  <Version version={String(firstSeenExample.release.version)} truncate />\n                </VersionHoverCard>\n              )}\n            </span>\n          )}\n        </FlexRowItem>\n        <FlexRowItem>\n          <SubHeader>\n            {t('Last Seen')}\n            {row.retired === 1 && <Badge type=\"warning\" text=\"old\" />}\n          </SubHeader>\n          <SubSubHeader>\n            <TimeSince date={row.lastSeen} />\n          </SubSubHeader>\n          {lastSeenExample?.release && (\n            <VersionHoverCard\n              organization={organization}\n              projectSlug=\"sentry\"\n              releaseVersion={lastSeenExample.release.version}\n              showUnderline\n              underlineColor=\"linkUnderline\"\n            >\n              <Version version={String(lastSeenExample.release.version)} truncate />\n            </VersionHoverCard>\n          )}\n        </FlexRowItem>\n        <FlexRowItem>\n          <SubHeader>{t('Total Time')}</SubHeader>\n          <SubSubHeader>{row.total_time.toFixed(2)}ms</SubSubHeader>\n        </FlexRowItem>\n      </FlexRowContainer>\n\n      <SubHeader>{t('Query Description')}</SubHeader>\n      <FormattedCode>{highlightSql(row.formatted_desc, row)}</FormattedCode>\n      <FlexRowContainer>\n        <FlexRowItem>\n          <SubHeader>{t('Throughput (Spans Per Minute)')}</SubHeader>\n          <SubSubHeader>{row.epm.toFixed(3)}</SubSubHeader>\n          <Chart\n            statsPeriod=\"24h\"\n            height={140}\n            data={[countSeries]}\n            start=\"\"\n            end=\"\"\n            loading={isDataLoading}\n            utc={false}\n            stacked\n            isLineChart\n            disableXAxis\n            hideYAxisSplitLine\n          />\n        </FlexRowItem>\n        <FlexRowItem>\n          <SubHeader>{t('Duration P50 / P95')}</SubHeader>\n          <SubSubHeader>\n            {row.p50.toFixed(3)}ms / {row.p95.toFixed(3)}ms\n          </SubSubHeader>\n          <Chart\n            statsPeriod=\"24h\"\n            height={140}\n            data={[p50Series, p95Series]}\n            start=\"\"\n            end=\"\"\n            loading={isDataLoading}\n            utc={false}\n            chartColors={theme.charts.getColorPalette(4).slice(3, 5)}\n            stacked\n            isLineChart\n            disableXAxis\n            hideYAxisSplitLine\n          />\n        </FlexRowItem>\n      </FlexRowContainer>\n      <QueryTransactionTable\n        isDataLoading={isDataLoading}\n        onClickSort={s => setSort(s)}\n        row={row}\n        sort={sort}\n        tableData={mergedTableData}\n        spmData={spmTransactionSeries}\n        tpmData={tpmTransactionSeries}\n        spanP50Data={spanp50TransactionSeries}\n        txnP50Data={p50TransactionSeries}\n        markLine={markLine}\n      />\n      <FlexRowContainer>\n        <FlexRowItem>\n          <SubHeader>{t('Example Profile')}</SubHeader>\n          <ProfileView\n            spanHash={row.group_id}\n            transactionNames={tableData.map(d => d.transaction)}\n          />\n        </FlexRowItem>\n      </FlexRowContainer>\n      <FlexRowContainer>\n        <FlexRowItem>\n          <SubHeader>{t('Similar Queries')}</SubHeader>\n          <SimilarQueryView mainTableRow={row} />\n        </FlexRowItem>\n      </FlexRowContainer>\n    </div>\n  );\n}\n\ntype SimplePaginationProps = {\n  disableLeft?: boolean;\n  disableRight?: boolean;\n  onLeftClick?: () => void;\n  onRightClick?: () => void;\n};\n\nfunction SimplePagination(props: SimplePaginationProps) {\n  return (\n    <ButtonBar merged>\n      <Button\n        icon={<IconChevron direction=\"left\" size=\"sm\" />}\n        aria-label={t('Previous')}\n        disabled={props.disableLeft}\n        onClick={props.onLeftClick}\n      />\n      <Button\n        icon={<IconChevron direction=\"right\" size=\"sm\" />}\n        aria-label={t('Next')}\n        onClick={props.onRightClick}\n        disabled={props.disableRight}\n      />\n    </ButtonBar>\n  );\n}\n\nexport const highlightSql = (\n  description: string,\n  queryDetail: {action: string; domain: string}\n) => {\n  let acc = '';\n  return description.split('').map((token, i) => {\n    acc += token;\n    let final: string | React.ReactElement | null = null;\n    if (acc === queryDetail.action) {\n      final = <Operation key={i}>{queryDetail.action} </Operation>;\n    } else if (acc === queryDetail.domain) {\n      final = <Domain key={i}>{queryDetail.domain} </Domain>;\n    } else if (\n      ['FROM', 'INNER', 'JOIN', 'WHERE', 'ON', 'AND', 'NOT', 'NULL', 'IS'].includes(acc)\n    ) {\n      final = <Keyword key={i}>{acc}</Keyword>;\n    } else if (['(', ')'].includes(acc)) {\n      final = <Bracket key={i}>{acc}</Bracket>;\n    } else if (token === ' ' || token === '\\n' || description[i + 1] === ')') {\n      final = acc;\n    } else if (i === description.length - 1) {\n      final = acc;\n    }\n    if (final) {\n      acc = '';\n      const result = final;\n      final = null;\n      return result;\n    }\n    return null;\n  });\n};\n\nconst throughputQueryToChartData = (\n  data: any,\n  startTime: moment.Moment,\n  endTime: moment.Moment\n): Series[] => {\n  const countSeries: Series = {seriesName: 'spm()', data: [] as any[]};\n  const p50Series: Series = {seriesName: 'p50()', data: [] as any[]};\n  const p95Series: Series = {seriesName: 'p95()', data: [] as any[]};\n  data.forEach(({count, p50, p95, interval}) => {\n    countSeries.data.push({value: count, name: interval});\n    p50Series.data.push({value: p50, name: interval});\n    p95Series.data.push({value: p95, name: interval});\n  });\n  return [\n    zeroFillSeries(countSeries, moment.duration(INTERVAL, 'hours'), startTime, endTime),\n    zeroFillSeries(p50Series, moment.duration(INTERVAL, 'hours'), startTime, endTime),\n    zeroFillSeries(p95Series, moment.duration(INTERVAL, 'hours'), startTime, endTime),\n  ];\n};\n\nconst SubHeader = styled('h3')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst SubSubHeader = styled('h4')`\n  margin: 0;\n  font-weight: normal;\n`;\n\nexport const FlexRowContainer = styled('div')`\n  display: flex;\n  & > div:last-child {\n    padding-right: ${space(1)};\n  }\n  padding-bottom: ${space(2)};\n`;\n\nexport const FlexRowItem = styled('div')`\n  padding-right: ${space(4)};\n  flex: 1;\n`;\n\nconst Operation = styled('b')`\n  color: ${p => p.theme.blue400};\n`;\n\nconst Domain = styled('b')`\n  color: ${p => p.theme.green400};\n  margin-right: -${space(0.5)};\n`;\n\nconst Keyword = styled('b')`\n  color: ${p => p.theme.yellow400};\n`;\n\nconst Bracket = styled('b')`\n  color: ${p => p.theme.pink400};\n`;\n","import moment from 'moment';\n\nimport {Series} from 'sentry/types/echarts';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nexport const queryToSeries = (\n  data: (Record<string, any> & {interval: string})[],\n  groupByProperty: string,\n  seriesValueProperty: string,\n  startTime?: moment.Moment,\n  endTime?: moment.Moment,\n  interval?: number,\n  zerofillValue?: any\n): Series[] => {\n  const seriesMap: Record<string, Series> = {};\n\n  data.forEach(row => {\n    const dataEntry = {value: row[seriesValueProperty], name: row.interval};\n    if (!seriesMap[row[groupByProperty]]) {\n      seriesMap[row[groupByProperty]] = {\n        seriesName: row[groupByProperty],\n        data: [],\n      };\n    }\n    if (dataEntry.value !== undefined) {\n      seriesMap[row[groupByProperty]].data.push(dataEntry);\n    }\n  });\n  if (!startTime || !endTime || !interval) {\n    return Object.values(seriesMap);\n  }\n  return Object.values(seriesMap).map(series =>\n    zeroFillSeries(\n      series,\n      moment.duration(interval, 'hours'),\n      startTime,\n      endTime,\n      zerofillValue\n    )\n  );\n};\n"],"names":["pageErrorContext","createContext","pageError","undefined","setPageError","_","PageErrorProvider","_ref","children","useState","_jsx","Provider","value","PageErrorAlert","useContext","Alert","type","showIcon","displayName","usePageError","useKeyPress","targetKey","target","keyPressed","setKeyPressed","current","document","body","useEffect","downHandler","key","upHandler","_ref2","addEventListener","removeEventListener","ref","handler","listener","event","el","contains","PANEL_WIDTH","forwardRef","SlideOverPanel","collapsed","_SlideOverPanel","initial","opacity","x","animate","transition","stiffness","damping","_styled","motion","shouldForwardProp","prop","includes","isPropValid","p","theme","background","textColor","border","zIndex","sidebar","Detail","detailKey","onClose","state","setState","escapeKeyPressed","panelRef","useRef","useOnClickOutside","_jsxs","CloseButtonWrapper","CloseButton","priority","size","borderless","t","icon","IconClose","onClick","DetailWrapper","Button","gray300","gray400","space","FormattedCode","backgroundSecondary","borderRadius","ProfileView","props","spanHash","transactionNames","organization","useOrganization","transactionIdx","setTransactionIdx","result","useQueryGetProfileIds","transactionIds","data","map","d","id","eventResult","useQueryGetEvent","isLoading","isRefetching","LoadingIndicator","handleNoProfileFound","length","currentSpan","entries","find","s","hash","profileId","contexts","profile","profile_id","ProfilesProvider","orgSlug","slug","projectSlug","ProfileContext","profiles","ProfileGroupProvider","input","traceID","SpanProfileDetails","onNoProfileFound","span","Fragment","COLUMN_ORDER","name","width","SimilarQueryView","mainTableRow","useQueryMainTable","limit","location","useLocation","useTheme","similarQueries","filter","row","similarity","description","GridEditable","columnOrder","columnSortBy","grid","renderHeadCell","col","renderBodyCell","column","renderedValue","mainTableQueryWords","Set","split","word","has","style","color","green400","timeBasedKeys","val","mainTableVal","sign","percentage","unit","toFixed","red400","INTERVAL","SPARKLINE_INTERVAL","QueryDetail","nextRow","prevRow","isDataLoading","onRowChange","mainTableSort","transaction","QueryDetailBody","isRowLoading","pageFilter","usePageFilters","startTime","endTime","getDateFilters","isNew","newish","isOld","retired","sort","setSort","direction","sortHeader","graphData","useQueryPanelGraph","isTableLoading","tableData","useQueryPanelTable","isSparklinesLoading","sparklineData","useQueryPanelSparklines","isP75GraphLoading","transactionGraphData","useQueryTransactionByTPMAndDuration","splice","isEventCountLoading","eventCountData","useQueryPanelEventCount","isExampleLoading","exampleTransaction","useQueryExampleTransaction","isFirstExampleLoading","firstSeenExample","first","isLastExampleLoading","lastSeenExample","latest","eventCountMap","keyBy","mergedTableData","tableTransaction","eventData","uniqueEvents","frequency","count","countSeries","p50Series","p95Series","throughputQueryToChartData","spmTransactionSeries","queryToSeries","spanp50TransactionSeries","tpmTransactionSeries","p50TransactionSeries","markLine","generateMarkLine","firstSeen","lastSeen","FlexRowContainer","FlexRowItem","SimplePagination","disableLeft","disableRight","onLeftClick","onRightClick","SubHeader","Badge","text","Math","abs","moment","diff","SubSubHeader","TimeSince","date","release","VersionHoverCard","releaseVersion","version","showUnderline","underlineColor","Version","String","truncate","total_time","highlightSql","formatted_desc","epm","Chart","statsPeriod","height","start","end","loading","utc","stacked","isLineChart","disableXAxis","hideYAxisSplitLine","p50","p95","chartColors","charts","getColorPalette","slice","QueryTransactionTable","onClickSort","spmData","tpmData","spanP50Data","txnP50Data","group_id","ButtonBar","merged","IconChevron","disabled","queryDetail","acc","token","i","final","action","Operation","domain","Domain","Keyword","Bracket","seriesName","forEach","_ref3","interval","push","zeroFillSeries","fontSizeLarge","styles","blue400","yellow400","pink400","groupByProperty","seriesValueProperty","zerofillValue","seriesMap","dataEntry","Object","values","series"],"sourceRoot":""}