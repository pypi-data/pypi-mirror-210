{"version":3,"file":"chunks/app_views_starfish_views_spans_spanSummaryPanel_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/starfish/views/spans/spanSummaryPanel/releasePreview.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/spanDescription.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/useSpanTransactionMetrics.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/useSpanTransactionMetricSeries.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/useSpanTransactions.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/spanTransactionsTable.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/useSpanMetrics.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/useSpanMetricSeries.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/useSpanSeenEvent.tsx","webpack:///./app/views/starfish/views/spans/spanSummaryPanel/index.tsx","webpack:///../node_modules/lodash/groupBy.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport Version from 'sentry/components/version';\nimport VersionHoverCard from 'sentry/components/versionHoverCard';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype ReleasePreviewProps = {\n  release: {\n    version: string;\n  };\n};\n\nexport function ReleasePreview({release}: ReleasePreviewProps) {\n  const organization = useOrganization();\n\n  return (\n    <ReleaseWrapper>\n      <VersionHoverCard\n        organization={organization}\n        projectSlug=\"sentry\"\n        releaseVersion={release.version}\n        showUnderline\n        underlineColor=\"linkUnderline\"\n      >\n        <Version version={String(release.version)} truncate />\n      </VersionHoverCard>\n    </ReleaseWrapper>\n  );\n}\n\nconst ReleaseWrapper = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import styled from '@emotion/styled';\n\nimport {FormattedCode} from 'sentry/views/starfish/components/formattedCode';\nimport {highlightSql} from 'sentry/views/starfish/modules/databaseModule/panel';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\n\nexport function SpanDescription({span}: {span: Span}) {\n  if (span.span_operation.startsWith('db')) {\n    return <DatabaseSpanDescription span={span} />;\n  }\n\n  return <div>{span.description}</div>;\n}\n\nfunction DatabaseSpanDescription({span}: {span: Span}) {\n  return (\n    <CodeWrapper>\n      <FormattedCode>\n        {highlightSql(span.formatted_desc || span.description || '', {\n          action: span.action || '',\n          domain: span.domain || '',\n        })}\n      </FormattedCode>\n    </CodeWrapper>\n  );\n}\n\nconst CodeWrapper = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import keyBy from 'lodash/keyBy';\n\nimport {useQuery} from 'sentry/utils/queryClient';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\n\nconst INTERVAL = 12;\n\ntype Metric = {\n  p50: number;\n  spm: number;\n};\n\nexport const useSpanTransactionMetrics = (\n  span?: Span,\n  transactions?: string[],\n  referrer = 'span-transaction-metrics'\n) => {\n  const query =\n    span && transactions && transactions.length > 0 ? getQuery(span, transactions) : '';\n\n  const {isLoading, error, data} = useQuery<Metric[]>({\n    queryKey: [\n      'span-transactions-metrics',\n      span?.group_id,\n      transactions?.join(',') || '',\n    ],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${query}&referrer=${referrer}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n    enabled: Boolean(query),\n  });\n\n  const parsedData = keyBy(data, 'transaction');\n\n  return {isLoading, error, data: parsedData};\n};\n\nconst getQuery = (span: Span, transactions: string[]) => {\n  return `\n    SELECT\n      transaction,\n      quantile(0.5)(exclusive_time) as p50,\n      divide(count(), multiply(${INTERVAL}, 60)) as spm\n    FROM spans_experimental_starfish\n    WHERE group_id = '${span.group_id}'\n    AND transaction IN ('${transactions.join(\"','\")}')\n    GROUP BY transaction\n `;\n};\n","import groupBy from 'lodash/groupBy';\nimport keyBy from 'lodash/keyBy';\nimport moment from 'moment';\n\nimport {Series} from 'sentry/types/echarts';\nimport {useQuery} from 'sentry/utils/queryClient';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\n\nconst INTERVAL = 12;\n\ntype Metric = {\n  count: number;\n  interval: string;\n  p50: number;\n  p95: number;\n};\n\nexport const useSpanTransactionMetricSeries = (\n  span?: Span,\n  transactions?: string[],\n  referrer: string = 'span-transaction-metrics-series'\n) => {\n  const query =\n    span && transactions && transactions.length > 0 ? getQuery(span, transactions) : '';\n\n  const {isLoading, error, data} = useQuery<Metric[]>({\n    queryKey: ['span-metrics-series', span?.group_id, transactions?.join(',') || ''],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${query}&referrer=${referrer}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n    enabled: Boolean(query),\n  });\n\n  const parsedData: Record<string, Record<string, Series>> = {};\n  const dataByTransaction = groupBy(data, 'transaction');\n  Object.keys(dataByTransaction).forEach(transaction => {\n    const parsedTransactionData = keyBy(\n      ['spm', 'p50'].map(seriesName => {\n        const series: Series = {\n          seriesName,\n          data: data.map(datum => ({value: datum[seriesName], name: datum.interval})),\n        };\n\n        return zeroFillSeries(series, moment.duration(INTERVAL, 'hours'));\n      }),\n      'seriesName'\n    );\n\n    parsedData[transaction] = parsedTransactionData;\n  });\n\n  return {isLoading, error, data: parsedData};\n};\n\nconst getQuery = (span: Span, transactions: string[]) => {\n  return `SELECT\n    transaction,\n    toStartOfInterval(start_timestamp, INTERVAL ${INTERVAL} hour) as interval,\n    quantile(0.50)(exclusive_time) AS p50,\n    divide(count(), multiply(${INTERVAL}, 60)) as spm\n  FROM spans_experimental_starfish\n  WHERE\n    transaction IN ('${transactions.join(\"','\")}')\n    AND group_id = '${span.group_id}'\n  GROUP BY transaction, interval\n  ORDER BY transaction, interval\n`;\n};\n","import {useQuery} from 'sentry/utils/queryClient';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\n\ntype Transaction = {\n  count: number;\n  transaction: string;\n};\n\nexport const useSpanTransactions = (span?: Span, referrer = 'span-transactions') => {\n  const query = span ? getQuery(span) : '';\n\n  const {isLoading, error, data} = useQuery<Transaction[]>({\n    queryKey: ['span-transactions', span?.group_id],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${query}&referrer=${referrer}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n    enabled: Boolean(span),\n  });\n\n  return {isLoading, error, data};\n};\n\nconst getQuery = (span: Span) => {\n  return `\n    SELECT\n      transaction,\n      count() AS count\n    FROM spans_experimental_starfish\n    WHERE\n      group_id = '${span.group_id}'\n    GROUP BY transaction\n    ORDER BY -power(10, floor(log10(count()))), -quantile(0.75)(exclusive_time)\n    LIMIT 5\n`;\n};\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport * as qs from 'query-string';\n\nimport GridEditable, {GridColumnHeader as Column} from 'sentry/components/gridEditable';\nimport Link from 'sentry/components/links/link';\nimport Truncate from 'sentry/components/truncate';\nimport {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {Series} from 'sentry/types/echarts';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport Sparkline, {\n  generateHorizontalLine,\n} from 'sentry/views/starfish/components/sparkline';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\nimport {useSpanTransactionMetrics} from 'sentry/views/starfish/views/spans/spanSummaryPanel/useSpanTransactionMetrics';\nimport {useSpanTransactionMetricSeries} from 'sentry/views/starfish/views/spans/spanSummaryPanel/useSpanTransactionMetricSeries';\nimport {useSpanTransactions} from 'sentry/views/starfish/views/spans/spanSummaryPanel/useSpanTransactions';\n\ntype Props = {\n  span: Span;\n};\n\ntype Metric = {\n  p50: number;\n  spm: number;\n};\n\ntype Row = {\n  count: number;\n  metricSeries: Record<string, Series>;\n  metrics: Metric;\n  transaction: string;\n};\n\nexport function SpanTransactionsTable({span}: Props) {\n  const location = useLocation();\n\n  const {data: spanTransactions, isLoading} = useSpanTransactions(span);\n  const {data: spanTransactionMetrics} = useSpanTransactionMetrics(\n    span,\n    spanTransactions.map(row => row.transaction)\n  );\n  const {data: spanTransactionMetricsSeries} = useSpanTransactionMetricSeries(\n    span,\n    spanTransactions.map(row => row.transaction)\n  );\n\n  const spanTransactionsWithMetrics = spanTransactions.map(row => {\n    return {\n      ...row,\n      metrics: spanTransactionMetrics[row.transaction],\n      metricSeries: spanTransactionMetricsSeries[row.transaction],\n    };\n  });\n\n  const renderHeadCell = column => {\n    return <span>{column.name}</span>;\n  };\n\n  const renderBodyCell = (column, row: Row) => {\n    return <BodyCell span={span} column={column} row={row} />;\n  };\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={spanTransactionsWithMetrics}\n      columnOrder={COLUMN_ORDER}\n      columnSortBy={[]}\n      grid={{\n        renderHeadCell,\n        renderBodyCell,\n      }}\n      location={location}\n    />\n  );\n}\n\ntype CellProps = {column: Column; row: Row; span: Span};\n\nfunction BodyCell({span, column, row}: CellProps) {\n  if (column.key === 'transaction') {\n    return <TransactionCell span={span} row={row} column={column} />;\n  }\n\n  if (column.key === 'p50') {\n    return <P50Cell span={span} row={row} column={column} />;\n  }\n\n  if (column.key === 'spm') {\n    return <SPMCell span={span} row={row} column={column} />;\n  }\n\n  return <span>{row[column.key]}</span>;\n}\n\nfunction TransactionCell({span, column, row}: CellProps) {\n  return (\n    <Fragment>\n      <Link\n        to={`/starfish/span/${encodeURIComponent(span.group_id)}?${qs.stringify({\n          transaction: row.transaction,\n        })}`}\n      >\n        <Truncate value={row[column.key]} maxLength={50} />\n      </Link>\n\n      <span>{row.count} spans</span>\n    </Fragment>\n  );\n}\n\nfunction P50Cell({row}: CellProps) {\n  const theme = useTheme();\n\n  return (\n    <Fragment>\n      {row.metricSeries?.p50 ? (\n        <Sparkline\n          color={CHART_PALETTE[3][0]}\n          series={row.metricSeries.p50}\n          markLine={\n            row.metrics?.p50\n              ? generateHorizontalLine(\n                  `${row.metrics.p50.toFixed(2)}`,\n                  row.metrics.p50,\n                  theme\n                )\n              : undefined\n          }\n        />\n      ) : null}\n    </Fragment>\n  );\n}\n\nfunction SPMCell({row}: CellProps) {\n  const theme = useTheme();\n\n  return (\n    <Fragment>\n      {row.metricSeries?.spm ? (\n        <Sparkline\n          color={CHART_PALETTE[3][1]}\n          series={row.metricSeries.spm}\n          markLine={\n            row.metrics?.spm\n              ? generateHorizontalLine(\n                  `${row.metrics.spm.toFixed(2)}`,\n                  row.metrics.spm,\n                  theme\n                )\n              : undefined\n          }\n        />\n      ) : null}\n    </Fragment>\n  );\n}\n\nconst COLUMN_ORDER = [\n  {\n    key: 'transaction',\n    name: 'Transaction',\n    width: -1,\n  },\n  {\n    key: 'spm',\n    name: 'SPM',\n    width: -1,\n  },\n  {\n    key: 'p50',\n    name: 'p50',\n    width: -1,\n  },\n];\n","import {useQuery} from 'sentry/utils/queryClient';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\n\ntype Metrics = {\n  count: number;\n  first_seen: string;\n  last_seen: string;\n  total_time: number;\n};\n\nexport const useSpanMetrics = (span?: Span, referrer = 'span-metrics') => {\n  const query = span ? getQuery(span) : '';\n\n  const {isLoading, error, data} = useQuery<Metrics[]>({\n    queryKey: ['span-metrics', span?.group_id],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${query}&referrer=${referrer}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n    enabled: Boolean(span),\n  });\n\n  return {isLoading, error, data: data[0]};\n};\n\nconst getQuery = (span: Span) => {\n  return `\n    SELECT\n    count() as count,\n    min(timestamp) as first_seen,\n    max(timestamp) as last_seen,\n    sum(exclusive_time) as total_time\n    FROM spans_experimental_starfish\n    WHERE group_id = '${span.group_id}'\n `;\n};\n","import keyBy from 'lodash/keyBy';\nimport moment from 'moment';\n\nimport {Series} from 'sentry/types/echarts';\nimport {useQuery} from 'sentry/utils/queryClient';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\n\nconst INTERVAL = 12;\n\ntype Metric = {\n  count: number;\n  interval: string;\n  p50: number;\n  p95: number;\n};\n\nexport const useSpanMetricSeries = (span?: Span, referrer = 'span-metrics-series') => {\n  const query = span ? getQuery(span) : '';\n\n  const {isLoading, error, data} = useQuery<Metric[]>({\n    queryKey: ['span-metrics-series', span?.group_id],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${query}&referrer=${referrer}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n    enabled: Boolean(span),\n  });\n\n  const parsedData = keyBy(\n    ['spm', 'p50', 'p95', 'failure_rate'].map(seriesName => {\n      const series: Series = {\n        seriesName,\n        data: data.map(datum => ({value: datum[seriesName], name: datum.interval})),\n      };\n\n      return zeroFillSeries(series, moment.duration(INTERVAL, 'hours'));\n    }),\n    'seriesName'\n  );\n\n  return {isLoading, error, data: parsedData};\n};\n\nconst getQuery = (span: Span) => {\n  return `\n  SELECT\n    toStartOfInterval(start_timestamp, INTERVAL ${INTERVAL} HOUR) as interval,\n    count() as count,\n    divide(count, multiply(${INTERVAL}, 60)) as spm,\n    quantile(0.95)(exclusive_time) as p95,\n    quantile(0.50)(exclusive_time) as p50,\n    countIf(greaterOrEquals(status, 400) AND lessOrEquals(status, 599)) as \"failure_count\",\n    \"failure_count\" / \"count\" as \"failure_rate\"\n  FROM spans_experimental_starfish\n  WHERE group_id = '${span.group_id}'\n  GROUP BY interval\n  ORDER BY interval\n`;\n};\n","import {useQuery} from 'sentry/utils/queryClient';\nimport {useQueryGetEvent} from 'sentry/views/starfish/modules/databaseModule/queries';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\n\ntype HasTransaction = {\n  transaction_id: string;\n};\n\nfunction useFirstSeenSpan(span?: Span, referrer = 'first-seen-span') {\n  const query = span\n    ? `\n    SELECT transaction_id\n    FROM spans_experimental_starfish\n    WHERE group_id = '${span.group_id}'\n    ORDER BY start_timestamp ASC\n    LIMIT 1\n `\n    : null;\n\n  const result = useQuery<(Span & HasTransaction)[]>({\n    queryKey: ['span', 'first', span?.group_id],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${query}&referrer=${referrer}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n    enabled: Boolean(span),\n  });\n\n  return {...result, data: result.data[0]};\n}\n\nexport const useSpanFirstSeenEvent = (\n  span?: Span,\n  referrer = 'span-first-seen-event'\n) => {\n  const {data} = useFirstSeenSpan(span, referrer);\n  return useQueryGetEvent(data?.transaction_id);\n};\n\nfunction useLastSeenSpan(span?: Span, referrer = 'last-seen-span') {\n  const query = span\n    ? `\n    SELECT transaction_id\n    FROM spans_experimental_starfish\n    WHERE group_id = '${span.group_id}'\n    ORDER BY start_timestamp DESC\n    LIMIT 1\n `\n    : null;\n\n  const result = useQuery<(Span & HasTransaction)[]>({\n    queryKey: ['span', 'last', span?.group_id],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${query}&referrer=${referrer}`).then(res => res.json()),\n    retry: false,\n    initialData: [],\n    enabled: Boolean(span),\n  });\n\n  return {...result, data: result.data[0]};\n}\n\nexport const useSpanLastSeenEvent = (span?: Span, referrer = 'span-last-seen-event') => {\n  const {data} = useLastSeenSpan(span, referrer);\n  return useQueryGetEvent(data?.transaction_id);\n};\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Duration from 'sentry/components/duration';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport Detail from 'sentry/views/starfish/components/detailPanel';\nimport {ReleasePreview} from 'sentry/views/starfish/views/spans/spanSummaryPanel/releasePreview';\nimport {SpanDescription} from 'sentry/views/starfish/views/spans/spanSummaryPanel/spanDescription';\nimport {SpanTransactionsTable} from 'sentry/views/starfish/views/spans/spanSummaryPanel/spanTransactionsTable';\nimport type {Span} from 'sentry/views/starfish/views/spans/spanSummaryPanel/types';\nimport {useSpanMetrics} from 'sentry/views/starfish/views/spans/spanSummaryPanel/useSpanMetrics';\nimport {useSpanMetricSeries} from 'sentry/views/starfish/views/spans/spanSummaryPanel/useSpanMetricSeries';\nimport {\n  useSpanFirstSeenEvent,\n  useSpanLastSeenEvent,\n} from 'sentry/views/starfish/views/spans/spanSummaryPanel/useSpanSeenEvent';\n\ntype Props = {\n  onClose: () => void;\n  span?: Span;\n};\n\nexport function SpanSummaryPanel({span, onClose}: Props) {\n  const theme = useTheme();\n\n  const {data: spanMetrics} = useSpanMetrics(span);\n  const {data: spanMetricSeries} = useSpanMetricSeries(span);\n\n  const {data: firstSeenSpanEvent} = useSpanFirstSeenEvent(span);\n  const {data: lastSeenSpanEvent} = useSpanLastSeenEvent(span);\n\n  return (\n    <Detail detailKey={span?.group_id} onClose={onClose}>\n      <Header>{t('Span Summary')}</Header>\n\n      <BlockContainer>\n        <Block title={t('First Seen')}>\n          <TimeSince date={spanMetrics?.first_seen} />\n          {firstSeenSpanEvent?.release && (\n            <ReleasePreview release={firstSeenSpanEvent?.release} />\n          )}\n        </Block>\n\n        <Block title={t('Last Seen')}>\n          <TimeSince date={spanMetrics?.last_seen} />\n          {lastSeenSpanEvent?.release && (\n            <ReleasePreview release={lastSeenSpanEvent?.release} />\n          )}\n        </Block>\n\n        <Block title={t('Total Spans')}>{spanMetrics?.count}</Block>\n\n        <Block title={t('Total Time')}>\n          <Duration\n            seconds={spanMetrics?.total_time / 1000}\n            fixedDigits={2}\n            abbreviation\n          />\n        </Block>\n      </BlockContainer>\n\n      <BlockContainer>\n        {span && (\n          <Block title={t('Description')}>\n            <SpanDescription span={span} />\n          </Block>\n        )}\n      </BlockContainer>\n\n      <BlockContainer>\n        <Block title={t('SPM')}>\n          <Chart\n            statsPeriod=\"24h\"\n            height={140}\n            data={[spanMetricSeries.spm]}\n            start=\"\"\n            end=\"\"\n            loading={false}\n            utc={false}\n            stacked\n            isLineChart\n            disableXAxis\n            hideYAxisSplitLine\n          />\n        </Block>\n\n        <Block title={t('Duration')}>\n          <Chart\n            statsPeriod=\"24h\"\n            height={140}\n            data={[spanMetricSeries.p50, spanMetricSeries.p95]}\n            start=\"\"\n            end=\"\"\n            loading={false}\n            chartColors={theme.charts.getColorPalette(4).slice(3, 5)}\n            utc={false}\n            stacked\n            isLineChart\n            disableXAxis\n            hideYAxisSplitLine\n          />\n        </Block>\n\n        {span?.span_operation === 'http.client' ? (\n          <Block title={t('Failure Rate')}>\n            <Chart\n              statsPeriod=\"24h\"\n              height={140}\n              data={[spanMetricSeries.failure_rate]}\n              start=\"\"\n              end=\"\"\n              loading={false}\n              chartColors={[theme.charts.getColorPalette(2)[2]]}\n              utc={false}\n              stacked\n              isLineChart\n              disableXAxis\n              hideYAxisSplitLine\n            />\n          </Block>\n        ) : null}\n      </BlockContainer>\n\n      <BlockContainer>{span && <SpanTransactionsTable span={span} />}</BlockContainer>\n    </Detail>\n  );\n}\n\ntype BlockProps = {\n  children: React.ReactNode;\n  title: React.ReactNode;\n};\n\nfunction Block({title, children}: BlockProps) {\n  return (\n    <BlockWrapper>\n      <BlockTitle>{title}</BlockTitle>\n      <BlockContent>{children}</BlockContent>\n    </BlockWrapper>\n  );\n}\n\nconst Header = styled('h2')``;\n\nconst BlockTitle = styled('h3')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  margin-bottom: ${space(1)};\n`;\n\nconst BlockContent = styled('h4')`\n  margin: 0;\n  font-weight: normal;\n`;\n\nconst BlockContainer = styled('div')`\n  display: flex;\n  & > div:last-child {\n    padding-right: ${space(1)};\n  }\n  padding-bottom: ${space(2)};\n`;\n\nconst BlockWrapper = styled('div')`\n  padding-right: ${space(4)};\n  flex: 1;\n`;\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nmodule.exports = groupBy;\n"],"names":["ReleasePreview","_ref","release","organization","useOrganization","_jsx","ReleaseWrapper","children","VersionHoverCard","projectSlug","releaseVersion","version","showUnderline","underlineColor","Version","String","truncate","displayName","_styled","target","p","theme","fontSizeMedium","SpanDescription","span","span_operation","startsWith","DatabaseSpanDescription","description","_ref2","CodeWrapper","FormattedCode","highlightSql","formatted_desc","action","domain","useSpanTransactionMetrics","transactions","referrer","arguments","length","undefined","query","getQuery","isLoading","error","data","useQuery","queryKey","group_id","join","queryFn","fetch","HOST","then","res","json","retry","initialData","enabled","Boolean","keyBy","useSpanTransactionMetricSeries","parsedData","dataByTransaction","groupBy","Object","keys","forEach","transaction","parsedTransactionData","map","seriesName","series","datum","value","name","interval","zeroFillSeries","moment","useSpanTransactions","SpanTransactionsTable","location","useLocation","spanTransactions","spanTransactionMetrics","row","spanTransactionMetricsSeries","spanTransactionsWithMetrics","metrics","metricSeries","GridEditable","columnOrder","COLUMN_ORDER","columnSortBy","grid","renderHeadCell","column","renderBodyCell","BodyCell","key","TransactionCell","P50Cell","SPMCell","_ref3","_jsxs","Fragment","Link","to","encodeURIComponent","qs","Truncate","maxLength","count","_ref4","useTheme","p50","Sparkline","color","CHART_PALETTE","markLine","generateHorizontalLine","toFixed","_ref5","spm","width","useSpanMetrics","useSpanMetricSeries","useSpanFirstSeenEvent","result","useFirstSeenSpan","useQueryGetEvent","transaction_id","useSpanLastSeenEvent","useLastSeenSpan","SpanSummaryPanel","onClose","spanMetrics","spanMetricSeries","firstSeenSpanEvent","lastSeenSpanEvent","Detail","detailKey","Header","t","BlockContainer","Block","title","TimeSince","date","first_seen","last_seen","Duration","seconds","total_time","fixedDigits","abbreviation","Chart","statsPeriod","height","start","end","loading","utc","stacked","isLineChart","disableXAxis","hideYAxisSplitLine","p95","chartColors","charts","getColorPalette","slice","failure_rate","BlockWrapper","BlockTitle","BlockContent","gray300","space","styles","baseAssignValue","createAggregator","hasOwnProperty","prototype","call","push","module","exports"],"sourceRoot":""}