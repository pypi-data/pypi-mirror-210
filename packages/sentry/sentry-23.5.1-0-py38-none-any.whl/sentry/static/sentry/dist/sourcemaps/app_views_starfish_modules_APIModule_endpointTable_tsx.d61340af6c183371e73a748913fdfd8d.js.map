{"version":3,"file":"chunks/app_views_starfish_modules_APIModule_endpointTable_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/starfish/modules/APIModule/endpointTable.tsx","webpack:///./app/views/starfish/modules/APIModule/queries.tsx"],"sourcesContent":["import {ReactElement} from 'react';\nimport styled from '@emotion/styled';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport Duration from 'sentry/components/duration';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnHeader,\n} from 'sentry/components/gridEditable';\nimport Link from 'sentry/components/links/link';\nimport {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {Series} from 'sentry/types/echarts';\nimport Sparkline from 'sentry/views/starfish/components/sparkline';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\nimport {EndpointDataRow} from 'sentry/views/starfish/views/endpointDetails';\n\nimport {\n  getEndpointAggregatesQuery,\n  getEndpointListEventView,\n  getEndpointListQuery,\n} from './queries';\n\ntype Props = {\n  filterOptions: {\n    action: string;\n    datetime: DateTimeObject;\n    domain: string;\n    transaction: string;\n  };\n  location: Location;\n  onSelect: (row: EndpointDataRow) => void;\n  columns?: {\n    key: string;\n    name: string;\n    width: number;\n  }[];\n};\n\nexport type DataRow = {\n  count: number;\n  description: string;\n  domain: string;\n  group_id: string;\n};\n\nconst COLUMN_ORDER = [\n  {\n    key: 'description',\n    name: 'URL',\n    width: 600,\n  },\n  {\n    key: 'throughput',\n    name: 'throughput',\n    width: 200,\n  },\n  {\n    key: 'p50_trend',\n    name: 'p50 Trend',\n    width: 200,\n  },\n  {\n    key: 'p50(span.self_time)',\n    name: 'p50',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'count_unique(user)',\n    name: 'Users',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'count_unique(transaction)',\n    name: 'Transactions',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'sum(span.self_time)',\n    name: 'Total Time',\n    width: COL_WIDTH_UNDEFINED,\n  },\n];\n\nexport default function EndpointTable({\n  location,\n  onSelect,\n  filterOptions,\n  columns,\n}: Props) {\n  const {isLoading: areEndpointsLoading, data: endpointsData} = useSpansQuery({\n    queryString: getEndpointListQuery(filterOptions),\n    eventView: getEndpointListEventView(filterOptions),\n    initialData: [],\n  });\n\n  const {isLoading: areEndpointAggregatesLoading, data: endpointsThroughputData} =\n    useQuery({\n      queryKey: ['endpointAggregates', filterOptions],\n      queryFn: () =>\n        fetch(`${HOST}/?query=${getEndpointAggregatesQuery(filterOptions)}`).then(res =>\n          res.json()\n        ),\n      retry: false,\n      refetchOnWindowFocus: false,\n      initialData: [],\n    });\n\n  const aggregatesGroupedByURL = {};\n  endpointsThroughputData.forEach(({description, interval, count, p50}) => {\n    if (description in aggregatesGroupedByURL) {\n      aggregatesGroupedByURL[description].push({name: interval, count, p50});\n    } else {\n      aggregatesGroupedByURL[description] = [{name: interval, count, p50}];\n    }\n  });\n\n  const combinedEndpointData = endpointsData.map(data => {\n    const url = data.description;\n\n    const throughputSeries: Series = {\n      seriesName: 'throughput',\n      data: aggregatesGroupedByURL[url]?.map(({name, count}) => ({\n        name,\n        value: count,\n      })),\n    };\n\n    const p50Series: Series = {\n      seriesName: 'p50 Trend',\n      data: aggregatesGroupedByURL[url]?.map(({name, p50}) => ({\n        name,\n        value: p50,\n      })),\n    };\n\n    const zeroFilledThroughput = zeroFillSeries(\n      throughputSeries,\n      moment.duration(12, 'hours')\n    );\n    const zeroFilledP50 = zeroFillSeries(p50Series, moment.duration(12, 'hours'));\n    return {...data, throughput: zeroFilledThroughput, p50_trend: zeroFilledP50};\n  });\n\n  return (\n    <GridEditable\n      isLoading={areEndpointsLoading || areEndpointAggregatesLoading}\n      data={combinedEndpointData}\n      columnOrder={columns ?? COLUMN_ORDER}\n      columnSortBy={[]}\n      grid={{\n        renderHeadCell,\n        renderBodyCell: (column: GridColumnHeader, row: EndpointDataRow) =>\n          renderBodyCell(column, row, onSelect),\n      }}\n      location={location}\n    />\n  );\n}\n\nexport function renderHeadCell(column: GridColumnHeader): React.ReactNode {\n  if (column.key === 'throughput' || column.key === 'p50_trend') {\n    return (\n      <TextAlignLeft>\n        <OverflowEllipsisTextContainer>{column.name}</OverflowEllipsisTextContainer>\n      </TextAlignLeft>\n    );\n  }\n\n  // TODO: come up with a better way to identify number columns to align to the right\n  if (\n    column.key.toString().match(/^p\\d\\d/) ||\n    !['description', 'transaction'].includes(column.key.toString())\n  ) {\n    return (\n      <TextAlignRight>\n        <OverflowEllipsisTextContainer>{column.name}</OverflowEllipsisTextContainer>\n      </TextAlignRight>\n    );\n  }\n  return <OverflowEllipsisTextContainer>{column.name}</OverflowEllipsisTextContainer>;\n}\n\nexport function renderBodyCell(\n  column: GridColumnHeader,\n  row: EndpointDataRow,\n  onSelect?: (row: EndpointDataRow) => void\n): React.ReactNode {\n  if (column.key === 'description' && onSelect) {\n    return (\n      <OverflowEllipsisTextContainer>\n        <Link onClick={() => onSelect(row)} to=\"\">\n          {row[column.key]}\n        </Link>\n      </OverflowEllipsisTextContainer>\n    );\n  }\n\n  if (column.key === 'throughput') {\n    return (\n      <Sparkline\n        color={CHART_PALETTE[3][0]}\n        series={row[column.key]}\n        width={column.width ? column.width - column.width / 5 : undefined}\n      />\n    );\n  }\n\n  if (column.key === 'p50_trend') {\n    return (\n      <Sparkline\n        color={CHART_PALETTE[3][3]}\n        series={row[column.key]}\n        width={column.width ? column.width - column.width / 5 : undefined}\n      />\n    );\n  }\n\n  // TODO: come up with a better way to identify number columns to align to the right\n  let node: ReactElement | null = null;\n  if (column.key.toString().match(/^p\\d\\d/) || column.key === 'sum(span.self_time)') {\n    node = <Duration seconds={row[column.key] / 1000} fixedDigits={2} abbreviation />;\n  } else if (!['description', 'transaction'].includes(column.key.toString())) {\n    node = (\n      <OverflowEllipsisTextContainer>{row[column.key]}</OverflowEllipsisTextContainer>\n    );\n  } else {\n    node = (\n      <OverflowEllipsisTextContainer>{row[column.key]}</OverflowEllipsisTextContainer>\n    );\n  }\n\n  const isNumericColumn =\n    column.key.toString().match(/^p\\d\\d/) || column.key.toString().match(/^.*\\(.*\\)/);\n\n  if (isNumericColumn) {\n    return <TextAlignRight>{node}</TextAlignRight>;\n  }\n\n  return <TextAlignLeft>{node}</TextAlignLeft>;\n}\n\nexport const OverflowEllipsisTextContainer = styled('span')`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport const TextAlignRight = styled('span')`\n  text-align: right;\n  width: 100%;\n`;\n\nexport const TextAlignLeft = styled('span')`\n  text-align: left;\n  width: 100%;\n`;\n","import {useQuery} from '@tanstack/react-query';\n\nimport {NewQuery} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {DefinedUseQueryResult} from 'sentry/utils/queryClient';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {getDateQueryFilter} from 'sentry/views/starfish/modules/databaseModule/queries';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {\n  datetimeToClickhouseFilterTimestamps,\n  getDateFilters,\n} from 'sentry/views/starfish/utils/dates';\nimport {useWrappedDiscoverTimeseriesQuery} from 'sentry/views/starfish/utils/useSpansQuery';\n\nexport const getHostListQuery = ({datetime}) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  return `SELECT\n    domain,\n    toStartOfInterval(start_timestamp, INTERVAL 12 HOUR) as interval,\n    quantile(0.99)(exclusive_time) as p99,\n    count() as count,\n    countIf(greaterOrEquals(status, 400) AND lessOrEquals(status, 599)) as failure_count,\n    failure_count / count as failure_rate\n    FROM spans_experimental_starfish\n    WHERE module = 'http'\n    AND domain != ''\n    ${start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    GROUP BY domain, interval\n    ORDER BY domain, interval asc\n `;\n};\n\nexport const getHostListEventView = ({datetime}) => {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['domain'],\n    yAxis: ['p99(span.self_time)', 'count()'],\n    query: 'module:http',\n    topEvents: '10',\n    start: datetime.start,\n    end: datetime.end,\n    range: datetime.period,\n    dataset: DiscoverDatasets.SPANS_INDEXED,\n    projects: [1],\n    version: 2,\n  });\n};\n\nexport const getEndpointListQuery = ({domain, action, datetime, transaction}) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  return `SELECT\n    description,\n    group_id,\n    domain,\n    action,\n    quantile(0.5)(exclusive_time) AS \"p50(span.self_time)\",\n    quantile(0.95)(exclusive_time) AS \"p95(span.self_time)\",\n    sum(exclusive_time) AS \"sum(span.self_time)\",\n    uniq(user) AS \"count_unique(user)\", uniq(transaction) AS \"count_unique(transaction)\",\n    count() AS count,\n    countIf(greaterOrEquals(status, 400) AND lessOrEquals(status, 599)) AS failure_count,\n    failure_count / count AS failure_rate\n    FROM spans_experimental_starfish\n    WHERE module = 'http'\n    ${domain ? `AND domain = '${domain}'` : ''}\n    ${action ? `AND action = '${action}'` : ''}\n    ${transaction ? `AND transaction = '${transaction}'` : ''}\n    ${start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    GROUP BY description, domain, action, group_id\n    ORDER BY count DESC\n    LIMIT 10\n  `;\n};\n\nexport const getEndpointListEventView = ({domain, action, datetime, transaction}) => {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: [\n      'description',\n      'group_id',\n      'domain',\n      'action',\n      'p50(span.self_time)',\n      'p95(span.self_time)',\n      'sum(span.self_time)',\n      'count()',\n      'count_unique(user)',\n      'count_unique(transaction)',\n    ],\n    orderby: '-count',\n    query: `module:http ${domain ? `domain:${domain}` : ''} ${\n      action ? `action:${action}` : ''\n    } ${transaction ? `transaction:${transaction}` : ''}`,\n    start: datetime.start,\n    end: datetime.end,\n    range: datetime.period,\n    dataset: DiscoverDatasets.SPANS_INDEXED,\n    projects: [1],\n    version: 2,\n  });\n};\n\nexport const getEndpointDomainsQuery = ({datetime}) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  return `SELECT domain, count(),\n    sum(exclusive_time) as \"sum(span.self_time)\",\n    max(exclusive_time) as \"p100(span.self_time)\",\n    quantile(0.99)(exclusive_time) as \"p99(span.self_time)\",\n    quantile(0.95)(exclusive_time) as \"p95(span.self_time)\",\n    quantile(0.50)(exclusive_time) as \"p50(span.self_time)\"\n    FROM spans_experimental_starfish\n    WHERE module = 'http'\n    ${start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    GROUP BY domain\n    ORDER BY count() DESC\n  `;\n};\n\nexport const getEndpointDomainsEventView = ({datetime}) => {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: [\n      'domain',\n      'count()',\n      'sum(span.self_time)',\n      'p100(span.self_time)',\n      'p99(span.self_time)',\n      'p95(span.self_time)',\n      'p50(span.self_time)',\n    ],\n    orderby: '-count',\n    query: 'module:http',\n    start: datetime.start,\n    end: datetime.end,\n    range: datetime.period,\n    dataset: DiscoverDatasets.SPANS_INDEXED,\n    projects: [1],\n    version: 2,\n  });\n};\n\nexport const getEndpointGraphQuery = ({datetime}) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  return `SELECT\n    toStartOfInterval(start_timestamp, INTERVAL 12 HOUR) as interval,\n    quantile(0.5)(exclusive_time) as \"p50(span.self_time)\",\n    quantile(0.75)(exclusive_time) as \"p75(span.self_time)\",\n    quantile(0.95)(exclusive_time) as \"p95(span.self_time)\",\n    quantile(0.99)(exclusive_time) as \"p99(span.self_time)\",\n    count() as \"count()\",\n    countIf(greaterOrEquals(status, 400) AND lessOrEquals(status, 599)) as \"failure_count()\",\n    \"failure_count()\" / \"count()\" as \"failure_rate()\"\n    FROM spans_experimental_starfish\n    WHERE module = 'http'\n    ${start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    GROUP BY interval\n    ORDER BY interval asc\n `;\n};\n\nexport const getEndpointGraphEventView = ({datetime}) => {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: [\n      'count()',\n      'p50(span.self_time)',\n      'p75(span.self_time)',\n      'p95(span.self_time)',\n      'p99(span.self_time)',\n    ],\n    yAxis: [\n      'count()',\n      'p50(span.self_time)',\n      'p75(span.self_time)',\n      'p95(span.self_time)',\n      'p99(span.self_time)',\n    ],\n    query: 'module:http',\n    start: datetime.start,\n    end: datetime.end,\n    range: datetime.period,\n    dataset: DiscoverDatasets.SPANS_INDEXED,\n    projects: [1],\n    version: 2,\n  });\n};\n\nexport const getEndpointDetailSeriesQuery = ({\n  description,\n  transactionName,\n  datetime,\n  groupId,\n}) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  return `SELECT\n     toStartOfInterval(start_timestamp, INTERVAL 12 HOUR) as interval,\n     quantile(0.5)(exclusive_time) as p50,\n     quantile(0.95)(exclusive_time) as p95,\n     count() as count,\n     countIf(greaterOrEquals(status, 400) AND lessOrEquals(status, 599)) as failure_count,\n     failure_count / count as failure_rate\n     FROM spans_experimental_starfish\n     WHERE module = 'http'\n     ${description ? `AND description = '${description}'` : ''}\n     ${groupId ? `AND group_id = '${groupId}'` : ''}\n     ${transactionName ? `AND transaction = '${transactionName}'` : ''}\n     ${\n       start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''\n     }\n     ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n     GROUP BY interval\n     ORDER BY interval asc\n  `;\n};\n\nexport const getEndpointDetailTableQuery = ({\n  description,\n  transactionName,\n  datetime,\n  groupId,\n}) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  return `\n    SELECT transaction,\n    count(),\n    quantile(0.5)(exclusive_time) as \"p50(span.self_time)\",\n    quantile(0.95)(exclusive_time) as \"p95(span.self_time)\",\n    countIf(greaterOrEquals(status, 400) AND lessOrEquals(status, 599)) as failure_count,\n    failure_count / count() as failure_rate,\n    sum(exclusive_time) as \"sum(span.self_time)\",\n    count(DISTINCT transaction_id) as \"count_unique(transaction)\"\n    FROM spans_experimental_starfish\n    WHERE module = 'http'\n    ${description ? `AND description = '${description}'` : ''}\n    ${groupId ? `AND group_id = '${groupId}'` : ''}\n    ${transactionName ? `AND transaction = '${transactionName}'` : ''}\n    ${start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    GROUP BY transaction\n    ORDER BY count() DESC\n    LIMIT 5\n `;\n};\n\nexport const getEndpointDetailTableEventView = ({\n  description,\n  transactionName,\n  datetime,\n  groupId,\n}) => {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: [\n      'transaction',\n      'count()',\n      'p50(span.self_time)',\n      'p95(span.self_time)',\n      'sum(span.self_time)',\n      'count_unique(transaction)',\n    ],\n    orderby: '-count',\n    query: `module:http ${description ? `description:${description}` : ''} ${\n      transactionName ? `transaction:${transactionName}` : ''\n    } ${groupId ? `group_id:${groupId}` : ''}`,\n    start: datetime.start,\n    end: datetime.end,\n    range: datetime.period,\n    dataset: DiscoverDatasets.SPANS_INDEXED,\n    projects: [1],\n    version: 2,\n  });\n};\n\nexport const getHostStatusBreakdownQuery = ({domain, datetime}) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  return `\n    SELECT count() as count, status\n    FROM spans_experimental_starfish\n    WHERE module = 'http'\n    AND domain = '${domain}'\n    ${start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    GROUP BY status\n    ORDER BY count DESC\n  `;\n};\n\nexport const getHostStatusBreakdownEventView = ({domain, datetime}) => {\n  return EventView.fromSavedQuery({\n    name: '',\n    fields: ['status', 'count()'],\n    orderby: '-count',\n    query: `module:http domain:${domain}`,\n    start: datetime.start,\n    end: datetime.end,\n    range: datetime.period,\n    dataset: DiscoverDatasets.SPANS_INDEXED,\n    projects: [1],\n    version: 2,\n  });\n};\n\nexport const getEndpointAggregatesQuery = ({datetime, transaction}) => {\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(datetime);\n  return `\n    SELECT\n    description,\n    toStartOfInterval(start_timestamp, INTERVAL 12 HOUR) as interval,\n    count() AS count,\n    quantile(0.5)(exclusive_time) as p50\n    FROM spans_experimental_starfish\n    WHERE module = 'http'\n    ${transaction ? `AND transaction = '${transaction}'` : ''}\n    ${start_timestamp ? `AND greaterOrEquals(start_timestamp, '${start_timestamp}')` : ''}\n    ${end_timestamp ? `AND lessOrEquals(start_timestamp, '${end_timestamp}')` : ''}\n    GROUP BY description, interval\n    ORDER BY interval asc\n  `;\n};\n\nconst ORDERBY = `\n  -power(10, floor(log10(count()))), -quantile(0.75)(exclusive_time)\n`;\n\nconst getTransactionsFromHostSubquery = (hostNames: string[], dateFilters: string) => {\n  const hostFilter = `domain IN ('${hostNames.join(`', '`)}')`;\n\n  return `\n  SELECT\n    transaction\n  FROM default.spans_experimental_starfish\n  WHERE\n    startsWith(span_operation, 'http')\n    AND ${hostFilter}\n    ${dateFilters}\n  GROUP BY transaction\n  ORDER BY ${ORDERBY}\n  LIMIT 5\n`;\n};\n\ntype TopTransactionData = {\n  interval: string;\n  transaction: string;\n  epm?: number;\n  p75?: number;\n};\n\nexport const useGetTransactionsForHosts = (\n  hostNames: string[],\n  interval: string\n): DefinedUseQueryResult<TopTransactionData[]> => {\n  const pageFilter = usePageFilters();\n  const location = useLocation();\n  const {startTime, endTime} = getDateFilters(pageFilter);\n  const dateFilters = getDateQueryFilter(startTime, endTime);\n\n  const transactionNameQuery = getTransactionsFromHostSubquery(hostNames, dateFilters);\n\n  const {start, end, period} = pageFilter.selection.datetime;\n\n  const {isLoading: isTopTransactionNamesLoading, data: topTransactionNamesData} =\n    useQuery<{transaction: string}[]>({\n      enabled: !!hostNames?.length,\n      queryKey: ['topTransactionNames', hostNames.join(','), start, end],\n      queryFn: () =>\n        fetch(`${HOST}/?query=${transactionNameQuery}`).then(res => res.json()),\n      retry: false,\n      refetchOnWindowFocus: false,\n      initialData: [],\n    });\n\n  const query: NewQuery = {\n    id: undefined,\n    name: '',\n    query: `transaction:[${topTransactionNamesData\n      ?.map(d => `\"${d.transaction}\"`)\n      .join(',')}]`,\n    projects: [1],\n    fields: ['transaction', 'epm()', 'p75(transaction.duration)'],\n    version: 1,\n    topEvents: '5',\n    start: start?.toString(),\n    end: end?.toString(),\n    dataset: DiscoverDatasets.METRICS_ENHANCED,\n    interval,\n    yAxis: ['epm()', 'p75(transaction.duration)'],\n  };\n\n  const eventView = EventView.fromNewQueryWithLocation(query, location);\n  eventView.statsPeriod = period ?? undefined;\n\n  const {\n    isLoading: isTopTransactionSeriesLoading,\n    data: topTransactionSeriesData,\n    ...rest\n  } = useWrappedDiscoverTimeseriesQuery({\n    eventView,\n    initialData: [],\n    enabled: !isTopTransactionNamesLoading && !!topTransactionNamesData.length,\n  });\n\n  return {\n    ...rest,\n    isLoading: isTopTransactionSeriesLoading,\n    data: topTransactionSeriesData,\n  } as DefinedUseQueryResult<TopTransactionData[]>;\n};\n"],"names":["COLUMN_ORDER","key","name","width","COL_WIDTH_UNDEFINED","EndpointTable","_ref","location","onSelect","filterOptions","columns","isLoading","areEndpointsLoading","data","endpointsData","useSpansQuery","queryString","getEndpointListQuery","eventView","getEndpointListEventView","initialData","areEndpointAggregatesLoading","endpointsThroughputData","useQuery","queryKey","queryFn","fetch","HOST","getEndpointAggregatesQuery","then","res","json","retry","refetchOnWindowFocus","aggregatesGroupedByURL","forEach","_ref2","description","interval","count","p50","push","combinedEndpointData","map","url","throughputSeries","seriesName","_ref3","value","p50Series","_ref4","zeroFilledThroughput","zeroFillSeries","moment","zeroFilledP50","throughput","p50_trend","_jsx","GridEditable","columnOrder","columnSortBy","grid","renderHeadCell","renderBodyCell","column","row","TextAlignLeft","children","OverflowEllipsisTextContainer","toString","match","includes","TextAlignRight","Link","onClick","to","Sparkline","color","CHART_PALETTE","series","undefined","node","Duration","seconds","fixedDigits","abbreviation","displayName","_styled","target","styles","getHostListQuery","datetime","start_timestamp","end_timestamp","datetimeToClickhouseFilterTimestamps","domain","action","transaction","EventView","fields","orderby","query","start","end","range","period","dataset","DiscoverDatasets","projects","version","getEndpointDomainsQuery","_ref5","getEndpointDomainsEventView","_ref6","getEndpointGraphQuery","_ref7","getEndpointGraphEventView","_ref8","yAxis","getEndpointDetailSeriesQuery","_ref9","transactionName","groupId","getHostStatusBreakdownQuery","_ref12","getHostStatusBreakdownEventView","_ref13","_ref14","useGetTransactionsForHosts","hostNames","pageFilter","usePageFilters","useLocation","startTime","endTime","getDateFilters","transactionNameQuery","getTransactionsFromHostSubquery","dateFilters","join","getDateQueryFilter","selection","isTopTransactionNamesLoading","topTransactionNamesData","enabled","length","id","d","topEvents","statsPeriod","isTopTransactionSeriesLoading","topTransactionSeriesData","rest","useWrappedDiscoverTimeseriesQuery"],"sourceRoot":""}