{"version":3,"file":"chunks/app_utils_discover_discoverQuery_tsx-app_views_issueDetails_groupEvents_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/useCleanQueryParamsOnRouteLeave.tsx","webpack:///./app/views/issueDetails/allEventsTable.tsx","webpack:///./app/views/issueDetails/groupEvents.tsx"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n  useGenericDiscoverQuery,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\nexport type DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\nexport type DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"events\"\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport function useDiscoverQuery(props: Omit<DiscoverQueryComponentProps, 'children'>) {\n  const afterFetch = (data, _) => {\n    const {fields, ...otherMeta} = data.meta ?? {};\n    return {\n      ...data,\n      meta: {...fields, ...otherMeta},\n    };\n  };\n\n  return useGenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>({\n    route: 'events',\n    shouldRefetchData,\n    afterFetch,\n    ...props,\n  });\n}\n\nexport default DiscoverQuery;\n","import {useCallback, useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport type {Location} from 'history';\n\nimport {useLocation} from 'sentry/utils/useLocation';\n\ntype Opts = {\n  fieldsToClean: string[];\n};\n\nexport function handleRouteLeave<Q extends object>({\n  fieldsToClean,\n  newLocation,\n  oldPathname,\n}: {\n  fieldsToClean: string[];\n  newLocation: Location<Q>;\n  oldPathname: string;\n}) {\n  const hasSomeValues = fieldsToClean.some(\n    field => newLocation.query[field] !== undefined\n  );\n\n  if (newLocation.pathname === oldPathname || !hasSomeValues) {\n    return;\n  }\n\n  // Removes fields from the URL on route leave so that the parameters will\n  // not interfere with other pages\n  const query = fieldsToClean.reduce(\n    (newQuery, field) => {\n      newQuery[field] = undefined;\n      return newQuery;\n    },\n    {...newLocation.query}\n  );\n\n  browserHistory.replace({\n    pathname: newLocation.pathname,\n    query,\n  });\n}\n\nfunction useCleanQueryParamsOnRouteLeave({fieldsToClean}: Opts) {\n  const location = useLocation();\n\n  const onRouteLeave = useCallback(\n    newLocation => {\n      handleRouteLeave({\n        fieldsToClean,\n        newLocation,\n        oldPathname: location.pathname,\n      });\n    },\n    [location.pathname, fieldsToClean]\n  );\n\n  useEffect(() => {\n    return browserHistory.listen(onRouteLeave);\n  }, [onRouteLeave]);\n}\n\nexport default useCleanQueryParamsOnRouteLeave;\n","import {useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport LoadingError from 'sentry/components/loadingError';\nimport {\n  PlatformCategory,\n  PlatformKey,\n  profiling as PROFILING_PLATFORMS,\n} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {EventTransaction, Group, IssueCategory, Organization} from 'sentry/types';\nimport EventView, {decodeSorts} from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {getConfigForIssueType} from 'sentry/utils/issueTypeConfig';\nimport {platformToCategory} from 'sentry/utils/platform';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport EventsTable from 'sentry/views/performance/transactionSummary/transactionEvents/eventsTable';\n\nexport interface Props {\n  group: Group;\n  issueId: string;\n  location: Location;\n  organization: Organization;\n  excludedTags?: string[];\n}\n\nconst makeGroupPreviewRequestUrl = ({groupId}: {groupId: string}) => {\n  return `/issues/${groupId}/events/latest/`;\n};\n\nfunction AllEventsTable(props: Props) {\n  const {location, organization, issueId, excludedTags, group} = props;\n  const config = getConfigForIssueType(props.group);\n  const [error, setError] = useState<string>('');\n  const routes = useRoutes();\n  const {fields, columnTitles} = getColumns(group, organization);\n\n  const endpointUrl = makeGroupPreviewRequestUrl({\n    groupId: group.id,\n  });\n\n  const queryEnabled = group.issueCategory === IssueCategory.PERFORMANCE;\n  const {data, isLoading, isLoadingError} = useApiQuery<EventTransaction>([endpointUrl], {\n    staleTime: 60000,\n    enabled: queryEnabled,\n  });\n\n  // TODO: this is a temporary way to check whether\n  // perf issue is backed by occurrences or transactions\n  // Once migration to the issue platform is complete a call to /latest should be removed\n  const groupIsOccurrenceBacked = !!data?.occurrence;\n\n  const eventView: EventView = EventView.fromLocation(props.location);\n  if (\n    config.usesIssuePlatform ||\n    (group.issueCategory === IssueCategory.PERFORMANCE && groupIsOccurrenceBacked)\n  ) {\n    eventView.dataset = DiscoverDatasets.ISSUE_PLATFORM;\n  }\n  eventView.fields = fields.map(fieldName => ({field: fieldName}));\n\n  eventView.sorts = decodeSorts(location).filter(sort => fields.includes(sort.field));\n\n  useEffect(() => {\n    setError('');\n  }, [eventView.query]);\n\n  if (!eventView.sorts.length) {\n    eventView.sorts = [{field: 'timestamp', kind: 'desc'}];\n  }\n\n  const idQuery =\n    group.issueCategory === IssueCategory.PERFORMANCE && !groupIsOccurrenceBacked\n      ? `performance.issue_ids:${issueId} event.type:transaction`\n      : `issue.id:${issueId}`;\n  eventView.project = [parseInt(group.project.id, 10)];\n  eventView.query = `${idQuery} ${props.location.query.query || ''}`;\n  eventView.statsPeriod = '90d';\n\n  if (error || isLoadingError) {\n    return (\n      <LoadingError message={error || isLoadingError} onRetry={() => setError('')} />\n    );\n  }\n\n  return (\n    <EventsTable\n      eventView={eventView}\n      location={location}\n      issueId={issueId}\n      organization={organization}\n      routes={routes}\n      excludedTags={excludedTags}\n      projectSlug={group.project.slug}\n      customColumns={['minidump']}\n      setError={(msg: string | undefined) => setError(msg ?? '')}\n      transactionName=\"\"\n      columnTitles={columnTitles.slice()}\n      referrer=\"api.issues.issue_events\"\n      isEventLoading={queryEnabled ? isLoading : false}\n    />\n  );\n}\n\ntype ColumnInfo = {columnTitles: string[]; fields: string[]};\n\nconst getColumns = (group: Group, organization: Organization): ColumnInfo => {\n  const isPerfIssue = group.issueCategory === IssueCategory.PERFORMANCE;\n  const isReplayEnabled = organization.features.includes('session-replay');\n\n  // profiles only exist on transactions, so this only works with\n  // performance issues, and not errors\n  const isProfilingEnabled = isPerfIssue && organization.features.includes('profiling');\n\n  const {fields: platformSpecificFields, columnTitles: platformSpecificColumnTitles} =\n    getPlatformColumns(group.project.platform ?? group.platform, {\n      isProfilingEnabled,\n      isReplayEnabled,\n    });\n\n  const fields: string[] = [\n    'id',\n    'transaction',\n    'title',\n    'release',\n    'environment',\n    'user.display',\n    'device',\n    'os',\n    ...platformSpecificFields,\n    ...(isPerfIssue ? ['transaction.duration'] : []),\n    'timestamp',\n  ];\n\n  const columnTitles: string[] = [\n    t('event id'),\n    t('transaction'),\n    t('title'),\n    t('release'),\n    t('environment'),\n    t('user'),\n    t('device'),\n    t('os'),\n    ...platformSpecificColumnTitles,\n    ...(isPerfIssue ? [t('total duration')] : []),\n    t('timestamp'),\n    t('minidump'),\n  ];\n\n  return {\n    fields,\n    columnTitles,\n  };\n};\n\nconst getPlatformColumns = (\n  platform: PlatformKey | undefined,\n  options: {isProfilingEnabled: boolean; isReplayEnabled: boolean}\n): ColumnInfo => {\n  const backendServerlessColumnInfo = {\n    fields: ['url', 'runtime'],\n    columnTitles: [t('url'), t('runtime')],\n  };\n\n  const categoryToColumnMap: Record<PlatformCategory, ColumnInfo> = {\n    [PlatformCategory.BACKEND]: backendServerlessColumnInfo,\n    [PlatformCategory.SERVERLESS]: backendServerlessColumnInfo,\n    [PlatformCategory.FRONTEND]: {\n      fields: ['url', 'browser'],\n      columnTitles: [t('url'), t('browser')],\n    },\n    [PlatformCategory.MOBILE]: {\n      fields: ['url'],\n      columnTitles: [t('url')],\n    },\n    [PlatformCategory.DESKTOP]: {\n      fields: [],\n      columnTitles: [],\n    },\n    [PlatformCategory.OTHER]: {\n      fields: [],\n      columnTitles: [],\n    },\n  };\n\n  const platformCategory = platformToCategory(platform);\n  const platformColumns = categoryToColumnMap[platformCategory];\n\n  if (options.isReplayEnabled) {\n    platformColumns.fields.push('replayId');\n    platformColumns.columnTitles.push(t('replay'));\n  }\n\n  if (options.isProfilingEnabled && platform && PROFILING_PLATFORMS.includes(platform)) {\n    platformColumns.columnTitles.push(t('profile'));\n    platformColumns.fields.push('profile.id');\n  }\n\n  return platformColumns;\n};\n\nexport default AllEventsTable;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport EventSearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {space} from 'sentry/styles/space';\nimport {Group, Organization} from 'sentry/types';\nimport {handleRouteLeave} from 'sentry/utils/useCleanQueryParamsOnRouteLeave';\nimport withApi from 'sentry/utils/withApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport AllEventsTable from './allEventsTable';\n\ntype Props = {\n  api: Client;\n  group: Group;\n  organization: Organization;\n} & RouteComponentProps<{groupId: string}, {}>;\n\ninterface State {\n  query: string;\n}\n\nconst excludedTags = [\n  'environment',\n  'issue',\n  'issue.id',\n  'performance.issue_ids',\n  'transaction.op',\n  'transaction.status',\n];\n\nclass GroupEvents extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const queryParams = this.props.location.query;\n\n    this.state = {\n      query: queryParams.query || '',\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState({\n        query: queryParams.query,\n      });\n    }\n  }\n\n  UNSAFE_componentDidMount() {\n    this._unsubscribeHandleRouteLeave = browserHistory.listen(newLocation =>\n      handleRouteLeave({\n        fieldsToClean: ['cursor'],\n        newLocation,\n        oldPathname: this.props.location.pathname,\n      })\n    );\n  }\n\n  UNSAFE_componentWillUnmount() {\n    this._unsubscribeHandleRouteLeave?.();\n  }\n\n  _unsubscribeHandleRouteLeave: undefined | ReturnType<typeof browserHistory.listen>;\n\n  handleSearch = (query: string) => {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {organization} = this.props;\n    const {groupId} = this.props.params;\n\n    browserHistory.push(\n      normalizeUrl({\n        pathname: `/organizations/${organization.slug}/issues/${groupId}/events/`,\n        query: targetQueryParams,\n      })\n    );\n  };\n\n  render() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <AllEventsFilters>\n            <EventSearchBar\n              organization={this.props.organization}\n              defaultQuery=\"\"\n              onSearch={this.handleSearch}\n              excludedTags={excludedTags}\n              query={this.state.query}\n              hasRecentSearches={false}\n            />\n          </AllEventsFilters>\n          <AllEventsTable\n            issueId={this.props.group.id}\n            location={this.props.location}\n            organization={this.props.organization}\n            group={this.props.group}\n            excludedTags={excludedTags}\n          />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nconst AllEventsFilters = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nexport {GroupEvents};\n\nexport default withOrganization(withApi(GroupEvents));\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","_jsx","GenericDiscoverQuery","route","afterFetch","data","_","fields","otherMeta","meta","useDiscoverQuery","useGenericDiscoverQuery","displayName","handleRouteLeave","_ref","fieldsToClean","newLocation","oldPathname","hasSomeValues","some","field","undefined","query","pathname","reduce","newQuery","browserHistory","_ref2","location","useLocation","onRouteLeave","useCallback","useEffect","AllEventsTable","organization","issueId","excludedTags","group","config","getConfigForIssueType","error","setError","useState","routes","useRoutes","columnTitles","getColumns","endpointUrl","groupId","makeGroupPreviewRequestUrl","id","queryEnabled","issueCategory","IssueCategory","isLoading","isLoadingError","useApiQuery","staleTime","enabled","groupIsOccurrenceBacked","occurrence","eventView","EventView","usesIssuePlatform","dataset","DiscoverDatasets","map","fieldName","sorts","decodeSorts","filter","sort","includes","length","kind","idQuery","project","parseInt","statsPeriod","LoadingError","message","onRetry","EventsTable","projectSlug","slug","customColumns","msg","slice","referrer","isEventLoading","isPerfIssue","isReplayEnabled","features","isProfilingEnabled","platformSpecificFields","platformSpecificColumnTitles","getPlatformColumns","platform","t","options","backendServerlessColumnInfo","platformColumns","PlatformCategory","platformToCategory","push","PROFILING_PLATFORMS","GroupEvents","Component","constructor","super","_defineProperty","targetQueryParams","this","params","normalizeUrl","queryParams","state","UNSAFE_componentWillReceiveProps","search","setState","UNSAFE_componentDidMount","_unsubscribeHandleRouteLeave","UNSAFE_componentWillUnmount","render","Layout","children","_jsxs","fullWidth","AllEventsFilters","EventSearchBar","defaultQuery","onSearch","handleSearch","hasRecentSearches","_styled","target","space","withOrganization","withApi"],"sourceRoot":""}