{"version":3,"file":"chunks/app_views_projectInstall_newProject_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/routeAnalytics/useRouteAnalyticsEventNames.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"sourcesContent":["import {useContext, useEffect} from 'react';\n\nimport {RouteAnalyticsContext} from 'sentry/views/routeAnalyticsContextProvider';\n\n/**\n * This hook provides custom analytics event names for route based analytics.\n * @param eventKey The key used to identify the event\n * @param eventName The English string used as the event name\n */\nexport default function useRouteAnalyticsEventNames(eventKey: string, eventName: string) {\n  const {setEventNames, previousUrl} = useContext(RouteAnalyticsContext);\n  useEffect(() => {\n    setEventNames(eventKey, eventName);\n  }, [setEventNames, eventKey, eventName, previousUrl]);\n}\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import {Fragment, useCallback, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport omit from 'lodash/omit';\nimport {PlatformIcon} from 'platformicons';\n\nimport {openCreateTeamModal, openModal} from 'sentry/actionCreators/modal';\nimport {Alert} from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport Input from 'sentry/components/input';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {SUPPORTED_LANGUAGES} from 'sentry/components/onboarding/frameworkSuggestionModal';\nimport PlatformPicker, {Platform} from 'sentry/components/platformPicker';\nimport {canCreateProject} from 'sentry/components/projects/utils';\nimport TeamSelector from 'sentry/components/teamSelector';\nimport {IconAdd} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {space} from 'sentry/styles/space';\nimport {OnboardingSelectedSDK, Team} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useRouteAnalyticsEventNames from 'sentry/utils/routeAnalytics/useRouteAnalyticsEventNames';\nimport slugify from 'sentry/utils/slugify';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useTeams} from 'sentry/utils/useTeams';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport IssueAlertOptions from 'sentry/views/projectInstall/issueAlertOptions';\n\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\nfunction CreateProject() {\n  const api = useApi();\n  const organization = useOrganization();\n\n  const accessTeams = useTeams().teams.filter((team: Team) => team.hasAccess);\n\n  useRouteAnalyticsEventNames(\n    'project_creation_page.viewed',\n    'Project Create: Creation page viewed'\n  );\n\n  const [projectName, setProjectName] = useState('');\n  const [platform, setPlatform] = useState<OnboardingSelectedSDK | undefined>(undefined);\n  const [team, setTeam] = useState(accessTeams?.[0]?.slug);\n\n  const [error, setError] = useState(false);\n  const [inFlight, setInFlight] = useState(false);\n\n  const [alertRuleConfig, setAlertRuleConfig] = useState<IssueAlertFragment | undefined>(\n    undefined\n  );\n\n  const frameworkSelectionEnabled = !!organization?.features.includes(\n    'onboarding-sdk-selection'\n  );\n\n  const createProject = useCallback(\n    async (selectedFramework?: OnboardingSelectedSDK) => {\n      const {slug} = organization;\n      const {\n        shouldCreateCustomRule,\n        name,\n        conditions,\n        actions,\n        actionMatch,\n        frequency,\n        defaultRules,\n      } = alertRuleConfig || {};\n\n      const selectedPlatform = selectedFramework?.key ?? platform?.key;\n\n      if (!selectedPlatform) {\n        return;\n      }\n\n      setInFlight(true);\n\n      try {\n        const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n          method: 'POST',\n          data: {\n            name: projectName,\n            platform: selectedPlatform,\n            default_rules: defaultRules ?? true,\n          },\n        });\n\n        let ruleId: string | undefined;\n        if (shouldCreateCustomRule) {\n          const ruleData = await api.requestPromise(\n            `/projects/${organization.slug}/${projectData.slug}/rules/`,\n            {\n              method: 'POST',\n              data: {\n                name,\n                conditions,\n                actions,\n                actionMatch,\n                frequency,\n              },\n            }\n          );\n          ruleId = ruleData.id;\n        }\n        trackAnalytics('project_creation_page.created', {\n          organization,\n          issue_alert: defaultRules\n            ? 'Default'\n            : shouldCreateCustomRule\n            ? 'Custom'\n            : 'No Rule',\n          project_id: projectData.id,\n          rule_id: ruleId || '',\n        });\n\n        ProjectsStore.onCreateSuccess(projectData, organization.slug);\n\n        browserHistory.push(\n          normalizeUrl(\n            `/${organization.slug}/${projectData.slug}/getting-started/${selectedPlatform}/`\n          )\n        );\n      } catch (err) {\n        setInFlight(false);\n        setError(err.responseJSON.detail);\n\n        // Only log this if the error is something other than:\n        // * The user not having access to create a project, or,\n        // * A project with that slug already exists\n        if (err.status !== 403 && err.status !== 409) {\n          Sentry.withScope(scope => {\n            scope.setExtra('err', err);\n            Sentry.captureMessage('Project creation failed');\n          });\n        }\n      }\n    },\n    [api, alertRuleConfig, organization, platform, projectName, team]\n  );\n\n  const handleProjectCreation = useCallback(async () => {\n    const selectedPlatform = platform;\n\n    if (!selectedPlatform) {\n      return;\n    }\n\n    if (\n      selectedPlatform.type !== 'language' ||\n      !Object.values(SUPPORTED_LANGUAGES).includes(\n        selectedPlatform.language as SUPPORTED_LANGUAGES\n      )\n    ) {\n      createProject();\n      return;\n    }\n\n    const {FrameworkSuggestionModal, modalCss} = await import(\n      'sentry/components/onboarding/frameworkSuggestionModal'\n    );\n\n    openModal(\n      deps => (\n        <FrameworkSuggestionModal\n          {...deps}\n          organization={organization}\n          selectedPlatform={selectedPlatform}\n          onConfigure={selectedFramework => {\n            createProject(selectedFramework);\n          }}\n          onSkip={createProject}\n        />\n      ),\n      {\n        modalCss,\n      }\n    );\n  }, [platform, createProject, organization]);\n\n  function handlePlatformChange(selectedPlatform: Platform | null) {\n    if (!selectedPlatform?.id) {\n      setPlatform(undefined);\n      setProjectName('');\n      return;\n    }\n\n    const userModifiedName = !!projectName && projectName !== platform?.key;\n    const newName = userModifiedName ? projectName : selectedPlatform.id;\n\n    setPlatform({\n      ...omit(selectedPlatform, 'id'),\n      key: selectedPlatform.id,\n    });\n\n    setProjectName(newName);\n  }\n\n  const {shouldCreateCustomRule, conditions} = alertRuleConfig || {};\n\n  const canSubmitForm =\n    !inFlight &&\n    team &&\n    canCreateProject(organization) &&\n    projectName !== '' &&\n    (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value));\n\n  const createProjectForm = (\n    <Fragment>\n      <Layout.Title withMargins>\n        {t('3. Name your project and assign it a team')}\n      </Layout.Title>\n      <CreateProjectForm\n        onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n          // Prevent the page from reloading\n          event.preventDefault();\n          frameworkSelectionEnabled ? handleProjectCreation() : createProject();\n        }}\n      >\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInputWrap>\n            <StyledPlatformIcon platform={platform?.key ?? 'other'} size={20} />\n            <ProjectNameInput\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('project-name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => setProjectName(slugify(e.target.value))}\n            />\n          </ProjectNameInputWrap>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <TeamSelector\n              name=\"select-team\"\n              aria-label={t('Select a Team')}\n              menuPlacement=\"auto\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => setTeam(choice.value)}\n              teamFilter={(filterTeam: Team) => filterTeam.hasAccess}\n            />\n            <Button\n              borderless\n              data-test-id=\"create-team\"\n              icon={<IconAdd isCircled />}\n              onClick={() =>\n                openCreateTeamModal({\n                  organization,\n                  onClose: ({slug}) => setTeam(slug),\n                })\n              }\n              title={t('Create a team')}\n              aria-label={t('Create a team')}\n            />\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            type=\"submit\"\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      {error && <Alert type=\"error\">{error}</Alert>}\n      <div data-test-id=\"onboarding-info\">\n        <Layout.Title withMargins>{t('Create a new project in 3 steps')}</Layout.Title>\n        <HelpText>\n          {tct(\n            'Set up a separate project for each part of your application (for example, your API server and frontend client), to quickly pinpoint which part of your application errors are coming from. [link: Read the docs].',\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/integrate-frontend/create-new-project/\" />\n              ),\n            }\n          )}\n        </HelpText>\n        <Layout.Title withMargins>{t('1. Choose your platform')}</Layout.Title>\n        <PlatformPicker\n          platform={platform?.key}\n          defaultCategory={platform?.category}\n          setPlatform={handlePlatformChange}\n          organization={organization}\n          showOther\n        />\n        <IssueAlertOptions onChange={updatedData => setAlertRuleConfig(updatedData)} />\n        {createProjectForm}\n      </div>\n    </Fragment>\n  );\n}\n\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px minmax(250px, max-content) max-content;\n  gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst ProjectNameInputWrap = styled('div')`\n  position: relative;\n`;\n\nconst ProjectNameInput = styled(Input)`\n  padding-left: calc(${p => p.theme.formPadding.md.paddingLeft}px * 1.5 + 20px);\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  position: absolute;\n  top: 50%;\n  left: ${p => p.theme.formPadding.md.paddingLeft}px;\n  transform: translateY(-50%);\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import styled from '@emotion/styled';\n\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {space} from 'sentry/styles/space';\n\nimport {CreateProject} from './createProject';\n\nfunction NewProject() {\n  return (\n    <SentryDocumentTitle>\n      <Container>\n        <div className=\"container\">\n          <Content>\n            <CreateProject />\n          </Content>\n        </div>\n      </Container>\n    </SentryDocumentTitle>\n  );\n}\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"names":["useRouteAnalyticsEventNames","eventKey","eventName","setEventNames","previousUrl","useContext","RouteAnalyticsContext","useEffect","slugify","str","normalize","toLowerCase","replace","CreateProject","api","useApi","organization","useOrganization","accessTeams","useTeams","teams","filter","team","hasAccess","projectName","setProjectName","useState","platform","setPlatform","undefined","setTeam","slug","error","setError","inFlight","setInFlight","alertRuleConfig","setAlertRuleConfig","frameworkSelectionEnabled","features","includes","createProject","useCallback","async","shouldCreateCustomRule","name","conditions","actions","actionMatch","frequency","defaultRules","selectedPlatform","selectedFramework","key","projectData","requestPromise","method","data","default_rules","ruleId","id","trackAnalytics","issue_alert","project_id","rule_id","ProjectsStore","browserHistory","normalizeUrl","err","responseJSON","detail","status","Sentry","scope","setExtra","handleProjectCreation","type","Object","values","SUPPORTED_LANGUAGES","language","FrameworkSuggestionModal","modalCss","openModal","deps","_jsx","onConfigure","onSkip","canSubmitForm","canCreateProject","every","condition","value","createProjectForm","_jsxs","Fragment","children","Layout","withMargins","t","CreateProjectForm","onSubmit","event","preventDefault","FormLabel","ProjectNameInputWrap","StyledPlatformIcon","size","ProjectNameInput","placeholder","autoComplete","onChange","e","target","TeamSelectInput","TeamSelector","menuPlacement","clearable","choice","teamFilter","filterTeam","Button","borderless","icon","IconAdd","isCircled","onClick","openCreateTeamModal","onClose","_ref","title","priority","disabled","Alert","HelpText","tct","link","ExternalLink","href","PlatformPicker","defaultCategory","category","newName","omit","showOther","IssueAlertOptions","updatedData","displayName","_styled","space","p","theme","background","fontSizeExtraLarge","styles","Input","formPadding","md","paddingLeft","PlatformIcon","subText","NewProject","SentryDocumentTitle","Container","className","Content"],"sourceRoot":""}