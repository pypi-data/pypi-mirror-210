{"version":3,"file":"chunks/app_components_modals_commandPalette_tsx-app_data_forms_accountEmails_tsx-app_utils_useRouter-f7d943.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/commandPalette.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/utils/useRouter.tsx","webpack:///./app/views/performance/trends/types.tsx","webpack:///./app/views/performance/trends/utils.tsx","webpack:///./app/views/performance/utils.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport {ClassNames, css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Input from 'sentry/components/input';\nimport {Search} from 'sentry/components/search';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {trackAnalytics} from 'sentry/utils/analytics';\n\nfunction CommandPalette({Body}: ModalRenderProps) {\n  const theme = useTheme();\n\n  useEffect(\n    () =>\n      void trackAnalytics('omnisearch.open', {\n        organization: null,\n      }),\n    []\n  );\n\n  return (\n    <Body>\n      <ClassNames>\n        {({css: injectedCss}) => (\n          <Search\n            entryPoint=\"command_palette\"\n            minSearch={1}\n            maxResults={10}\n            dropdownClassName={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n            renderInput={({getInputProps}) => (\n              <InputWrapper>\n                <StyledInput\n                  autoFocus\n                  {...getInputProps({\n                    type: 'text',\n                    placeholder: t('Search for projects, teams, settings, etc...'),\n                  })}\n                />\n              </InputWrapper>\n            )}\n          />\n        )}\n      </ClassNames>\n    </Body>\n  );\n}\n\nexport default CommandPalette;\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst StyledInput = styled(Input)`\n  width: 100%;\n  padding: ${space(1)};\n  border-radius: ${p => p.theme.modalBorderRadius};\n\n  outline: none;\n  border: none;\n  box-shadow: none;\n\n  :focus,\n  :active,\n  :hover {\n    outline: none;\n    border: none;\n    box-shadow: none;\n  }\n`;\n","import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: t('Add Secondary Emails'),\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: t('Additional Email'),\n        placeholder: t('e.g. secondary@example.com'),\n        help: t('Designate an alternative email for this account'),\n        saveOnBlur: false,\n        saveMessage: t('Add this new email address to your account?'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import {useRouteContext} from 'sentry/utils/useRouteContext';\n\nfunction useRouter() {\n  const route = useRouteContext();\n  return route.router;\n}\n\nexport default useRouter;\n","import moment from 'moment';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {EventsStatsData, Project} from 'sentry/types';\nimport EventView, {LocationQuery} from 'sentry/utils/discover/eventView';\n\nexport type TrendView = EventView & {\n  middle?: string;\n  orderby?: string;\n  trendFunction?: string;\n  trendType?: TrendChangeType;\n};\n\nexport type TrendsQuery = EventQuery &\n  LocationQuery & {\n    interval?: string;\n    middle?: string;\n    trendFunction?: string;\n    trendType?: TrendChangeType;\n  };\n\nexport type TrendFunction = {\n  alias: string;\n  field: TrendFunctionField;\n  label: string;\n  legendLabel: string;\n};\n\nexport type TrendParameter = {\n  column: string;\n  label: string;\n};\n\nexport enum TrendChangeType {\n  IMPROVED = 'improved',\n  REGRESSION = 'regression',\n}\n\nexport enum TrendFunctionField {\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  AVG = 'avg',\n}\n\nexport enum TrendColumnField {\n  DURATION = 'transaction.duration',\n  LCP = 'measurements.lcp',\n  FCP = 'measurements.fcp',\n  FID = 'measurements.fid',\n  CLS = 'measurements.cls',\n  SPANS_DB = 'spans.db',\n  SPANS_HTTP = 'spans.http',\n  SPANS_BROWSER = 'spans.browser',\n  SPANS_RESOURCE = 'spans.resource',\n}\n\nexport type TrendStat = {\n  data: EventsStatsData;\n  order: number;\n};\n\nexport type TrendsStats = {\n  [transaction: string]: TrendStat;\n};\n\nexport type TrendsTransaction = {\n  aggregate_range_1: number;\n  aggregate_range_2: number;\n  count: number;\n\n  project: string;\n  transaction: string;\n  trend_difference: number;\n  trend_percentage: number;\n  breakpoint?: number;\n  count_percentage?: number;\n  count_range_1?: number;\n  count_range_2?: number;\n};\n\nexport type TrendsDataEvents = {\n  data: TrendsTransaction[];\n  meta: any;\n};\n\nexport type TrendsData = {\n  events: TrendsDataEvents;\n  projects: Project[];\n  stats: TrendsStats;\n};\n\nexport type NormalizedTrendsTransaction = TrendsTransaction & {\n  received_at: Readonly<moment.Moment>;\n};\n","import {ASAP} from 'downsample/methods/ASAP';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  AggregationKeyWithAlias,\n  Field,\n  generateFieldAsString,\n  Sort,\n} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {platformToPerformanceType, PROJECT_PERFORMANCE_TYPE} from '../utils';\n\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendColumnField,\n  TrendFunction,\n  TrendFunctionField,\n  TrendParameter,\n  TrendsTransaction,\n  TrendView,\n} from './types';\n\nexport const DEFAULT_TRENDS_STATS_PERIOD = '14d';\nexport const DEFAULT_MAX_DURATION = '15min';\n\nexport const TRENDS_FUNCTIONS: TrendFunction[] = [\n  {\n    label: 'p50',\n    field: TrendFunctionField.P50,\n    alias: 'percentile_range',\n    legendLabel: 'p50',\n  },\n  {\n    label: 'p75',\n    field: TrendFunctionField.P75,\n    alias: 'percentile_range',\n    legendLabel: 'p75',\n  },\n  {\n    label: 'p95',\n    field: TrendFunctionField.P95,\n    alias: 'percentile_range',\n    legendLabel: 'p95',\n  },\n  {\n    label: 'p99',\n    field: TrendFunctionField.P99,\n    alias: 'percentile_range',\n    legendLabel: 'p99',\n  },\n  {\n    label: 'average',\n    field: TrendFunctionField.AVG,\n    alias: 'avg_range',\n    legendLabel: 'average',\n  },\n];\n\nexport const TRENDS_PARAMETERS: TrendParameter[] = [\n  {\n    label: 'Duration',\n    column: TrendColumnField.DURATION,\n  },\n  {\n    label: 'LCP',\n    column: TrendColumnField.LCP,\n  },\n  {\n    label: 'FCP',\n    column: TrendColumnField.FCP,\n  },\n  {\n    label: 'FID',\n    column: TrendColumnField.FID,\n  },\n  {\n    label: 'CLS',\n    column: TrendColumnField.CLS,\n  },\n  {\n    label: 'Spans (http)',\n    column: TrendColumnField.SPANS_HTTP,\n  },\n  {\n    label: 'Spans (db)',\n    column: TrendColumnField.SPANS_DB,\n  },\n  {\n    label: 'Spans (browser)',\n    column: TrendColumnField.SPANS_BROWSER,\n  },\n  {\n    label: 'Spans (resource)',\n    column: TrendColumnField.SPANS_RESOURCE,\n  },\n];\n\nexport const trendToColor = {\n  [TrendChangeType.IMPROVED]: {\n    lighter: theme.green200,\n    default: theme.green300,\n  },\n  [TrendChangeType.REGRESSION]: {\n    lighter: theme.red200,\n    default: theme.red300,\n  },\n};\n\nexport const trendSelectedQueryKeys = {\n  [TrendChangeType.IMPROVED]: 'improvedSelected',\n  [TrendChangeType.REGRESSION]: 'regressionSelected',\n};\n\nexport const trendUnselectedSeries = {\n  [TrendChangeType.IMPROVED]: 'improvedUnselectedSeries',\n  [TrendChangeType.REGRESSION]: 'regressionUnselectedSeries',\n};\n\nexport const trendCursorNames = {\n  [TrendChangeType.IMPROVED]: 'improvedCursor',\n  [TrendChangeType.REGRESSION]: 'regressionCursor',\n};\n\nexport function resetCursors() {\n  const cursors = {};\n  Object.values(trendCursorNames).forEach(cursor => (cursors[cursor] = undefined)); // Resets both cursors\n  return cursors;\n}\n\nexport function getCurrentTrendFunction(\n  location: Location,\n  _trendFunctionField?: TrendFunctionField\n): TrendFunction {\n  const trendFunctionField =\n    _trendFunctionField ?? decodeScalar(location?.query?.trendFunction);\n  const trendFunction = TRENDS_FUNCTIONS.find(({field}) => field === trendFunctionField);\n  return trendFunction || TRENDS_FUNCTIONS[0];\n}\n\nfunction getDefaultTrendParameter(\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const performanceType = platformToPerformanceType(projects, projectIds);\n  const trendParameter = performanceTypeToTrendParameterLabel(performanceType);\n\n  return trendParameter;\n}\n\nexport function getCurrentTrendParameter(\n  location: Location,\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const trendParameterLabel = decodeScalar(location?.query?.trendParameter);\n  const trendParameter = TRENDS_PARAMETERS.find(\n    ({label}) => label === trendParameterLabel\n  );\n\n  if (trendParameter) {\n    return trendParameter;\n  }\n\n  const defaultTrendParameter = getDefaultTrendParameter(projects, projectIds);\n  return defaultTrendParameter;\n}\n\nexport function performanceTypeToTrendParameterLabel(\n  performanceType: PROJECT_PERFORMANCE_TYPE\n): TrendParameter {\n  switch (performanceType) {\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND:\n      return {\n        label: 'LCP',\n        column: TrendColumnField.LCP,\n      };\n    case PROJECT_PERFORMANCE_TYPE.ANY:\n    case PROJECT_PERFORMANCE_TYPE.BACKEND:\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER:\n    default:\n      return {\n        label: 'Duration',\n        column: TrendColumnField.DURATION,\n      };\n  }\n}\n\nexport function generateTrendFunctionAsString(\n  trendFunction: TrendFunctionField,\n  trendParameter: string\n): string {\n  return generateFieldAsString({\n    kind: 'function',\n    function: [\n      trendFunction as AggregationKeyWithAlias,\n      trendParameter,\n      undefined,\n      undefined,\n    ],\n  });\n}\n\nexport function transformDeltaSpread(from: number, to: number) {\n  const fromSeconds = from / 1000;\n  const toSeconds = to / 1000;\n\n  const showDigits = from > 1000 || to > 1000 || from < 10 || to < 10; // Show digits consistently if either has them\n\n  return {fromSeconds, toSeconds, showDigits};\n}\n\nexport function getTrendProjectId(\n  trend: NormalizedTrendsTransaction,\n  projects?: Project[]\n): string | undefined {\n  if (!trend.project || !projects) {\n    return undefined;\n  }\n  const transactionProject = projects.find(project => project.slug === trend.project);\n  return transactionProject?.id;\n}\n\nexport function modifyTrendView(\n  trendView: TrendView,\n  location: Location,\n  trendsType: TrendChangeType,\n  projects: Project[],\n  organization: Organization,\n  isProjectOnly?: boolean\n) {\n  const trendFunction = getCurrentTrendFunction(location);\n  const trendParameter = getCurrentTrendParameter(location, projects, trendView.project);\n\n  const transactionField = isProjectOnly ? [] : ['transaction'];\n  const fields = [...transactionField, 'project'].map(field => ({\n    field,\n  })) as Field[];\n\n  const trendSort = {\n    field: 'trend_percentage()',\n    kind: 'asc',\n  } as Sort;\n\n  trendView.trendType = trendsType;\n  if (trendsType === TrendChangeType.REGRESSION) {\n    trendSort.kind = 'desc';\n  }\n\n  if (trendFunction && trendParameter) {\n    trendView.trendFunction = generateTrendFunctionAsString(\n      trendFunction.field,\n      trendParameter.column\n    );\n  }\n\n  if (!organization.features.includes('performance-new-trends')) {\n    trendView.query = getLimitTransactionItems(trendView.query);\n  } else {\n    const query = new MutableSearch(trendView.query);\n    // remove metrics-incompatible filters\n    if (query.hasFilter('transaction.duration')) {\n      query.removeFilter('transaction.duration');\n    }\n    trendView.query = query.formatString();\n  }\n\n  trendView.interval = getQueryInterval(location, trendView);\n\n  trendView.sorts = [trendSort];\n  trendView.fields = fields;\n}\n\nexport function modifyTrendsViewDefaultPeriod(eventView: EventView, location: Location) {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    eventView.statsPeriod = DEFAULT_TRENDS_STATS_PERIOD;\n  }\n  return eventView;\n}\n\nfunction getQueryInterval(location: Location, eventView: TrendView) {\n  const intervalFromQueryParam = decodeScalar(location?.query?.interval);\n  const {start, end, statsPeriod} = eventView;\n\n  const datetimeSelection = {\n    start: start || null,\n    end: end || null,\n    period: statsPeriod,\n  };\n\n  const intervalFromSmoothing = getInterval(datetimeSelection, 'medium');\n\n  return intervalFromQueryParam || intervalFromSmoothing;\n}\n\nexport function transformValueDelta(value: number, trendType: TrendChangeType) {\n  const absoluteValue = Math.abs(value);\n\n  const changeLabel =\n    trendType === TrendChangeType.REGRESSION ? t('slower') : t('faster');\n\n  const seconds = absoluteValue / 1000;\n\n  const fixedDigits = absoluteValue > 1000 || absoluteValue < 10 ? 1 : 0;\n\n  return {seconds, fixedDigits, changeLabel};\n}\n\n/**\n * This will normalize the trends transactions while the current trend function and current data are out of sync\n * To minimize extra renders with missing results.\n */\nexport function normalizeTrends(\n  data: Array<TrendsTransaction>\n): Array<NormalizedTrendsTransaction> {\n  const received_at = moment(); // Adding the received time for the transaction so calls to get baseline always line up with the transaction\n  return data.map(row => {\n    return {\n      ...row,\n      received_at,\n      transaction: row.transaction,\n    } as NormalizedTrendsTransaction;\n  });\n}\n\nexport function getSelectedQueryKey(trendChangeType: TrendChangeType) {\n  return trendSelectedQueryKeys[trendChangeType];\n}\n\nexport function getUnselectedSeries(trendChangeType: TrendChangeType) {\n  return trendUnselectedSeries[trendChangeType];\n}\n\nexport function movingAverage(data, index, size) {\n  return (\n    data\n      .slice(index - size, index)\n      .map(a => a.value)\n      .reduce((a, b) => a + b, 0) / size\n  );\n}\n\n/**\n * This function applies defaults for trend and count percentage, and adds the confidence limit to the query\n */\nfunction getLimitTransactionItems(query: string) {\n  const limitQuery = new MutableSearch(query);\n  if (!limitQuery.hasFilter('count_percentage()')) {\n    limitQuery.addFilterValues('count_percentage()', ['>0.25', '<4']);\n  }\n  if (!limitQuery.hasFilter('trend_percentage()')) {\n    limitQuery.addFilterValues('trend_percentage()', ['>0%']);\n  }\n  if (!limitQuery.hasFilter('confidence()')) {\n    limitQuery.addFilterValues('confidence()', ['>6']);\n  }\n  return limitQuery.formatString();\n}\n\nexport const smoothTrend = (data: [number, number][], resolution = 100) => {\n  return ASAP(data, resolution);\n};\n\nexport const replaceSeriesName = (seriesName: string) => {\n  return ['p50', 'p75'].find(aggregate => seriesName.includes(aggregate));\n};\n\nexport const replaceSmoothedSeriesName = (seriesName: string) => {\n  return `Smoothed ${['p50', 'p75'].find(aggregate => seriesName.includes(aggregate))}`;\n};\n\nexport function transformEventStatsSmoothed(data?: Series[], seriesName?: string) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = 0;\n  if (!data) {\n    return {\n      maxValue,\n      minValue,\n      smoothedResults: undefined,\n    };\n  }\n\n  const smoothedResults: Series[] = [];\n\n  for (const current of data) {\n    const currentData = current.data;\n    const resultData: SeriesDataUnit[] = [];\n\n    const smoothed = smoothTrend(\n      currentData.map(({name, value}) => [Number(name), value])\n    );\n\n    for (let i = 0; i < smoothed.length; i++) {\n      const point = smoothed[i] as any;\n      const value = point.y;\n      resultData.push({\n        name: point.x,\n        value,\n      });\n      if (!isNaN(value)) {\n        const rounded = Math.round(value);\n        minValue = Math.min(rounded, minValue);\n        maxValue = Math.max(rounded, maxValue);\n      }\n    }\n    smoothedResults.push({\n      seriesName: seriesName || current.seriesName || 'Current',\n      data: resultData,\n      lineStyle: current.lineStyle,\n      color: current.color,\n    });\n  }\n\n  return {\n    minValue,\n    maxValue,\n    smoothedResults,\n  };\n}\n\nexport function modifyTransactionNameTrendsQuery(trendView: TrendView) {\n  const query = new MutableSearch(trendView.query);\n  query.setFilterValues('tpm()', ['>0.01']);\n  trendView.query = query.formatString();\n}\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {backend, frontend, mobile} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {\n  NewQuery,\n  Organization,\n  OrganizationSummary,\n  PageFilters,\n  Project,\n  ReleaseProject,\n} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {statsPeriodToDays} from 'sentry/utils/dates';\nimport EventView, {EventData} from 'sentry/utils/discover/eventView';\nimport {TRACING_FIELDS} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\nimport getCurrentSentryReactTransaction from 'sentry/utils/getCurrentSentryReactTransaction';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport toArray from 'sentry/utils/toArray';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nimport {DEFAULT_MAX_DURATION} from './trends/utils';\n\nexport const QUERY_KEYS = [\n  'environment',\n  'project',\n  'query',\n  'start',\n  'end',\n  'statsPeriod',\n] as const;\n\nexport const UNPARAMETERIZED_TRANSACTION = '<< unparameterized >>'; // Represents 'other' transactions with high cardinality names that were dropped on the metrics dataset.\nconst UNPARAMETRIZED_TRANSACTION = '<< unparametrized >>'; // Old spelling. Can be deleted in the future when all data for this transaction name is gone.\nexport const EXCLUDE_METRICS_UNPARAM_CONDITIONS = `(!transaction:\"${UNPARAMETERIZED_TRANSACTION}\" AND !transaction:\"${UNPARAMETRIZED_TRANSACTION}\")`;\nconst SHOW_UNPARAM_BANNER = 'showUnparameterizedBanner';\n\nexport enum DiscoverQueryPageSource {\n  PERFORMANCE = 'performance',\n  DISCOVER = 'discover',\n}\n\nexport function createUnnamedTransactionsDiscoverTarget(props: {\n  location: Location;\n  organization: Organization;\n  source?: DiscoverQueryPageSource;\n}) {\n  const fields =\n    props.source === DiscoverQueryPageSource.DISCOVER\n      ? ['transaction', 'project', 'transaction.source', 'epm()']\n      : ['transaction', 'project', 'transaction.source', 'epm()', 'p50()', 'p95()'];\n\n  const query: NewQuery = {\n    id: undefined,\n    name:\n      props.source === DiscoverQueryPageSource.DISCOVER\n        ? t('Unparameterized Transactions')\n        : t('Performance - Unparameterized Transactions'),\n    query: 'event.type:transaction transaction.source:\"url\"',\n    projects: [],\n    fields,\n    version: 2,\n  };\n\n  const discoverEventView = EventView.fromNewQueryWithLocation(\n    query,\n    props.location\n  ).withSorts([{field: 'epm', kind: 'desc'}]);\n  const target = discoverEventView.getResultsViewUrlTarget(props.organization.slug);\n  target.query[SHOW_UNPARAM_BANNER] = 'true';\n  return target;\n}\n\n/**\n * Performance type can used to determine a default view or which specific field should be used by default on pages\n * where we don't want to wait for transaction data to return to determine how to display aspects of a page.\n */\nexport enum PROJECT_PERFORMANCE_TYPE {\n  ANY = 'any', // Fallback to transaction duration\n  FRONTEND = 'frontend',\n  BACKEND = 'backend',\n  FRONTEND_OTHER = 'frontend_other',\n  MOBILE = 'mobile',\n}\n\n// The native SDK is equally used on clients and end-devices as on\n// backend, the default view should be \"All Transactions\".\nconst FRONTEND_PLATFORMS: string[] = frontend.filter(\n  platform =>\n    // Next, Remix and Sveltekit habe both, frontend and backend transactions.\n    !['javascript-nextjs', 'javascript-remix', 'javascript-sveltekit'].includes(platform)\n);\nconst BACKEND_PLATFORMS: string[] = backend.filter(platform => platform !== 'native');\nconst MOBILE_PLATFORMS: string[] = [...mobile];\n\nexport function platformToPerformanceType(\n  projects: (Project | ReleaseProject)[],\n  projectIds: readonly number[]\n) {\n  if (projectIds.length === 0 || projectIds[0] === ALL_ACCESS_PROJECTS) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  const selectedProjects = projects.filter(p =>\n    projectIds.includes(parseInt(`${p.id}`, 10))\n  );\n\n  if (selectedProjects.length === 0 || selectedProjects.some(p => !p.platform)) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  const projectPerformanceTypes = new Set<PROJECT_PERFORMANCE_TYPE>();\n\n  selectedProjects.forEach(project => {\n    if (FRONTEND_PLATFORMS.includes(project.platform ?? '')) {\n      projectPerformanceTypes.add(PROJECT_PERFORMANCE_TYPE.FRONTEND);\n    }\n    if (BACKEND_PLATFORMS.includes(project.platform ?? '')) {\n      projectPerformanceTypes.add(PROJECT_PERFORMANCE_TYPE.BACKEND);\n    }\n    if (MOBILE_PLATFORMS.includes(project.platform ?? '')) {\n      projectPerformanceTypes.add(PROJECT_PERFORMANCE_TYPE.MOBILE);\n    }\n  });\n\n  const uniquePerformanceTypeCount = projectPerformanceTypes.size;\n\n  if (!uniquePerformanceTypeCount || uniquePerformanceTypeCount > 1) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n  const [platformType] = projectPerformanceTypes;\n  return platformType;\n}\n\n/**\n * Used for transaction summary to determine appropriate columns on a page, since there is no display field set for the page.\n */\nexport function platformAndConditionsToPerformanceType(\n  projects: Project[],\n  eventView: EventView\n) {\n  const performanceType = platformToPerformanceType(projects, eventView.project);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    const conditions = new MutableSearch(eventView.query);\n    const ops = conditions.getFilterValues('!transaction.op');\n    if (ops.some(op => op === 'pageload')) {\n      return PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER;\n    }\n  }\n\n  return performanceType;\n}\n\n/**\n * Used for transaction summary to check the view itself, since it can have conditions which would exclude it from having vitals aside from platform.\n */\nexport function isSummaryViewFrontendPageLoad(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n    PROJECT_PERFORMANCE_TYPE.FRONTEND\n  );\n}\n\nexport function isSummaryViewFrontend(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND ||\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER\n  );\n}\n\nexport function getPerformanceLandingUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/`;\n}\n\nexport function getPerformanceTrendsUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/trends/`;\n}\n\nexport function getTransactionSearchQuery(location: Location, query: string = '') {\n  return decodeScalar(location.query.query, query).trim();\n}\n\nexport function handleTrendsClick({\n  location,\n  organization,\n  projectPlatforms,\n}: {\n  location: Location;\n  organization: Organization;\n  projectPlatforms: string;\n}) {\n  trackAnalytics('performance_views.change_view', {\n    organization,\n    view_name: 'TRENDS',\n    project_platforms: projectPlatforms,\n  });\n\n  const target = trendsTargetRoute({location, organization});\n\n  browserHistory.push(normalizeUrl(target));\n}\n\nexport function trendsTargetRoute({\n  location,\n  organization,\n  initialConditions,\n  additionalQuery,\n}: {\n  location: Location;\n  organization: Organization;\n  additionalQuery?: {[x: string]: string};\n  initialConditions?: MutableSearch;\n}) {\n  const newQuery = {\n    ...location.query,\n    ...additionalQuery,\n  };\n\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  const modifiedConditions = initialConditions ?? new MutableSearch([]);\n\n  if (conditions.hasFilter('tpm()')) {\n    modifiedConditions.setFilterValues('tpm()', conditions.getFilterValues('tpm()'));\n  } else {\n    modifiedConditions.setFilterValues('tpm()', ['>0.01']);\n  }\n  // Metrics don't support duration filters\n  if (!organization.features.includes('performance-new-trends')) {\n    if (conditions.hasFilter('transaction.duration')) {\n      modifiedConditions.setFilterValues(\n        'transaction.duration',\n        conditions.getFilterValues('transaction.duration')\n      );\n    } else {\n      modifiedConditions.setFilterValues('transaction.duration', [\n        '>0',\n        `<${DEFAULT_MAX_DURATION}`,\n      ]);\n    }\n  }\n  newQuery.query = modifiedConditions.formatString();\n\n  return {pathname: getPerformanceTrendsUrl(organization), query: {...newQuery}};\n}\n\nexport function removeTracingKeysFromSearch(\n  currentFilter: MutableSearch,\n  options: {excludeTagKeys: Set<string>} = {\n    excludeTagKeys: new Set([\n      // event type can be \"transaction\" but we're searching for issues\n      'event.type',\n      // the project is already determined by the transaction,\n      // and issue search does not support the project filter\n      'project',\n    ]),\n  }\n) {\n  currentFilter.getFilterKeys().forEach(tagKey => {\n    const searchKey = tagKey.startsWith('!') ? tagKey.substring(1) : tagKey;\n    // Remove aggregates and transaction event fields\n    if (\n      // aggregates\n      searchKey.match(/\\w+\\(.*\\)/) ||\n      // transaction event fields\n      TRACING_FIELDS.includes(searchKey) ||\n      // tags that we don't want to pass to pass to issue search\n      options.excludeTagKeys.has(searchKey)\n    ) {\n      currentFilter.removeFilter(tagKey);\n    }\n  });\n\n  return currentFilter;\n}\n\nexport function addRoutePerformanceContext(selection: PageFilters) {\n  const transaction = getCurrentSentryReactTransaction();\n  const days = statsPeriodToDays(\n    selection.datetime.period,\n    selection.datetime.start,\n    selection.datetime.end\n  );\n  const oneDay = 86400;\n  const seconds = Math.floor(days * oneDay);\n\n  transaction?.setTag('query.period', seconds.toString());\n  let groupedPeriod = '>30d';\n  if (seconds <= oneDay) {\n    groupedPeriod = '<=1d';\n  } else if (seconds <= oneDay * 7) {\n    groupedPeriod = '<=7d';\n  } else if (seconds <= oneDay * 14) {\n    groupedPeriod = '<=14d';\n  } else if (seconds <= oneDay * 30) {\n    groupedPeriod = '<=30d';\n  }\n  transaction?.setTag('query.period.grouped', groupedPeriod);\n}\n\nexport function getTransactionName(location: Location): string | undefined {\n  const {transaction} = location.query;\n\n  return decodeScalar(transaction);\n}\n\nexport function getPerformanceDuration(milliseconds: number) {\n  return getDuration(milliseconds / 1000, milliseconds > 1000 ? 2 : 0, true);\n}\n\nexport function areMultipleProjectsSelected(eventView: EventView) {\n  if (!eventView.project.length) {\n    return true; // My projects\n  }\n  if (eventView.project.length === 1 && eventView.project[0] === ALL_ACCESS_PROJECTS) {\n    return true; // All projects\n  }\n  return false;\n}\n\nexport function getSelectedProjectPlatformsArray(\n  location: Location,\n  projects: Project[]\n) {\n  const projectQuery = location.query.project;\n  const selectedProjectIdSet = new Set(toArray(projectQuery));\n\n  const selectedProjectPlatforms = projects.reduce((acc: string[], project) => {\n    if (selectedProjectIdSet.has(project.id)) {\n      acc.push(project.platform ?? 'undefined');\n    }\n\n    return acc;\n  }, []);\n\n  return selectedProjectPlatforms;\n}\n\nexport function getSelectedProjectPlatforms(location: Location, projects: Project[]) {\n  const selectedProjectPlatforms = getSelectedProjectPlatformsArray(location, projects);\n  return selectedProjectPlatforms.join(', ');\n}\n\nexport function getProjectID(\n  eventData: EventData,\n  projects: Project[]\n): string | undefined {\n  const projectSlug = (eventData?.project as string) || undefined;\n\n  if (typeof projectSlug === undefined) {\n    return undefined;\n  }\n\n  return projects.find(currentProject => currentProject.slug === projectSlug)?.id;\n}\n"],"names":["CommandPalette","_ref","Body","theme","useTheme","useEffect","trackAnalytics","organization","_jsx","children","ClassNames","_ref2","css","injectedCss","Search","entryPoint","minSearch","maxResults","dropdownClassName","border","renderInput","_ref3","getInputProps","InputWrapper","StyledInput","autoFocus","type","placeholder","t","displayName","modalCss","name","styles","_styled","target","space","Input","p","modalBorderRadius","route","title","fields","label","help","saveOnBlur","saveMessage","useRouteContext","router","TrendChangeType","TrendFunctionField","TrendColumnField","DEFAULT_TRENDS_STATS_PERIOD","DEFAULT_MAX_DURATION","TRENDS_FUNCTIONS","field","alias","legendLabel","TRENDS_PARAMETERS","column","trendToColor","lighter","default","trendSelectedQueryKeys","trendUnselectedSeries","trendCursorNames","resetCursors","cursors","Object","values","forEach","cursor","undefined","getCurrentTrendFunction","location","_trendFunctionField","trendFunctionField","decodeScalar","query","trendFunction","find","getCurrentTrendParameter","projects","projectIds","trendParameterLabel","trendParameter","performanceType","PROJECT_PERFORMANCE_TYPE","performanceTypeToTrendParameterLabel","platformToPerformanceType","getDefaultTrendParameter","generateTrendFunctionAsString","generateFieldAsString","kind","function","transformDeltaSpread","from","to","fromSeconds","toSeconds","showDigits","getTrendProjectId","trend","project","transactionProject","slug","id","modifyTrendView","trendView","trendsType","isProjectOnly","map","trendSort","trendType","features","includes","MutableSearch","hasFilter","removeFilter","formatString","limitQuery","addFilterValues","getLimitTransactionItems","interval","eventView","intervalFromQueryParam","start","end","statsPeriod","datetimeSelection","period","intervalFromSmoothing","getInterval","getQueryInterval","sorts","modifyTrendsViewDefaultPeriod","hasStartAndEnd","transformValueDelta","value","absoluteValue","Math","abs","seconds","fixedDigits","changeLabel","normalizeTrends","data","received_at","moment","row","transaction","getSelectedQueryKey","trendChangeType","getUnselectedSeries","smoothTrend","resolution","arguments","length","ASAP","replaceSeriesName","seriesName","aggregate","transformEventStatsSmoothed","minValue","Number","MAX_SAFE_INTEGER","maxValue","smoothedResults","current","currentData","resultData","smoothed","i","point","y","push","x","isNaN","rounded","round","min","max","lineStyle","color","modifyTransactionNameTrendsQuery","setFilterValues","QUERY_KEYS","UNPARAMETERIZED_TRANSACTION","SHOW_UNPARAM_BANNER","DiscoverQueryPageSource","createUnnamedTransactionsDiscoverTarget","props","source","DISCOVER","version","EventView","withSorts","getResultsViewUrlTarget","FRONTEND_PLATFORMS","frontend","platform","BACKEND_PLATFORMS","backend","MOBILE_PLATFORMS","mobile","ALL_ACCESS_PROJECTS","ANY","selectedProjects","filter","parseInt","some","projectPerformanceTypes","Set","add","FRONTEND","BACKEND","MOBILE","uniquePerformanceTypeCount","size","platformType","platformAndConditionsToPerformanceType","getFilterValues","op","FRONTEND_OTHER","isSummaryViewFrontendPageLoad","isSummaryViewFrontend","getPerformanceLandingUrl","getPerformanceTrendsUrl","getTransactionSearchQuery","trim","handleTrendsClick","projectPlatforms","view_name","project_platforms","trendsTargetRoute","browserHistory","normalizeUrl","initialConditions","additionalQuery","newQuery","conditions","modifiedConditions","pathname","removeTracingKeysFromSearch","currentFilter","options","excludeTagKeys","getFilterKeys","tagKey","searchKey","startsWith","substring","match","TRACING_FIELDS","has","addRoutePerformanceContext","selection","getCurrentSentryReactTransaction","days","statsPeriodToDays","datetime","floor","setTag","toString","groupedPeriod","oneDay","getTransactionName","getPerformanceDuration","milliseconds","getDuration","areMultipleProjectsSelected","getSelectedProjectPlatformsArray","projectQuery","selectedProjectIdSet","toArray","reduce","acc","getSelectedProjectPlatforms","join","getProjectID","eventData","projectSlug","currentProject"],"sourceRoot":""}