{"version":3,"file":"chunks/app_components_performanceDuration_tsx-app_views_performance_transactionSummary_transactionTa-95099b.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/performanceDuration.tsx","webpack:///./app/views/performance/transactionSummary/transactionTags/utils.tsx","webpack:///./app/views/starfish/utils/combineTableDataWithSparklineData.tsx","webpack:///./app/views/starfish/components/facetInsights.tsx","webpack:///./app/views/starfish/components/sampleEvents.tsx","webpack:///./app/views/starfish/views/webServiceView/endpointOverview/index.tsx","webpack:///../node_modules/lodash/negate.js","webpack:///../node_modules/lodash/omitBy.js"],"sourcesContent":["import Duration from 'sentry/components/duration';\nimport {defined} from 'sentry/utils';\n\ninterface DurationProps {\n  abbreviation?: boolean;\n}\n\ninterface SecondsProps extends DurationProps {\n  seconds: number;\n}\n\ninterface MillisecondsProps extends DurationProps {\n  milliseconds: number;\n}\n\ninterface NanosecondsProps extends DurationProps {\n  nanoseconds: number;\n}\n\ntype PerformanceDurationProps = SecondsProps | MillisecondsProps | NanosecondsProps;\n\nfunction isMilliseconds(props: PerformanceDurationProps): props is MillisecondsProps {\n  return defined((props as MillisecondsProps).milliseconds);\n}\n\nfunction isNanoseconds(props: PerformanceDurationProps): props is NanosecondsProps {\n  return defined((props as NanosecondsProps).nanoseconds);\n}\n\nfunction PerformanceDuration(props: PerformanceDurationProps) {\n  const normalizedSeconds = isNanoseconds(props)\n    ? props.nanoseconds / 1_000_000_000\n    : isMilliseconds(props)\n    ? props.milliseconds / 1000\n    : props.seconds;\n\n  return (\n    <Duration\n      abbreviation={props.abbreviation}\n      seconds={normalizedSeconds}\n      fixedDigits={2}\n    />\n  );\n}\n\nexport default PerformanceDuration;\n","import {Location, Query} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nexport function generateTagsRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/summary/tags/`;\n}\n\nexport function decodeSelectedTagKey(location: Location): string | undefined {\n  return decodeScalar(location.query.tagKey);\n}\n\nexport function trackTagPageInteraction(organization: Organization) {\n  trackAnalytics('performance_views.tags.interaction', {organization});\n}\n\nexport function tagsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateTagsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      tagKey: query.tagKey,\n    },\n  };\n}\n\nexport function getTagSortForTagsPage(location: Location) {\n  // Retrieves the tag from the same query param segment explorer uses, but removes columns that aren't supported.\n  let tagSort = decodeScalar(location.query?.tagSort) ?? '-frequency';\n\n  if (['sumdelta'].find(denied => tagSort?.includes(denied))) {\n    tagSort = '-frequency';\n  }\n\n  return tagSort;\n}\n\n// TODO(k-fish): Improve meta of backend response to return these directly\nexport function parseHistogramBucketInfo(row: {[key: string]: React.ReactText}) {\n  const field = Object.keys(row).find(f => f.includes('histogram'));\n  if (!field) {\n    return undefined;\n  }\n  const parts = field.split('_');\n  return {\n    histogramField: field,\n    bucketSize: parseInt(parts[parts.length - 3], 10),\n    offset: parseInt(parts[parts.length - 2], 10),\n    multiplier: parseInt(parts[parts.length - 1], 10),\n  };\n}\n","import {Duration, Moment} from 'moment';\n\nimport {Series} from 'sentry/types/echarts';\nimport {DataRow} from 'sentry/views/starfish/modules/APIModule/endpointTable';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nexport default function combineTableDataWithSparklineData(\n  tableData: DataRow[],\n  aggregateData,\n  momentInterval: Duration,\n  startTime?: Moment,\n  endTime?: Moment\n): DataRow[] {\n  const aggregatesGroupedByQuery = {};\n  aggregateData.forEach(({description, interval, count, p50, p95}) => {\n    if (description in aggregatesGroupedByQuery) {\n      aggregatesGroupedByQuery[description].push({name: interval, count, p50, p95});\n    } else {\n      aggregatesGroupedByQuery[description] = [{name: interval, count, p50, p95}];\n    }\n  });\n\n  const combinedData = tableData.map(data => {\n    const query = data.description;\n\n    const throughputSeries: Series = {\n      seriesName: 'throughput',\n      data: aggregatesGroupedByQuery[query]?.map(({name, count}) => ({\n        name,\n        value: count,\n      })),\n    };\n\n    const p50Series: Series = {\n      seriesName: 'p50 Trend',\n      data: aggregatesGroupedByQuery[query]?.map(({name, p50}) => ({\n        name,\n        value: p50,\n      })),\n    };\n\n    const p95Series: Series = {\n      seriesName: 'p95 Trend',\n      data: aggregatesGroupedByQuery[query]?.map(({name, p95}) => ({\n        name,\n        value: p95,\n      })),\n    };\n\n    const zeroFilledThroughput = zeroFillSeries(\n      throughputSeries,\n      momentInterval,\n      startTime,\n      endTime\n    );\n    const zeroFilledP50 = zeroFillSeries(p50Series, momentInterval, startTime, endTime);\n    const zeroFilledP95 = zeroFillSeries(p95Series, momentInterval, startTime, endTime);\n    return {\n      ...data,\n      throughput: zeroFilledThroughput,\n      p50_trend: zeroFilledP50,\n      p95_trend: zeroFilledP95,\n    };\n  });\n\n  return combinedData;\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as qs from 'query-string';\n\nimport GridEditable, {GridColumnHeader} from 'sentry/components/gridEditable';\nimport Link from 'sentry/components/links/link';\nimport {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {TAG_EXPLORER_COLUMN_ORDER} from 'sentry/views/performance/transactionSummary/transactionOverview/tagExplorer';\nimport Sparkline from 'sentry/views/starfish/components/sparkline';\nimport {\n  OverflowEllipsisTextContainer,\n  TextAlignLeft,\n} from 'sentry/views/starfish/modules/APIModule/endpointTable';\n\ntype Props = {\n  eventView: EventView;\n};\n\ntype DataRow = {\n  p50: Series;\n  tagKey: string;\n  tagValue: string;\n  throughput: Series;\n  tpmCorrelation: string;\n};\n\nconst COLUMN_ORDER = [\n  {\n    key: 'tagKey',\n    name: 'Key',\n    width: 300,\n  },\n  {\n    key: 'tagValue',\n    name: 'Value',\n    width: 200,\n  },\n  {\n    key: 'p50',\n    name: 'p50(duration)',\n    width: 200,\n  },\n  {\n    key: 'throughput',\n    name: 'tpm',\n    width: 200,\n  },\n  {\n    key: 'tpmCorrelation',\n    name: 'tpm correlation',\n    width: 200,\n  },\n];\n\nfunction transformSeries(name, data): Series {\n  return {\n    seriesName: name,\n    data: data.map(datum => {\n      return {name: datum[0], value: datum[1][0].count};\n    }),\n  };\n}\n\nexport function FacetInsights({eventView}: Props) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const facetStatsEventView = eventView.clone();\n  facetStatsEventView.fields = TAG_EXPLORER_COLUMN_ORDER;\n  const sortedFacetStatsEventView = facetStatsEventView.withSorts([\n    {\n      field: 'sumdelta',\n      kind: 'desc',\n    },\n  ]);\n\n  function renderBodyCell(column: GridColumnHeader, row: DataRow): React.ReactNode {\n    if (column.key === 'throughput' || column.key === 'p50') {\n      return (\n        <Sparkline\n          color={column.key === 'throughput' ? CHART_PALETTE[3][0] : CHART_PALETTE[3][1]}\n          series={row[column.key]}\n          width={column.width ? column.width - column.width / 5 : undefined}\n        />\n      );\n    }\n\n    if (column.key === 'tagValue') {\n      const query = new MutableSearch(eventView.query);\n      let queryFilter = '';\n      query.tokens.forEach(value => {\n        if (value.key) {\n          queryFilter = queryFilter.concat(' ', `${value.key}:${value.value}`);\n        }\n      });\n      queryFilter = queryFilter.concat(' ', `${row.tagKey}:${row.tagValue}`);\n      return (\n        <OverflowEllipsisTextContainer>\n          <Link\n            to={`/discover/homepage/?${qs.stringify({\n              ...eventView.generateQueryStringObject(),\n              query: queryFilter,\n              field: [\n                'title',\n                'p50(transaction.duration)',\n                'p75(transaction.duration)',\n                'p95(transaction.duration)',\n              ],\n              yAxis: 'count()',\n            })}`}\n          >\n            {row[column.key]}\n          </Link>\n        </OverflowEllipsisTextContainer>\n      );\n    }\n\n    return <TextAlignLeft>{row[column.key]}</TextAlignLeft>;\n  }\n\n  const {isLoading, data} = useGenericDiscoverQuery<any, DiscoverQueryProps>({\n    route: 'events-facets-stats',\n    eventView,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...sortedFacetStatsEventView.getEventsAPIPayload(location),\n      aggregateColumn: 'transaction.duration',\n    }),\n  });\n\n  if (isLoading) {\n    return null;\n  }\n\n  const transformedData: DataRow[] = [];\n\n  const totals = data?.totals;\n  const keys = Object.keys(totals);\n  let showCorrelation = false;\n  for (let index = 0; index < keys.length; index++) {\n    const element = keys[index];\n    const tpmCorrelation = categorizeCorrelation(totals[element].sum_correlation);\n    if (tpmCorrelation !== NO_CORRELATION) {\n      showCorrelation = true;\n      transformedData.push({\n        tagKey: element.split(',')[0],\n        tagValue: element.split(',')[1],\n        throughput: transformSeries('throughput', data![element]['count()'].data),\n        p50: transformSeries('p50', data![element]['p75(transaction.duration)'].data),\n        tpmCorrelation,\n      });\n    }\n  }\n\n  if (showCorrelation === false) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <SubHeader>{t('Correlations')}</SubHeader>\n      <GridEditable\n        isLoading={isLoading}\n        data={transformedData}\n        columnOrder={COLUMN_ORDER}\n        columnSortBy={[]}\n        location={location}\n        grid={{\n          renderBodyCell: (column: GridColumnHeader, row: DataRow) =>\n            renderBodyCell(column, row),\n        }}\n      />\n    </Fragment>\n  );\n}\n\nconst NO_CORRELATION = 'no/low correlation';\n\nfunction categorizeCorrelation(correlation: number): string {\n  if (correlation >= 0.8) {\n    return 'very highly correlated';\n  }\n  if (correlation >= 0.6) {\n    return 'highly correlated';\n  }\n  if (correlation >= 0.4) {\n    return 'correlated';\n  }\n  return NO_CORRELATION;\n}\n\nconst SubHeader = styled('h3')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeLarge};\n  margin: 0;\n  margin-bottom: ${space(1)};\n`;\n","import Duration from 'sentry/components/duration';\nimport GridEditable, {GridColumnHeader} from 'sentry/components/gridEditable';\nimport Link from 'sentry/components/links/link';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  DiscoverQueryProps,\n  useGenericDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {TextAlignLeft} from 'sentry/views/starfish/modules/APIModule/endpointTable';\n\ntype Props = {\n  eventView: EventView;\n};\n\ntype DataRow = {\n  id: string;\n  'transaction.duration': number;\n};\n\ntype Keys = 'id' | 'transaction.duration';\ntype TableColumnHeader = GridColumnHeader<Keys>;\nconst COLUMN_ORDER: TableColumnHeader[] = [\n  {\n    key: 'id',\n    name: 'Event ID',\n    width: 300,\n  },\n  {\n    key: 'transaction.duration',\n    name: 'Duration',\n    width: -1,\n  },\n];\n\nexport function SampleEvents({eventView}: Props) {\n  const location = useLocation();\n  const organization = useOrganization();\n\n  const sampleEventsEventView = eventView\n    .clone()\n    .withColumns([\n      {\n        field: 'transaction.duration',\n        kind: 'field',\n      },\n    ])\n    .withSorts([\n      {\n        field: 'transaction.duration',\n        kind: 'desc',\n      },\n    ]);\n\n  function renderBodyCell(column: TableColumnHeader, row: DataRow): React.ReactNode {\n    if (column.key === 'id') {\n      return (\n        <Link to={`/performance/${row['project.name']}:${row.id}`}>\n          {row.id.slice(0, 8)}\n        </Link>\n      );\n    }\n\n    if (column.key === 'transaction.duration') {\n      return (\n        <Duration\n          seconds={row['transaction.duration'] / 1000}\n          fixedDigits={2}\n          abbreviation\n        />\n      );\n    }\n\n    return <TextAlignLeft>{row[column.key]}</TextAlignLeft>;\n  }\n\n  const {isLoading, data} = useGenericDiscoverQuery<any, DiscoverQueryProps>({\n    route: 'events',\n    eventView: sampleEventsEventView,\n    referrer: 'starfish-transaction-summary-sample-events',\n    limit: 5,\n    location,\n    orgSlug: organization.slug,\n    getRequestPayload: () => ({\n      ...sampleEventsEventView.getEventsAPIPayload(location),\n    }),\n  });\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={data?.data}\n      columnOrder={COLUMN_ORDER}\n      columnSortBy={[]}\n      location={location}\n      grid={{\n        renderBodyCell,\n      }}\n    />\n  );\n}\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\nimport * as qs from 'query-string';\n\nimport _EventsRequest from 'sentry/components/charts/eventsRequest';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport {COL_WIDTH_UNDEFINED} from 'sentry/components/gridEditable';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {PerformanceLayoutBodyRow} from 'sentry/components/performance/layouts';\nimport {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {NewQuery} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {useQuery} from 'sentry/utils/queryClient';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport withApi from 'sentry/utils/withApi';\nimport Chart from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {FacetInsights} from 'sentry/views/starfish/components/facetInsights';\nimport {SampleEvents} from 'sentry/views/starfish/components/sampleEvents';\nimport EndpointTable from 'sentry/views/starfish/modules/APIModule/endpointTable';\nimport DatabaseTableView, {\n  DataRow,\n} from 'sentry/views/starfish/modules/databaseModule/databaseTableView';\nimport {\n  getDbAggregatesQuery,\n  useQueryMainTable,\n} from 'sentry/views/starfish/modules/databaseModule/queries';\nimport combineTableDataWithSparklineData from 'sentry/views/starfish/utils/combineTableDataWithSparklineData';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {datetimeToClickhouseFilterTimestamps} from 'sentry/views/starfish/utils/dates';\nimport {SpanGroupBreakdownContainer} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\nconst EventsRequest = withApi(_EventsRequest);\n\nconst HTTP_SPAN_COLUMN_ORDER = [\n  {\n    key: 'description',\n    name: 'URL',\n    width: 400,\n  },\n  {\n    key: 'throughput',\n    name: 'Throughput',\n    width: 350,\n  },\n  {\n    key: 'p50_trend',\n    name: 'p50 Trend',\n    width: 200,\n  },\n  {\n    key: 'p50(exclusive_time)',\n    name: 'p50',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'transaction_count',\n    name: 'Transactions',\n    width: COL_WIDTH_UNDEFINED,\n  },\n\n  {\n    key: 'total_exclusive_time',\n    name: 'Total Time',\n    width: COL_WIDTH_UNDEFINED,\n  },\n];\n\nexport default function EndpointOverview() {\n  const location = useLocation();\n  const organization = useOrganization();\n  const theme = useTheme();\n\n  const {endpoint: transaction, method, statsPeriod} = location.query;\n  const pageFilter = usePageFilters();\n\n  const {\n    isLoading: isTableDataLoading,\n    data: tableData,\n    isRefetching: isTableRefetching,\n  } = useQueryMainTable({transaction: (transaction as string) ?? '', limit: 8});\n\n  const {data: dbAggregateData} = useQuery({\n    queryKey: ['dbAggregates', transaction, pageFilter.selection.datetime],\n    queryFn: () =>\n      fetch(\n        `${HOST}/?query=${getDbAggregatesQuery({\n          datetime: pageFilter.selection.datetime,\n          transaction,\n        })}`\n      ).then(res => res.json()),\n    retry: false,\n    initialData: [],\n  });\n\n  const aggregatesGroupedByQuery = {};\n  dbAggregateData.forEach(({description, interval, count, p75}) => {\n    if (description in aggregatesGroupedByQuery) {\n      aggregatesGroupedByQuery[description].push({name: interval, count, p75});\n    } else {\n      aggregatesGroupedByQuery[description] = [{name: interval, count, p75}];\n    }\n  });\n\n  const {start_timestamp, end_timestamp} = datetimeToClickhouseFilterTimestamps(\n    pageFilter.selection.datetime\n  );\n\n  const combinedDbData = combineTableDataWithSparklineData(\n    tableData,\n    dbAggregateData,\n    moment.duration(12, 'hours'),\n    moment(start_timestamp),\n    moment(end_timestamp)\n  );\n\n  const query = new MutableSearch([\n    'has:http.method',\n    'transaction.op:http.server',\n    `transaction:${transaction}`,\n    `http.method:${method}`,\n  ]);\n\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Endpoint Overview'),\n    query: query.formatString(),\n    projects: [1],\n    fields: [],\n    version: 2,\n  };\n\n  function renderFailureRateChart() {\n    return (\n      <EventsRequest\n        query={query.formatString()}\n        includePrevious={false}\n        partial\n        interval=\"1h\"\n        includeTransformedData\n        limit={1}\n        environment={eventView.environment}\n        project={eventView.project}\n        period={eventView.statsPeriod}\n        referrer=\"starfish-homepage-failure-rate\"\n        start={eventView.start}\n        end={eventView.end}\n        organization={organization}\n        yAxis=\"equation|count_if(http.status_code,greaterOrEquals,500)/(count_if(http.status_code,equals,200)+count_if(http.status_code,greaterOrEquals,500))\"\n      >\n        {eventData => {\n          const transformedData: Series[] | undefined = eventData.timeseriesData?.map(\n            series => ({\n              data: series.data,\n              seriesName: t('Error Rate'),\n              color: CHART_PALETTE[5][3],\n              silent: true,\n            })\n          );\n\n          if (!transformedData) {\n            return null;\n          }\n\n          return (\n            <Fragment>\n              <Chart\n                statsPeriod={eventView.statsPeriod}\n                height={80}\n                data={transformedData}\n                start={eventView.start as string}\n                end={eventView.end as string}\n                loading={eventData.loading}\n                utc={false}\n                grid={{\n                  left: '0',\n                  right: '0',\n                  top: '8px',\n                  bottom: '0',\n                }}\n                definedAxisTicks={2}\n                isLineChart\n                chartColors={theme.charts.getColorPalette(2)}\n                disableXAxis\n                aggregateOutputFormat=\"percentage\"\n              />\n            </Fragment>\n          );\n        }}\n      </EventsRequest>\n    );\n  }\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n\n  return (\n    <Layout.Page>\n      <Layout.Header>\n        <Layout.HeaderContent>\n          <Layout.Title>{t('Endpoint Overview')}</Layout.Title>\n        </Layout.HeaderContent>\n      </Layout.Header>\n\n      <Layout.Body>\n        <SearchContainerWithFilterAndMetrics>\n          <PageFilterBar condensed>\n            <DatePageFilter alignDropdown=\"left\" />\n          </PageFilterBar>\n        </SearchContainerWithFilterAndMetrics>\n\n        <Layout.Main fullWidth>\n          <SubHeader>{t('Endpoint URL')}</SubHeader>\n          <pre>{`${method} ${transaction}`}</pre>\n          <StyledRow minSize={200}>\n            <ChartsContainer>\n              <ChartsContainerItem>\n                <SpanGroupBreakdownContainer transaction={transaction as string} />\n              </ChartsContainerItem>\n              <ChartsContainerItem2>\n                <ChartPanel title={t('Error Rate')}>\n                  {renderFailureRateChart()}\n                </ChartPanel>\n                <EventsRequest\n                  query={query.formatString()}\n                  includePrevious={false}\n                  partial\n                  limit={5}\n                  interval=\"1h\"\n                  includeTransformedData\n                  environment={eventView.environment}\n                  project={eventView.project}\n                  period={pageFilter.selection.datetime.period}\n                  referrer=\"starfish-endpoint-overview\"\n                  start={pageFilter.selection.datetime.start}\n                  end={pageFilter.selection.datetime.end}\n                  organization={organization}\n                  yAxis={['tpm()', 'p50(transaction.duration)']}\n                  queryExtras={{dataset: 'metrics'}}\n                >\n                  {({results, loading}) => {\n                    return (\n                      <Fragment>\n                        <ChartPanel title={t('p50(duration)')}>\n                          <Chart\n                            statsPeriod={(statsPeriod as string) ?? '24h'}\n                            height={80}\n                            data={results?.[1] ? [results?.[1]] : []}\n                            start=\"\"\n                            end=\"\"\n                            loading={loading}\n                            utc={false}\n                            stacked\n                            isLineChart\n                            disableXAxis\n                            definedAxisTicks={2}\n                            chartColors={[theme.charts.getColorPalette(0)[1]]}\n                            grid={{\n                              left: '0',\n                              right: '0',\n                              top: '8px',\n                              bottom: '16px',\n                            }}\n                          />\n                        </ChartPanel>\n                        <ChartPanel title={t('Througput')}>\n                          <Chart\n                            statsPeriod={(statsPeriod as string) ?? '24h'}\n                            height={80}\n                            data={results?.[0] ? [results?.[0]] : []}\n                            start=\"\"\n                            end=\"\"\n                            loading={loading}\n                            utc={false}\n                            stacked\n                            isLineChart\n                            disableXAxis\n                            definedAxisTicks={2}\n                            chartColors={[theme.charts.getColorPalette(0)[0]]}\n                            grid={{\n                              left: '0',\n                              right: '0',\n                              top: '8px',\n                              bottom: '16px',\n                            }}\n                          />\n                        </ChartPanel>\n                      </Fragment>\n                    );\n                  }}\n                </EventsRequest>\n              </ChartsContainerItem2>\n            </ChartsContainer>\n          </StyledRow>\n          <SubHeader>{t('Sample Events')}</SubHeader>\n          <SampleEvents eventView={eventView} />\n          <FacetInsights eventView={eventView} />\n          <SubHeader>{t('HTTP Spans')}</SubHeader>\n          <EndpointTable\n            location={location}\n            onSelect={r => {\n              browserHistory.push(\n                `/starfish/span/${encodeURIComponent(r.group_id)}/?${qs.stringify({\n                  transaction,\n                })}`\n              );\n            }}\n            columns={HTTP_SPAN_COLUMN_ORDER}\n            filterOptions={{\n              action: '',\n              domain: '',\n              transaction: (transaction as string) ?? '',\n              datetime: pageFilter.selection.datetime,\n            }}\n          />\n          <SubHeader>{t('Database Spans')}</SubHeader>\n          <DatabaseTableView\n            location={location}\n            data={combinedDbData as DataRow[]}\n            isDataLoading={isTableDataLoading || isTableRefetching}\n            onSelect={r => {\n              browserHistory.push(\n                `/starfish/span/${encodeURIComponent(r.group_id)}/?${qs.stringify({\n                  transaction,\n                })}`\n              );\n            }}\n          />\n        </Layout.Main>\n      </Layout.Body>\n    </Layout.Page>\n  );\n}\n\nconst SubHeader = styled('h3')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeLarge};\n  margin: 0;\n  margin-bottom: ${space(1)};\n`;\n\nconst SearchContainerWithFilterAndMetrics = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto auto;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr auto;\n  }\n`;\n\nconst StyledRow = styled(PerformanceLayoutBodyRow)`\n  margin-bottom: ${space(2)};\n`;\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 1.5;\n`;\n\nconst ChartsContainerItem2 = styled('div')`\n  flex: 1;\n`;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n"],"names":["PerformanceDuration","props","normalizedSeconds","defined","nanoseconds","isNanoseconds","milliseconds","isMilliseconds","seconds","_jsx","Duration","abbreviation","fixedDigits","displayName","decodeSelectedTagKey","location","decodeScalar","query","tagKey","trackTagPageInteraction","organization","trackAnalytics","tagsRouteWithQuery","_ref2","orgSlug","transaction","projectID","pathname","_ref","generateTagsRoute","project","environment","statsPeriod","start","end","getTagSortForTagsPage","tagSort","find","denied","includes","parseHistogramBucketInfo","row","field","Object","keys","f","parts","split","histogramField","bucketSize","parseInt","length","offset","multiplier","combineTableDataWithSparklineData","tableData","aggregateData","momentInterval","startTime","endTime","aggregatesGroupedByQuery","forEach","description","interval","count","p50","p95","push","name","map","data","throughputSeries","seriesName","value","p50Series","_ref3","p95Series","_ref4","zeroFilledThroughput","zeroFillSeries","zeroFilledP50","zeroFilledP95","throughput","p50_trend","p95_trend","COLUMN_ORDER","key","width","transformSeries","datum","FacetInsights","eventView","useLocation","useOrganization","facetStatsEventView","clone","fields","TAG_EXPLORER_COLUMN_ORDER","sortedFacetStatsEventView","withSorts","kind","isLoading","useGenericDiscoverQuery","route","slug","getRequestPayload","getEventsAPIPayload","aggregateColumn","transformedData","totals","showCorrelation","index","element","tpmCorrelation","correlation","sum_correlation","NO_CORRELATION","tagValue","_jsxs","Fragment","children","SubHeader","t","GridEditable","columnOrder","columnSortBy","grid","renderBodyCell","column","Sparkline","color","CHART_PALETTE","series","undefined","MutableSearch","queryFilter","tokens","concat","OverflowEllipsisTextContainer","Link","to","qs","generateQueryStringObject","yAxis","TextAlignLeft","_styled","target","p","theme","gray300","fontSizeLarge","space","SampleEvents","sampleEventsEventView","withColumns","referrer","limit","id","slice","EventsRequest","withApi","_EventsRequest","HTTP_SPAN_COLUMN_ORDER","COL_WIDTH_UNDEFINED","EndpointOverview","useTheme","endpoint","method","pageFilter","usePageFilters","isTableDataLoading","isRefetching","isTableRefetching","useQueryMainTable","dbAggregateData","useQuery","queryKey","selection","datetime","queryFn","fetch","HOST","getDbAggregatesQuery","then","res","json","retry","initialData","p75","start_timestamp","end_timestamp","datetimeToClickhouseFilterTimestamps","combinedDbData","moment","savedQuery","formatString","projects","version","EventView","Layout","SearchContainerWithFilterAndMetrics","PageFilterBar","condensed","DatePageFilter","alignDropdown","fullWidth","StyledRow","minSize","ChartsContainer","ChartsContainerItem","SpanGroupBreakdownContainer","ChartsContainerItem2","ChartPanel","title","includePrevious","partial","includeTransformedData","period","eventData","timeseriesData","silent","Chart","height","loading","utc","left","right","top","bottom","definedAxisTicks","isLineChart","chartColors","charts","getColorPalette","disableXAxis","aggregateOutputFormat","queryExtras","dataset","results","stacked","EndpointTable","onSelect","r","browserHistory","encodeURIComponent","group_id","columns","filterOptions","action","domain","DatabaseTableView","isDataLoading","breakpoints","small","PerformanceLayoutBodyRow","styles","module","exports","predicate","TypeError","args","arguments","call","this","apply","baseIteratee","negate","pickBy","object"],"sourceRoot":""}