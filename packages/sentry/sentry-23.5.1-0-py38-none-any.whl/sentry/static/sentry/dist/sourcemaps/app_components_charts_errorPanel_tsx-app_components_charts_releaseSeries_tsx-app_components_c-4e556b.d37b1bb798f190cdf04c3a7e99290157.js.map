{"version":3,"file":"chunks/app_components_charts_errorPanel_tsx-app_components_charts_releaseSeries_tsx-app_components_c-4e556b.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/areaChart.tsx","webpack:///./app/components/charts/series/areaSeries.tsx","webpack:///./app/components/charts/errorPanel.tsx","webpack:///./app/components/charts/releaseSeries.tsx","webpack:///./app/components/charts/stackedAreaChart.tsx","webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/performance/onboarding.tsx"],"sourcesContent":["import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport AreaSeries from './series/areaSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type AreaChartSeries = Series & Omit<LineSeriesOption, 'data' | 'name'>;\n\nexport interface AreaChartProps extends Omit<ChartProps, 'series'> {\n  series: AreaChartSeries[];\n  additionalSeries?: LineSeriesOption[];\n  stacked?: boolean;\n}\n\nexport function AreaChart({series, stacked, colors, ...props}: AreaChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      data-test-id=\"area-chart\"\n      colors={colors}\n      series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>\n        AreaSeries({\n          stack: stacked ? 'area' : undefined,\n          name: seriesName,\n          data: data.map(({name, value}) => [name, value]),\n          lineStyle: {\n            color: colors?.[i],\n            opacity: 1,\n            width: 0.4,\n          },\n          areaStyle: {\n            color: colors?.[i],\n            opacity: 1.0,\n          },\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n          ...otherSeriesProps,\n        })\n      )}\n    />\n  );\n}\n","import type {LineSeriesOption} from 'echarts';\n\nimport LineSeries from 'sentry/components/charts/series/lineSeries';\n\nexport default function AreaSeries(props: LineSeriesOption = {}): LineSeriesOption {\n  return LineSeries({\n    ...props,\n  });\n}\n","import styled from '@emotion/styled';\n\nconst ErrorPanel = styled('div')<{height?: string}>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height || '200px'};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nexport default ErrorPanel;\n","import {Component} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport {Theme, withTheme} from '@emotion/react';\nimport {Query} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport partition from 'lodash/partition';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {t} from 'sentry/locale';\nimport {DateString, Organization} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {escape} from 'sentry/utils';\nimport {getFormattedDate, getUtcDateString} from 'sentry/utils/dates';\nimport {formatVersion} from 'sentry/utils/formatters';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\ntype ReleaseMetaBasic = {\n  date: string;\n  version: string;\n};\n\ntype ReleaseConditions = {\n  end: DateString;\n  environment: Readonly<string[]>;\n  project: Readonly<number[]>;\n  start: DateString;\n  cursor?: string;\n  query?: string;\n  statsPeriod?: string | null;\n};\n\n// This is not an exported action/function because releases list uses AsyncComponent\n// and this is not re-used anywhere else afaict\nfunction getOrganizationReleases(\n  api: Client,\n  organization: Organization,\n  conditions: ReleaseConditions\n) {\n  const query = {};\n  Object.keys(conditions).forEach(key => {\n    let value = conditions[key];\n    if (value && (key === 'start' || key === 'end')) {\n      value = getUtcDateString(value);\n    }\n    if (value) {\n      query[key] = value;\n    }\n  });\n  api.clear();\n  return api.requestPromise(`/organizations/${organization.slug}/releases/stats/`, {\n    includeAllArgs: true,\n    method: 'GET',\n    query,\n  }) as Promise<[ReleaseMetaBasic[], any, ResponseMeta]>;\n}\n\ntype Props = WithRouterProps & {\n  api: Client;\n  children: (s: State) => React.ReactNode;\n  end: DateString;\n  environments: Readonly<string[]>;\n  organization: Organization;\n  projects: Readonly<number[]>;\n  start: DateString;\n  theme: Theme;\n  emphasizeReleases?: string[];\n  memoized?: boolean;\n  period?: string | null;\n  preserveQueryParams?: boolean;\n  query?: string;\n  queryExtra?: Query;\n  releases?: ReleaseMetaBasic[] | null;\n  tooltip?: Exclude<Parameters<typeof MarkLine>[0], undefined>['tooltip'];\n  utc?: boolean | null;\n};\n\ntype State = {\n  releaseSeries: Series[];\n  releases: ReleaseMetaBasic[] | null;\n};\n\nclass ReleaseSeries extends Component<Props, State> {\n  state: State = {\n    releases: null,\n    releaseSeries: [],\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    const {releases} = this.props;\n\n    if (releases) {\n      // No need to fetch releases if passed in from props\n      this.setReleasesWithSeries(releases);\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !isEqual(prevProps.projects, this.props.projects) ||\n      !isEqual(prevProps.environments, this.props.environments) ||\n      !isEqual(prevProps.start, this.props.start) ||\n      !isEqual(prevProps.end, this.props.end) ||\n      !isEqual(prevProps.period, this.props.period) ||\n      !isEqual(prevProps.query, this.props.query)\n    ) {\n      this.fetchData();\n    } else if (!isEqual(prevProps.emphasizeReleases, this.props.emphasizeReleases)) {\n      this.setReleasesWithSeries(this.state.releases);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.props.api.clear();\n  }\n\n  _isMounted: boolean = false;\n\n  getOrganizationReleasesMemoized = memoize(\n    (api: Client, organization: Organization, conditions: ReleaseConditions) =>\n      getOrganizationReleases(api, organization, conditions),\n    (_, __, conditions) =>\n      Object.values(conditions)\n        .map(val => JSON.stringify(val))\n        .join('-')\n  );\n\n  async fetchData() {\n    const {\n      api,\n      organization,\n      projects,\n      environments,\n      period,\n      start,\n      end,\n      memoized,\n      query,\n    } = this.props;\n    const conditions: ReleaseConditions = {\n      start,\n      end,\n      project: projects,\n      environment: environments,\n      statsPeriod: period,\n      query,\n    };\n    let hasMore = true;\n    const releases: ReleaseMetaBasic[] = [];\n    while (hasMore) {\n      try {\n        const getReleases = memoized\n          ? this.getOrganizationReleasesMemoized\n          : getOrganizationReleases;\n        const [newReleases, , resp] = await getReleases(api, organization, conditions);\n        releases.push(...newReleases);\n        if (this._isMounted) {\n          this.setReleasesWithSeries(releases);\n        }\n\n        const pageLinks = resp?.getResponseHeader('Link');\n        if (pageLinks) {\n          const paginationObject = parseLinkHeader(pageLinks);\n          hasMore = paginationObject?.next?.results ?? false;\n          conditions.cursor = paginationObject.next.cursor;\n        } else {\n          hasMore = false;\n        }\n      } catch {\n        addErrorMessage(t('Error fetching releases'));\n        hasMore = false;\n      }\n    }\n  }\n\n  setReleasesWithSeries(releases) {\n    const {emphasizeReleases = []} = this.props;\n    const releaseSeries: Series[] = [];\n\n    if (emphasizeReleases.length) {\n      const [unemphasizedReleases, emphasizedReleases] = partition(\n        releases,\n        release => !emphasizeReleases.includes(release.version)\n      );\n      if (unemphasizedReleases.length) {\n        releaseSeries.push(this.getReleaseSeries(unemphasizedReleases, {type: 'dotted'}));\n      }\n      if (emphasizedReleases.length) {\n        releaseSeries.push(\n          this.getReleaseSeries(emphasizedReleases, {\n            opacity: 0.8,\n          })\n        );\n      }\n    } else {\n      releaseSeries.push(this.getReleaseSeries(releases));\n    }\n\n    this.setState({\n      releases,\n      releaseSeries,\n    });\n  }\n\n  getReleaseSeries = (releases, lineStyle = {}) => {\n    const {\n      organization,\n      router,\n      tooltip,\n      environments,\n      start,\n      end,\n      period,\n      preserveQueryParams,\n      queryExtra,\n      theme,\n    } = this.props;\n\n    const query = {...queryExtra};\n    if (organization.features.includes('global-views')) {\n      query.project = router.location.query.project;\n    }\n    if (preserveQueryParams) {\n      query.environment = [...environments];\n      query.start = start ? getUtcDateString(start) : undefined;\n      query.end = end ? getUtcDateString(end) : undefined;\n      query.statsPeriod = period || undefined;\n    }\n\n    const markLine = MarkLine({\n      animation: false,\n      lineStyle: {\n        color: theme.purple300,\n        opacity: 0.3,\n        type: 'solid',\n        ...lineStyle,\n      },\n      label: {\n        show: false,\n      },\n      data: releases.map(release => ({\n        xAxis: +new Date(release.date),\n        name: formatVersion(release.version, true),\n        value: formatVersion(release.version, true),\n        onClick: () => {\n          router.push({\n            pathname: `/organizations/${organization.slug}/releases/${release.version}/`,\n            query,\n          });\n        },\n        label: {\n          formatter: () => formatVersion(release.version, true),\n        },\n      })),\n      tooltip: tooltip || {\n        trigger: 'item',\n        formatter: ({data}: any) => {\n          // Should only happen when navigating pages\n          if (!data) {\n            return '';\n          }\n          // XXX using this.props here as this function does not get re-run\n          // unless projects are changed. Using a closure variable would result\n          // in stale values.\n          const time = getFormattedDate(data.value, 'MMM D, YYYY LT', {\n            local: !this.props.utc,\n          });\n          const version = escape(formatVersion(data.name, true));\n          return [\n            '<div class=\"tooltip-series\">',\n            `<div><span class=\"tooltip-label\"><strong>${t(\n              'Release'\n            )}</strong></span> ${version}</div>`,\n            '</div>',\n            '<div class=\"tooltip-footer\">',\n            time,\n            '</div>',\n            '</div>',\n            '<div class=\"tooltip-arrow\"></div>',\n          ].join('');\n        },\n      },\n    });\n\n    return {\n      seriesName: 'Releases',\n      color: theme.purple200,\n      data: [],\n      markLine,\n    };\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children({\n      releases: this.state.releases,\n      releaseSeries: this.state.releaseSeries,\n    });\n  }\n}\n\nexport default withSentryRouter(withOrganization(withApi(withTheme(ReleaseSeries))));\n","import {Component} from 'react';\n\nimport {AreaChart} from 'sentry/components/charts/areaChart';\n\ntype AreaChartProps = React.ComponentProps<typeof AreaChart>;\n\ntype Props = Omit<AreaChartProps, 'stacked' | 'ref'>;\n\nclass StackedAreaChart extends Component<Props> {\n  render() {\n    return <AreaChart tooltip={{filter: val => val > 0}} {...this.props} stacked />;\n  }\n}\n\nexport default StackedAreaChart;\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ninterface Props extends React.ComponentProps<typeof Panel> {\n  children: React.ReactNode;\n  image?: React.ReactNode;\n  noCenter?: boolean;\n}\n\nfunction OnboardingPanel({image, noCenter, children, ...props}: Props) {\n  return (\n    <Panel {...props}>\n      <Container>\n        {image ? <IlloBox>{image}</IlloBox> : null}\n        <StyledBox centered={!image && !noCenter}>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')<{centered?: boolean}>`\n  min-width: 0;\n  z-index: 1;\n\n  ${p => (p.centered ? 'text-align: center;' : '')}\n  ${p => (p.centered ? 'max-width: 600px;' : '')}\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  min-width: 150px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import {useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport emptyStateImg from 'sentry-images/spot/performance-empty-state.svg';\nimport tourAlert from 'sentry-images/spot/performance-tour-alert.svg';\nimport tourCorrelate from 'sentry-images/spot/performance-tour-correlate.svg';\nimport tourMetrics from 'sentry-images/spot/performance-tour-metrics.svg';\nimport tourTrace from 'sentry-images/spot/performance-tour-trace.svg';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'sentry/components/modals/featureTourModal';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {filterProjects} from 'sentry/components/performanceOnboarding/utils';\nimport {SidebarPanelKey} from 'sentry/components/sidebar/types';\nimport {withPerformanceOnboarding} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport SidebarPanelStore from 'sentry/stores/sidebarPanelStore';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useApi from 'sentry/utils/useApi';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useProjects from 'sentry/utils/useProjects';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nconst performanceSetupUrl =\n  'https://docs.sentry.io/performance-monitoring/getting-started/';\n\nconst docsLink = (\n  <Button external href={performanceSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const PERFORMANCE_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Track Application Metrics'),\n    image: <TourImage src={tourMetrics} />,\n    body: (\n      <TourText>\n        {t(\n          'Monitor your slowest pageloads and APIs to see which users are having the worst time.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Correlate Errors and Performance'),\n    image: <TourImage src={tourCorrelate} />,\n    body: (\n      <TourText>\n        {t(\n          'See what errors occurred within a transaction and the impact of those errors.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Watch and Alert'),\n    image: <TourImage src={tourAlert} />,\n    body: (\n      <TourText>\n        {t(\n          'Highlight mission-critical pages and APIs and set latency alerts to notify you before things go wrong.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Trace Across Systems'),\n    image: <TourImage src={tourTrace} />,\n    body: (\n      <TourText>\n        {t(\n          \"Follow a trace from a user's session and drill down to identify any bottlenecks that occur.\"\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n};\n\nfunction Onboarding({organization, project}: Props) {\n  const api = useApi();\n  const {projects} = useProjects();\n  const location = useLocation();\n\n  const {projectsForOnboarding} = filterProjects(projects);\n\n  const showOnboardingChecklist = organization.features?.includes(\n    'performance-onboarding-checklist'\n  );\n\n  useEffect(() => {\n    if (\n      showOnboardingChecklist &&\n      location.hash === '#performance-sidequest' &&\n      projectsForOnboarding.some(p => p.id === project.id)\n    ) {\n      SidebarPanelStore.activatePanel(SidebarPanelKey.PerformanceOnboarding);\n    }\n  }, [location.hash, projectsForOnboarding, project.id, showOnboardingChecklist]);\n\n  function handleAdvance(step: number, duration: number) {\n    trackAnalytics('performance_views.tour.advance', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAnalytics('performance_views.tour.close', {\n      step,\n      duration,\n      organization,\n    });\n  }\n\n  const currentPlatform = project.platform;\n  const hasPerformanceOnboarding = currentPlatform\n    ? withPerformanceOnboarding.has(currentPlatform)\n    : false;\n\n  let setupButton = (\n    <Button\n      priority=\"primary\"\n      href=\"https://docs.sentry.io/performance-monitoring/getting-started/\"\n      external\n    >\n      {t('Start Setup')}\n    </Button>\n  );\n\n  if (hasPerformanceOnboarding && showOnboardingChecklist) {\n    setupButton = (\n      <Button\n        priority=\"primary\"\n        onClick={event => {\n          event.preventDefault();\n          window.location.hash = 'performance-sidequest';\n          SidebarPanelStore.activatePanel(SidebarPanelKey.PerformanceOnboarding);\n        }}\n      >\n        {t('Start Checklist')}\n      </Button>\n    );\n  }\n\n  return (\n    <OnboardingPanel image={<PerfImage src={emptyStateImg} />}>\n      <h3>{t('Pinpoint problems')}</h3>\n      <p>\n        {t(\n          'Something seem slow? Track down transactions to connect the dots between 10-second page loads and poor-performing API calls or slow database queries.'\n        )}\n      </p>\n      <ButtonList gap={1}>\n        {setupButton}\n        <Button\n          data-test-id=\"create-sample-transaction-btn\"\n          onClick={async () => {\n            trackAnalytics('performance_views.create_sample_transaction', {\n              platform: project.platform,\n              organization,\n            });\n            addLoadingMessage(t('Processing sample event...'), {\n              duration: 15000,\n            });\n            const url = `/projects/${organization.slug}/${project.slug}/create-sample-transaction/`;\n            try {\n              const eventData = await api.requestPromise(url, {method: 'POST'});\n              browserHistory.push(\n                normalizeUrl(\n                  `/organizations/${organization.slug}/performance/${project.slug}:${eventData.eventID}/`\n                )\n              );\n              clearIndicators();\n            } catch (error) {\n              Sentry.withScope(scope => {\n                scope.setExtra('error', error);\n                Sentry.captureException(new Error('Failed to create sample event'));\n              });\n              clearIndicators();\n              addErrorMessage(t('Failed to create a new sample event'));\n              return;\n            }\n          }}\n        >\n          {t('View Sample Transaction')}\n        </Button>\n      </ButtonList>\n      <FeatureTourModal\n        steps={PERFORMANCE_TOUR_STEPS}\n        onAdvance={handleAdvance}\n        onCloseModal={handleClose}\n        doneUrl={performanceSetupUrl}\n        doneText={t('Start Setup')}\n      >\n        {({showModal}) => (\n          <Button\n            priority=\"link\"\n            onClick={() => {\n              trackAnalytics('performance_views.tour.start', {organization});\n              showModal();\n            }}\n          >\n            {t('Take a Tour')}\n          </Button>\n        )}\n      </FeatureTourModal>\n    </OnboardingPanel>\n  );\n}\n\nconst PerfImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    max-width: unset;\n    user-select: none;\n    position: absolute;\n    top: 75px;\n    bottom: 0;\n    width: 450px;\n    margin-top: auto;\n    margin-bottom: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 480px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    width: 600px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n  margin-bottom: 16px;\n`;\n\nexport default Onboarding;\n"],"names":["AreaChart","_ref","series","stacked","colors","props","_jsx","BaseChart","map","_ref2","i","seriesName","data","otherSeriesProps","arguments","length","undefined","LineSeries","AreaSeries","stack","name","_ref3","value","lineStyle","color","opacity","width","areaStyle","animation","animationThreshold","animationDuration","displayName","_styled","target","p","height","theme","gray300","fontSizeExtraLarge","getOrganizationReleases","api","organization","conditions","query","Object","keys","forEach","key","getUtcDateString","clear","requestPromise","slug","includeAllArgs","method","ReleaseSeries","Component","constructor","_this","this","_defineProperty","releases","releaseSeries","memoize","_","__","values","val","JSON","stringify","join","router","tooltip","environments","start","end","period","preserveQueryParams","queryExtra","features","includes","project","location","environment","statsPeriod","markLine","MarkLine","purple300","type","label","show","release","xAxis","Date","date","formatVersion","version","onClick","push","pathname","formatter","trigger","time","getFormattedDate","local","utc","escape","t","purple200","componentDidMount","_isMounted","setReleasesWithSeries","fetchData","componentDidUpdate","prevProps","isEqual","projects","emphasizeReleases","state","componentWillUnmount","async","memoized","hasMore","getReleases","getOrganizationReleasesMemoized","newReleases","resp","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","results","cursor","addErrorMessage","unemphasizedReleases","emphasizedReleases","partition","getReleaseSeries","setState","render","children","withSentryRouter","withOrganization","withApi","withTheme","StackedAreaChart","filter","OnboardingPanel","image","noCenter","Panel","_jsxs","Container","IlloBox","StyledBox","centered","space","breakpoints","small","medium","performanceSetupUrl","docsLink","Button","external","href","PERFORMANCE_TOUR_STEPS","title","TourImage","src","tourMetrics","body","TourText","actions","Onboarding","useApi","useProjects","useLocation","projectsForOnboarding","filterProjects","showOnboardingChecklist","useEffect","hash","some","id","SidebarPanelStore","SidebarPanelKey","currentPlatform","platform","hasPerformanceOnboarding","withPerformanceOnboarding","setupButton","priority","event","preventDefault","window","PerfImage","emptyStateImg","ButtonList","gap","trackAnalytics","addLoadingMessage","duration","url","eventData","browserHistory","normalizeUrl","eventID","clearIndicators","error","Sentry","scope","setExtra","Error","FeatureTourModal","steps","onAdvance","step","onCloseModal","doneUrl","doneText","showModal","large","ButtonBar","styles"],"sourceRoot":""}