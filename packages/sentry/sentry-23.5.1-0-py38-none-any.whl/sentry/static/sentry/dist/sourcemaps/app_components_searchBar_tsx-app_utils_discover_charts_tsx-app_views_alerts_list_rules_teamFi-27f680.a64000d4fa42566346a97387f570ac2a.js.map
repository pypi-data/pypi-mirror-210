{"version":3,"file":"chunks/app_components_searchBar_tsx-app_utils_discover_charts_tsx-app_views_alerts_list_rules_teamFi-27f680.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/searchBar.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/alerts/list/rules/teamFilter.tsx"],"sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {InputGroup, InputProps} from 'sentry/components/inputGroup';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery?: string;\n  onChange?: (query: string) => void;\n  onSearch?: (query: string) => void;\n  query?: string;\n  trailing?: React.ReactNode;\n  width?: string;\n}\n\nfunction SearchBar({\n  query: queryProp,\n  defaultQuery = '',\n  onChange,\n  onSearch,\n  width,\n  size,\n  className,\n  trailing,\n  ...inputProps\n}: SearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState(queryProp ?? defaultQuery);\n\n  // if query prop keeps changing we should treat this as\n  // a controlled component and its internal state should be in sync\n  useEffect(() => {\n    if (typeof queryProp === 'string') {\n      setQuery(queryProp);\n    }\n  }, [queryProp]);\n\n  const onQueryChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = e.target;\n      setQuery(value);\n      onChange?.(value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      inputRef.current?.blur();\n      onSearch?.(query);\n    },\n    [onSearch, query]\n  );\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    onChange?.('');\n    onSearch?.('');\n  }, [onChange, onSearch]);\n\n  return (\n    <FormWrap onSubmit={onSubmit} className={className}>\n      <InputGroup>\n        <InputGroup.LeadingItems disablePointerEvents>\n          <IconSearch color=\"subText\" size={size === 'xs' ? 'xs' : 'sm'} />\n        </InputGroup.LeadingItems>\n        <StyledInput\n          {...inputProps}\n          ref={inputRef}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          value={query}\n          onChange={onQueryChange}\n          width={width}\n          size={size}\n        />\n        <InputGroup.TrailingItems>\n          {trailing}\n          {!!query && (\n            <SearchBarTrailingButton\n              size=\"zero\"\n              borderless\n              onClick={clearSearch}\n              icon={<IconClose size=\"xs\" />}\n              aria-label={t('Clear')}\n            />\n          )}\n        </InputGroup.TrailingItems>\n      </InputGroup>\n    </FormWrap>\n  );\n}\n\nconst FormWrap = styled('form')`\n  display: block;\n  position: relative;\n`;\n\nconst StyledInput = styled(InputGroup.Input)`\n  ${p => p.width && `width: ${p.width};`}\n`;\n\nexport const SearchBarTrailingButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  padding: ${space(0.5)};\n`;\n\nexport default SearchBar;\n","import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport TeamAvatar from 'sentry/components/avatar/teamAvatar';\nimport Badge from 'sentry/components/badge';\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {useTeams} from 'sentry/utils/useTeams';\n\ninterface Props {\n  handleChangeFilter: (activeFilters: string[]) => void;\n  selectedTeams: string[];\n  /**\n   * only show teams user is a member of\n   */\n  showIsMemberTeams?: boolean;\n  /**\n   * show My Teams as the default dropdown description\n   */\n  showMyTeamsDescription?: boolean;\n  /**\n   * show suggested options (My Teams and Unassigned)\n   */\n  showSuggestedOptions?: boolean;\n}\n\nconst suggestedOptions = [\n  {\n    label: t('My Teams'),\n    value: 'myteams',\n  },\n  {\n    label: t('Unassigned'),\n    value: 'unassigned',\n  },\n];\n\nfunction TeamFilter({\n  selectedTeams,\n  handleChangeFilter,\n  showIsMemberTeams = false,\n  showSuggestedOptions = true,\n  showMyTeamsDescription = false,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams({provideUserTeams: showIsMemberTeams});\n\n  const teamOptions = useMemo(\n    () =>\n      teams.map(team => ({\n        value: team.id,\n        label: `#${team.slug}`,\n        leadingItems: <TeamAvatar team={team} size={18} />,\n      })),\n    [teams]\n  );\n\n  const [triggerIcon, triggerLabel] = useMemo(() => {\n    const firstSelectedSuggestion =\n      selectedTeams[0] && suggestedOptions.find(opt => opt.value === selectedTeams[0]);\n\n    const firstSelectedTeam =\n      selectedTeams[0] && teams.find(team => team.id === selectedTeams[0]);\n\n    if (firstSelectedSuggestion) {\n      return [<IconUser key={0} />, firstSelectedSuggestion.label];\n    }\n\n    if (firstSelectedTeam) {\n      return [\n        <TeamAvatar team={firstSelectedTeam} size={16} key={0} />,\n        `#${firstSelectedTeam.slug}`,\n      ];\n    }\n\n    return [\n      <IconUser key={0} />,\n      showMyTeamsDescription ? t('My Teams') : t('All Teams'),\n    ];\n  }, [selectedTeams, teams, showMyTeamsDescription]);\n\n  return (\n    <CompactSelect\n      multiple\n      clearable\n      searchable\n      loading={fetching}\n      menuTitle={t('Filter teams')}\n      options={\n        showSuggestedOptions\n          ? [\n              {value: '_suggested', label: t('Suggested'), options: suggestedOptions},\n              {value: '_teams', label: t('Teams'), options: teamOptions},\n            ]\n          : teamOptions\n      }\n      value={selectedTeams}\n      onSearch={debounce(val => void onSearch(val), DEFAULT_DEBOUNCE_DURATION)}\n      onChange={opts => {\n        // Compact select type inference does not work - onChange type is actually T | null.\n        if (!opts) {\n          return handleChangeFilter([]);\n        }\n        return handleChangeFilter(opts.map(opt => opt.value));\n      }}\n      triggerLabel={\n        <Fragment>\n          {triggerLabel}\n          {selectedTeams.length > 1 && (\n            <StyledBadge text={`+${selectedTeams.length - 1}`} />\n          )}\n        </Fragment>\n      }\n      triggerProps={{icon: triggerIcon}}\n    />\n  );\n}\n\nexport default TeamFilter;\n\nconst StyledBadge = styled(Badge)`\n  flex-shrink: 0;\n`;\n"],"names":["SearchBar","_ref","query","queryProp","defaultQuery","onChange","onSearch","width","size","className","trailing","inputProps","inputRef","useRef","setQuery","useState","useEffect","onQueryChange","useCallback","e","value","target","onSubmit","preventDefault","current","blur","clearSearch","_jsx","FormWrap","children","_jsxs","InputGroup","disablePointerEvents","IconSearch","color","StyledInput","ref","type","name","autoComplete","SearchBarTrailingButton","borderless","onClick","icon","IconClose","t","displayName","_styled","styles","p","Button","theme","subText","space","tooltipFormatter","outputType","arguments","length","undefined","defined","toLocaleString","formatPercentage","getDuration","formatBytesBase2","toString","tooltipFormatterUsingAggregateOutputType","axisLabelFormatter","axisLabelFormatterUsingAggregateOutputType","abbreviation","durationUnit","formatAbbreviatedNumber","categorizeDuration","WEEK","label","toFixed","DAY","HOUR","MINUTE","SECOND","axisDuration","getDurationUnit","series","legend","range","data","maxSeries","minSeries","forEach","idx","seriesName","selected","max","Math","map","_ref2","filter","min","_ref3","findRangeOfMultiSeries","avg","suggestedOptions","TeamFilter","selectedTeams","handleChangeFilter","showIsMemberTeams","showSuggestedOptions","showMyTeamsDescription","teams","fetching","useTeams","provideUserTeams","teamOptions","useMemo","team","id","slug","leadingItems","TeamAvatar","triggerIcon","triggerLabel","firstSelectedSuggestion","find","opt","firstSelectedTeam","IconUser","CompactSelect","multiple","clearable","searchable","loading","menuTitle","options","debounce","val","DEFAULT_DEBOUNCE_DURATION","opts","Fragment","StyledBadge","text","triggerProps","Badge"],"sourceRoot":""}