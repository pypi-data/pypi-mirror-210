{"version":3,"file":"chunks/app_views_starfish_modules_APIModule_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/starfish/modules/APIModule/constants.tsx","webpack:///./app/views/starfish/modules/APIModule/hostTable.tsx","webpack:///./app/views/starfish/modules/APIModule/hostDetails.tsx","webpack:///./app/views/starfish/modules/APIModule/APIModuleView.tsx","webpack:///./app/views/starfish/modules/APIModule/index.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\n\nexport const ERROR_CODE_DESCRIPTIONS = {\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  408: 'Request Timeout',\n  429: 'Too Many Requests',\n  500: 'Internal Server Error',\n};\n\nexport const EXTERNAL_APIS = {\n  stripe: {\n    statusPage: 'https://status.stripe.com/',\n    faviconLink: 'https://stripe.com/favicon.ico',\n    description: t(\n      'Stripe is a suite of payment APIs that powers commerce for online businesses of all sizes'\n    ),\n  },\n  twilio: {\n    statusPage: 'https://status.twilio.com/',\n    faviconLink: 'https://www.twilio.com/favicon.ico',\n    description: t('Twilio is a cloud communications platform as a service company.'),\n  },\n  sendgrid: {\n    statusPage: 'https://status.sendgrid.com/',\n    faviconLink: 'https://sendgrid.com/favicon.ico',\n    description: t(\n      'SendGrid is a cloud-based SMTP provider that allows you to send email without having to maintain email servers.'\n    ),\n  },\n  plaid: {\n    statusPage: 'https://status.plaid.com/',\n    faviconLink: 'https://plaid.com/favicon.ico',\n    description: t(\n      'Plaid is a technology platform that enables applications to connect with users bank accounts.'\n    ),\n  },\n  paypal: {statusPage: 'https://www.paypal-status.com/'},\n  braintree: {statusPage: 'https://status.braintreepayments.com/'},\n  clickup: {\n    statusPage: 'https://clickup.statuspage.io/',\n    faviconLink: 'https://clickup.com/favicon.ico',\n    description: t(\n      'ClickUp is a productivity platform that provides a fundamentally new way to work.'\n    ),\n  },\n  github: {\n    statusPage: 'https://www.githubstatus.com/',\n    faviconLink: 'https://github.com/favicon.ico',\n    description: t(\n      'GitHub is a provider of Internet hosting for software development and version control.'\n    ),\n  },\n  gitlab: {\n    statusPage: 'https://status.gitlab.com/',\n    faviconLink: 'https://gitlab.com/favicon.ico',\n    description: t(\n      'GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking and CI/CD pipeline features.'\n    ),\n  },\n  bitbucket: {\n    statusPage: 'https://bitbucket.status.atlassian.com/',\n    faviconLink: 'https://bitbucket.org/favicon.ico',\n    description: t(\n      'Bitbucket is a web-based version control repository hosting service.'\n    ),\n  },\n  jira: {\n    statusPage: 'https://jira.status.atlassian.com/',\n    faviconLink: 'https://jira.com/favicon.ico',\n    description: t(\n      'Jira is a proprietary issue tracking product developed by Atlassian.'\n    ),\n  },\n  asana: {\n    statusPage: 'https://trust.asana.com/',\n    faviconLink: 'https://asana.com/favicon.ico',\n    description: t(\n      'Asana is a web and mobile application designed to help teams organize, track, and manage their work.'\n    ),\n  },\n  trello: {statusPage: 'https://trello.status.atlassian.com/'},\n  zendesk: {statusPage: 'https://status.zendesk.com/'},\n  intercom: {statusPage: 'https://www.intercomstatus.com/'},\n  freshdesk: {statusPage: 'https://status.freshdesk.com/'},\n  linear: {statusPage: 'https://status.linear.app/'},\n  gaussMoney: {},\n};\n\nexport const INTERNAL_API_REGEX = /\\d\\.\\d|localhost/;\n","import {ReactNode} from 'react';\nimport {Theme, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {useQuery} from '@tanstack/react-query';\nimport {Location} from 'history';\nimport groupBy from 'lodash/groupBy';\nimport orderBy from 'lodash/orderBy';\nimport moment from 'moment';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnHeader,\n} from 'sentry/components/gridEditable';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport {getDuration} from 'sentry/utils/formatters';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport Sparkline from 'sentry/views/starfish/components/sparkline';\nimport {INTERNAL_API_REGEX} from 'sentry/views/starfish/modules/APIModule/constants';\nimport {HOST} from 'sentry/views/starfish/utils/constants';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\n\nimport {getEndpointDomainsQuery, getHostListQuery} from './queries';\n\ntype Props = {\n  location: Location;\n  setDomainFilter: (domain: string) => void;\n};\n\ntype HostTableRow = {\n  duration: Series;\n  failure_rate: Series;\n  host: string;\n  max: number;\n  p50: number;\n  p95: number;\n  p99: number;\n};\n\nconst COLUMN_ORDER = [\n  {\n    key: 'host',\n    name: 'Host',\n    width: COL_WIDTH_UNDEFINED,\n  },\n  {\n    key: 'duration',\n    name: 'Response Time',\n    width: 220,\n  },\n  {\n    key: 'failure_rate',\n    name: 'Failure Rate',\n    width: 220,\n  },\n  {\n    key: 'p50',\n    name: 'P50',\n    width: 200,\n  },\n  {\n    key: 'p95',\n    name: 'P95',\n    width: 200,\n  },\n  {\n    key: 'total_exclusive_time',\n    name: 'Total Exclusive Time',\n    width: 200,\n  },\n];\n\nexport default function HostTable({location, setDomainFilter}: Props) {\n  const pageFilter = usePageFilters();\n  const theme = useTheme();\n  const queryString = getHostListQuery({\n    datetime: pageFilter.selection.datetime,\n  });\n  const aggregateQueryString = getEndpointDomainsQuery({\n    datetime: pageFilter.selection.datetime,\n  });\n\n  const {isLoading: areHostsLoading, data: hostsData} = useQuery({\n    queryKey: ['query', pageFilter.selection.datetime],\n    queryFn: () => fetch(`${HOST}/?query=${queryString}`).then(res => res.json()),\n    retry: false,\n    refetchOnWindowFocus: false,\n    initialData: [],\n  });\n\n  const {isLoading: areHostAggregatesLoading, data: aggregateHostsData} = useQuery({\n    queryKey: ['aggregateQuery', pageFilter.selection.datetime],\n    queryFn: () =>\n      fetch(`${HOST}/?query=${aggregateQueryString}`).then(res => res.json()),\n    retry: false,\n    refetchOnWindowFocus: false,\n    initialData: [],\n  });\n\n  const dataByHost = groupBy(hostsData, 'domain');\n\n  // Filter out localhost and any IP addresses (probably an internal service)\n  const hosts = Object.keys(dataByHost).filter(host => !host.match(INTERNAL_API_REGEX));\n\n  const startDate = moment(orderBy(hostsData, 'interval', 'asc')[0]?.interval);\n  const endDate = moment(orderBy(hostsData, 'interval', 'desc')[0]?.interval);\n\n  let totalTotalExclusiveTime = 0;\n  let totalP50 = 0;\n  let totalP95 = 0;\n\n  const tableData: HostTableRow[] = hosts\n    .map(host => {\n      const durationSeries: Series = zeroFillSeries(\n        {\n          seriesName: host,\n          data: dataByHost[host].map(datum => ({\n            name: datum.interval,\n            value: datum.p99,\n          })),\n        },\n        moment.duration(12, 'hours'),\n        startDate,\n        endDate\n      );\n\n      const failureRateSeries: Series = zeroFillSeries(\n        {\n          seriesName: host,\n          data: dataByHost[host].map(datum => ({\n            name: datum.interval,\n            value: datum.failure_rate,\n          })),\n        },\n        moment.duration(12, 'hours'),\n        startDate,\n        endDate\n      );\n\n      const {\n        'p50(span.self_time)': p50,\n        'p99(span.self_time)': p99,\n        'p95(span.self_time)': p95,\n        'p100(span.self_time)': max,\n        'sum(span.self_time)': total_exclusive_time,\n      } = aggregateHostsData?.find(aggregate => aggregate.domain === host) ?? {};\n\n      totalTotalExclusiveTime += total_exclusive_time;\n      totalP50 += p50;\n      totalP95 += p95;\n\n      return {\n        host,\n        duration: durationSeries,\n        failure_rate: failureRateSeries,\n        p50,\n        p99,\n        p95,\n        max,\n        total_exclusive_time,\n      };\n    })\n    .filter(row => {\n      return row.duration.data.length > 0;\n    })\n    .sort((a, b) => b.total_exclusive_time - a.total_exclusive_time);\n\n  return (\n    <GridEditable\n      isLoading={areHostsLoading || areHostAggregatesLoading}\n      data={tableData}\n      columnOrder={COLUMN_ORDER}\n      columnSortBy={[]}\n      grid={{\n        renderHeadCell,\n        renderBodyCell: (column: GridColumnHeader, row: HostTableRow) =>\n          renderBodyCell({\n            column,\n            row,\n            theme,\n            totalTotalExclusiveTime,\n            totalP50,\n            totalP95,\n            setDomainFilter,\n          }),\n      }}\n      location={location}\n      height={400}\n      scrollable\n      stickyHeader\n    />\n  );\n}\n\nfunction renderHeadCell(column: GridColumnHeader): React.ReactNode {\n  return column.name;\n}\n\nfunction renderBodyCell({\n  column,\n  row,\n  theme,\n  totalTotalExclusiveTime,\n  totalP50,\n  totalP95,\n  setDomainFilter,\n}: {\n  column: GridColumnHeader;\n  row: HostTableRow;\n  setDomainFilter: (domain: string) => void;\n  theme: Theme;\n  totalP50: number;\n  totalP95: number;\n  totalTotalExclusiveTime: number;\n}): React.ReactNode {\n  if (column.key === 'host') {\n    return <a onClick={() => setDomainFilter(row.host)}>{row[column.key]}</a>;\n  }\n\n  if (column.key === 'duration') {\n    const series: Series = row[column.key];\n    if (series) {\n      return <Sparkline color=\"rgb(242, 183, 18)\" series={series} />;\n    }\n\n    return 'Loading';\n  }\n\n  if (column.key === 'failure_rate') {\n    const series: Series = row[column.key];\n    if (series) {\n      return <Sparkline color=\"#ef7061\" series={series} />;\n    }\n\n    return 'Loading';\n  }\n\n  if (column.key === 'total_exclusive_time') {\n    return (\n      <MeterBar\n        minWidth={0.1}\n        meterItems={['total_exclusive_time']}\n        row={row}\n        total={totalTotalExclusiveTime}\n        color={theme.green300}\n      />\n    );\n  }\n\n  if (column.key === 'p50') {\n    return (\n      <MeterBar\n        minWidth={0.1}\n        meterItems={['p50']}\n        row={row}\n        total={totalP50}\n        color={theme.blue300}\n      />\n    );\n  }\n\n  if (column.key === 'p95') {\n    return (\n      <MeterBar\n        minWidth={0.1}\n        meterItems={['p95']}\n        row={row}\n        total={totalP95}\n        color={theme.red300}\n      />\n    );\n  }\n\n  return row[column.key];\n}\n\nexport function MeterBar({\n  minWidth,\n  meterItems,\n  row,\n  total,\n  color,\n  meterText,\n}: {\n  color: string;\n  meterItems: string[];\n  minWidth: number;\n  row: any;\n  total: number;\n  meterText?: ReactNode;\n}) {\n  const widths = [] as number[];\n  meterItems.reduce((acc, item, index) => {\n    const width = Math.max(\n      Math.min(\n        (100 * row[item]) / total - acc,\n        100 - acc - minWidth * (meterItems.length - index)\n      ),\n      minWidth\n    );\n\n    widths.push(width);\n    return acc + width;\n  }, 0);\n  return (\n    <span>\n      <MeterText>\n        {meterText ?? `${getDuration(row[meterItems[0]] / 1000, 0, true, true)}`}\n      </MeterText>\n      <MeterContainer width={100}>\n        <Meter width={widths[0]} color={color} />\n      </MeterContainer>\n    </span>\n  );\n}\n\nconst MeterContainer = styled('span')<{width: number}>`\n  display: flex;\n  width: ${p => p.width}%;\n  height: ${space(1)};\n  background-color: ${p => p.theme.gray100};\n  margin-bottom: 4px;\n`;\n\nconst Meter = styled('span')<{\n  color: string;\n  width: number;\n}>`\n  display: block;\n  width: ${p => p.width}%;\n  height: 100%;\n  background-color: ${p => p.color};\n`;\nconst MeterText = styled('span')`\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  color: ${p => p.theme.gray300};\n  white-space: nowrap;\n`;\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {useQuery} from '@tanstack/react-query';\n\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport {IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {\n  ERROR_CODE_DESCRIPTIONS,\n  EXTERNAL_APIS,\n} from 'sentry/views/starfish/modules/APIModule/constants';\nimport {MeterBar} from 'sentry/views/starfish/modules/APIModule/hostTable';\nimport {\n  getHostStatusBreakdownEventView,\n  getHostStatusBreakdownQuery,\n} from 'sentry/views/starfish/modules/APIModule/queries';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\n\ntype Props = {\n  host: string;\n};\n\nexport function HostDetails({host}: Props) {\n  const theme = useTheme();\n  const pageFilter = usePageFilters();\n  const {isLoading: isStatusBreakdownLoading, data: statusBreakdown} = useSpansQuery({\n    queryString: getHostStatusBreakdownQuery({\n      domain: host,\n      datetime: pageFilter.selection.datetime,\n    }),\n    eventView: getHostStatusBreakdownEventView({\n      domain: host,\n      datetime: pageFilter.selection.datetime,\n    }),\n    initialData: [],\n  });\n\n  const hostMarketingName = Object.keys(EXTERNAL_APIS).find(key => host.includes(key));\n\n  const failures = statusBreakdown?.filter((item: any) => item.status > 299);\n  const successes = statusBreakdown?.filter((item: any) => item.status < 300);\n  const totalCount = statusBreakdown?.reduce(\n    (acc: number, item: any) => acc + item.count,\n    0\n  );\n\n  const externalApi = hostMarketingName && EXTERNAL_APIS[hostMarketingName];\n\n  const {isLoading: isStatusLoading, data: statusData} = useQuery({\n    queryKey: ['domain-status', host],\n    queryFn: () =>\n      fetch(`${externalApi?.statusPage}?format=json`).then(res => res.json()),\n    retry: false,\n    refetchOnWindowFocus: false,\n    initialData: {},\n    enabled: !!externalApi,\n  });\n\n  return (\n    <DetailsContainer>\n      <FlexContainer>\n        {externalApi?.faviconLink && (\n          <img\n            src={externalApi.faviconLink}\n            width=\"16\"\n            height=\"16\"\n            style={{marginRight: space(1)}}\n          />\n        )}\n\n        {hostMarketingName ? (\n          <span>\n            <Host>{hostMarketingName}</Host>\n            <span>{` (${host})`}</span>\n          </span>\n        ) : (\n          <Host>{host}</Host>\n        )}\n\n        {!isStatusLoading && statusData.status ? (\n          <StatusText>\n            <CircleIndicator size={8} enabled={statusData.status.indicator === 'none'} />{' '}\n            {statusData.status.description}\n          </StatusText>\n        ) : null}\n\n        <LinkContainer>\n          {externalApi?.statusPage && (\n            <a href={externalApi.statusPage} target=\"_blank\" rel=\"noreferrer\">\n              {t('Status')}\n              <StyledIconOpen size=\"xs\" />\n            </a>\n          )}\n        </LinkContainer>\n      </FlexContainer>\n      <ExternalApiDescription>{externalApi?.description}</ExternalApiDescription>\n      <StatusContainer>\n        {isStatusBreakdownLoading\n          ? null\n          : failures?.map((item: any) => {\n              const errorCodeDescription = ERROR_CODE_DESCRIPTIONS[item.status];\n              return (\n                <MeterBarContainer key={item.status}>\n                  <MeterBar\n                    color={theme.red300}\n                    meterItems={['count']}\n                    minWidth={0.1}\n                    row={item}\n                    total={totalCount}\n                    meterText={\n                      <Failure>{`${item.status}${\n                        errorCodeDescription ? ` ${errorCodeDescription}` : ''\n                      } (${item.count})`}</Failure>\n                    }\n                  />\n                </MeterBarContainer>\n              );\n            })}\n        {isStatusBreakdownLoading\n          ? null\n          : successes?.map((item: any) => (\n              <MeterBarContainer key={item.status}>\n                <MeterBar\n                  color={theme.green300}\n                  meterItems={['count']}\n                  minWidth={0.1}\n                  row={item}\n                  total={totalCount}\n                  meterText={`${item.status} (${item.count})`}\n                />\n              </MeterBarContainer>\n            ))}\n      </StatusContainer>\n    </DetailsContainer>\n  );\n}\n\nconst DetailsContainer = styled('div')`\n  padding: ${space(2)};\n  border-radius: ${p => p.theme.borderRadius};\n  border: 1px solid ${p => p.theme.border};\n  margin-bottom: ${space(2)};\n`;\n\nconst FlexContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Host = styled('span')`\n  font-weight: bold;\n`;\n\nconst StatusText = styled('span')`\n  margin-left: ${space(2)};\n`;\n\nconst StyledIconOpen = styled(IconOpen)`\n  flex: 0;\n  top: 2px;\n  position: relative;\n  margin-left: ${space(0.5)};\n`;\n\nconst LinkContainer = styled('span')`\n  flex: 1;\n  text-align: right;\n`;\n\nconst StatusContainer = styled('span')`\n  margin-top: ${space(1)};\n  flex: 1;\n  height: 20px;\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n`;\n\nconst MeterBarContainer = styled('div')`\n  width: 150px;\n  top: -6px;\n  position: relative;\n`;\n\nconst Failure = styled('span')`\n  font-weight: bold;\n  color: ${p => p.theme.red300};\n`;\n\nconst ExternalApiDescription = styled('span')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.gray300};\n`;\n","import {Fragment, useRef, useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Series} from 'sentry/types/echarts';\nimport {useApiQuery} from 'sentry/utils/queryClient';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport Chart, {useSynchronizeCharts} from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {INTERNAL_API_REGEX} from 'sentry/views/starfish/modules/APIModule/constants';\nimport {HostDetails} from 'sentry/views/starfish/modules/APIModule/hostDetails';\nimport {queryToSeries} from 'sentry/views/starfish/modules/databaseModule/utils';\nimport {PERIOD_REGEX} from 'sentry/views/starfish/utils/dates';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {zeroFillSeries} from 'sentry/views/starfish/utils/zeroFillSeries';\nimport {EndpointDataRow} from 'sentry/views/starfish/views/endpointDetails';\n\nimport EndpointTable from './endpointTable';\nimport HostTable from './hostTable';\nimport {\n  getEndpointDomainsEventView,\n  getEndpointDomainsQuery,\n  getEndpointGraphEventView,\n  getEndpointGraphQuery,\n  useGetTransactionsForHosts,\n} from './queries';\n\nconst HTTP_ACTION_OPTIONS = [\n  {value: '', label: 'All'},\n  ...['GET', 'POST', 'PUT', 'DELETE'].map(action => ({\n    value: action,\n    label: action,\n  })),\n];\n\ntype Props = {\n  location: Location;\n  onSelect: (row: EndpointDataRow) => void;\n};\n\nexport type DataRow = {\n  count: number;\n  description: string;\n  domain: string;\n};\n\nexport default function APIModuleView({location, onSelect}: Props) {\n  const themes = useTheme();\n  const pageFilter = usePageFilters();\n  const [state, setState] = useState<{\n    action: string;\n    domain: string;\n    transaction: string;\n  }>({\n    action: '',\n    domain: '',\n    transaction: '',\n  });\n  const endpointTableRef = useRef<HTMLInputElement>(null);\n  const organization = useOrganization();\n\n  const endpointsDomainEventView = getEndpointDomainsEventView({\n    datetime: pageFilter.selection.datetime,\n  });\n  const endpointsDomainQuery = getEndpointDomainsQuery({\n    datetime: pageFilter.selection.datetime,\n  });\n\n  const {selection} = pageFilter;\n  const {projects, environments, datetime} = selection;\n\n  useApiQuery<null>(\n    [\n      `/organizations/${organization.slug}/events-starfish/`,\n      {\n        query: {\n          ...{\n            environment: environments,\n            project: projects.map(proj => String(proj)),\n          },\n          ...normalizeDateTimeParams(datetime),\n        },\n      },\n    ],\n    {\n      staleTime: 10,\n    }\n  );\n\n  const {isLoading: _isDomainsLoading, data: domains} = useSpansQuery({\n    eventView: endpointsDomainEventView,\n    queryString: endpointsDomainQuery,\n    initialData: [],\n  });\n\n  const endpointsGraphEventView = getEndpointGraphEventView({\n    datetime: pageFilter.selection.datetime,\n  });\n\n  const {isLoading: isGraphLoading, data: graphData} = useSpansQuery({\n    eventView: endpointsGraphEventView,\n    queryString: getEndpointGraphQuery({\n      datetime: pageFilter.selection.datetime,\n    }),\n    initialData: [],\n  });\n\n  const quantiles = [\n    'p50(span.self_time)',\n    'p75(span.self_time)',\n    'p95(span.self_time)',\n    'p99(span.self_time)',\n  ];\n\n  const seriesByQuantile: {[quantile: string]: Series} = {};\n  quantiles.forEach(quantile => {\n    seriesByQuantile[quantile] = {\n      seriesName: quantile,\n      data: [],\n    };\n  });\n  const countSeries: Series = {\n    seriesName: 'count',\n    data: [],\n  };\n  const failureRateSeries: Series = {\n    seriesName: 'failure_rate',\n    data: [],\n  };\n\n  graphData.forEach(datum => {\n    quantiles.forEach(quantile => {\n      seriesByQuantile[quantile].data.push({\n        value: datum[quantile],\n        name: datum.interval,\n      });\n    });\n    countSeries.data.push({\n      value: datum['count()'],\n      name: datum.interval,\n    });\n    failureRateSeries.data.push({\n      value: datum['failure_rate()'],\n      name: datum.interval,\n    });\n  });\n\n  const [_, num, unit] = pageFilter.selection.datetime.period?.match(PERIOD_REGEX) ?? [];\n  const startTime =\n    num && unit\n      ? moment().subtract(num, unit as 'h' | 'd')\n      : moment(pageFilter.selection.datetime.start);\n  const endTime = moment(pageFilter.selection.datetime.end ?? undefined);\n  const [zeroFilledQuantiles, zeroFilledCounts, zeroFilledFailureRate] = [\n    seriesByQuantile,\n    [countSeries],\n    [failureRateSeries],\n  ].map(seriesGroup =>\n    Object.values(seriesGroup).map(series =>\n      zeroFillSeries(series, moment.duration(12, 'hours'), startTime, endTime)\n    )\n  );\n\n  const setAction = (action: string) => {\n    setState({\n      ...state,\n      action,\n    });\n  };\n\n  const setDomain = (domain: string) => {\n    setState({\n      ...state,\n      domain,\n    });\n  };\n  const domainOptions = [\n    {value: '', label: 'All'},\n    ...domains\n      .filter(({domain}) => domain !== '')\n      .map(({domain}) => ({\n        value: domain,\n        label: domain,\n      })),\n  ];\n\n  const interval = getInterval(pageFilter.selection.datetime, 'low');\n  const {isLoading: isTopTransactionDataLoading, data: topTransactionsData} =\n    useGetTransactionsForHosts(\n      domains\n        .map(({domain}) => domain)\n        .filter(domain => !domain.match(INTERNAL_API_REGEX)),\n      interval\n    );\n\n  const tpmTransactionSeries = queryToSeries(topTransactionsData, 'group', 'epm()');\n\n  const p75TransactionSeries = queryToSeries(\n    topTransactionsData,\n    'group',\n    'p75(transaction.duration)'\n  );\n\n  useSynchronizeCharts([!isGraphLoading]);\n\n  return (\n    <Fragment>\n      <FilterOptionsContainer>\n        <CompactSelect\n          triggerProps={{prefix: t('Service')}}\n          value=\"project\"\n          options={[{value: 'project', label: 'Project'}]}\n          onChange={() => void 0}\n        />\n        <DatePageFilter alignDropdown=\"left\" />\n      </FilterOptionsContainer>\n      <ChartsContainer>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Top Transactions Throughput')}>\n            <APIModuleChart\n              data={tpmTransactionSeries}\n              loading={isTopTransactionDataLoading}\n            />\n          </ChartPanel>\n        </ChartsContainerItem>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Top Transactions p75')}>\n            <APIModuleChart\n              data={p75TransactionSeries}\n              loading={isTopTransactionDataLoading}\n            />\n          </ChartPanel>\n        </ChartsContainerItem>\n      </ChartsContainer>\n      <ChartsContainer>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Throughput')}>\n            <APIModuleChart data={zeroFilledCounts} loading={isGraphLoading} />\n          </ChartPanel>\n        </ChartsContainerItem>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Response Time')}>\n            <APIModuleChart data={zeroFilledQuantiles} loading={isGraphLoading} />\n          </ChartPanel>\n        </ChartsContainerItem>\n        <ChartsContainerItem>\n          <ChartPanel title={t('Error Rate')}>\n            <APIModuleChart\n              data={zeroFilledFailureRate}\n              loading={isGraphLoading}\n              chartColors={[themes.charts.getColorPalette(2)[2]]}\n            />\n          </ChartPanel>\n        </ChartsContainerItem>\n      </ChartsContainer>\n      <HostTable\n        location={location}\n        setDomainFilter={domain => {\n          setDomain(domain);\n          // TODO: Cheap way to scroll to the endpoints table without waiting for async request\n          setTimeout(() => {\n            endpointTableRef.current?.scrollIntoView({\n              behavior: 'smooth',\n              inline: 'start',\n            });\n          }, 200);\n        }}\n      />\n      <FilterOptionsContainer>\n        <CompactSelect\n          triggerProps={{prefix: t('Operation')}}\n          value={state.action}\n          options={HTTP_ACTION_OPTIONS}\n          onChange={({value}) => setAction(value)}\n        />\n        <CompactSelect\n          triggerProps={{prefix: t('Domain')}}\n          value={state.domain}\n          options={domainOptions}\n          onChange={({value}) => setDomain(value)}\n        />\n      </FilterOptionsContainer>\n\n      <div ref={endpointTableRef}>\n        {state.domain && <HostDetails host={state.domain} />}\n        <EndpointTable\n          location={location}\n          onSelect={onSelect}\n          filterOptions={{...state, datetime: pageFilter.selection.datetime}}\n        />\n      </div>\n    </Fragment>\n  );\n}\n\nfunction APIModuleChart({\n  data,\n  loading,\n  chartColors,\n}: {\n  data: Series[];\n  loading: boolean;\n  chartColors?: string[];\n}) {\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={140}\n      data={data}\n      start=\"\"\n      end=\"\"\n      loading={loading}\n      utc={false}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '0',\n      }}\n      definedAxisTicks={4}\n      stacked\n      isLineChart\n      chartColors={chartColors}\n      disableXAxis\n    />\n  );\n}\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 1;\n`;\n\nconst FilterOptionsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n","import {useState} from 'react';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {t} from 'sentry/locale';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\nimport {EndpointDataRow} from 'sentry/views/starfish/views/endpointDetails';\nimport {SpanSummaryPanel} from 'sentry/views/starfish/views/spans/spanSummaryPanel';\n\nimport APIModuleView from './APIModuleView';\n\ntype APIModuleState = {\n  selectedRow?: EndpointDataRow;\n};\n\ntype Props = {\n  location: Location;\n};\n\nexport default function APIModule(props: Props) {\n  const [state, setState] = useState<APIModuleState>({selectedRow: undefined});\n  const unsetSelectedSpanGroup = () => setState({selectedRow: undefined});\n  const {selectedRow} = state;\n  const setSelectedRow = (row: EndpointDataRow) => setState({selectedRow: row});\n  return (\n    <Layout.Page>\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>{t('API')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <PageErrorAlert />\n            <PageFiltersContainer>\n              <APIModuleView {...props} onSelect={setSelectedRow} />\n              <SpanSummaryPanel\n                span={{\n                  ...selectedRow,\n                  span_operation: 'http.client',\n                  group_id: selectedRow?.group_id || '',\n                }}\n                onClose={unsetSelectedSpanGroup}\n              />\n              ;\n            </PageFiltersContainer>\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </Layout.Page>\n  );\n}\n"],"names":["ERROR_CODE_DESCRIPTIONS","EXTERNAL_APIS","stripe","statusPage","faviconLink","description","t","twilio","sendgrid","plaid","paypal","braintree","clickup","github","gitlab","bitbucket","jira","asana","trello","zendesk","intercom","freshdesk","linear","gaussMoney","INTERNAL_API_REGEX","COLUMN_ORDER","key","name","width","COL_WIDTH_UNDEFINED","HostTable","_ref","location","setDomainFilter","pageFilter","usePageFilters","theme","useTheme","queryString","getHostListQuery","datetime","selection","aggregateQueryString","getEndpointDomainsQuery","isLoading","areHostsLoading","data","hostsData","useQuery","queryKey","queryFn","fetch","HOST","then","res","json","retry","refetchOnWindowFocus","initialData","areHostAggregatesLoading","aggregateHostsData","dataByHost","groupBy","hosts","Object","keys","filter","host","match","startDate","moment","orderBy","interval","endDate","totalTotalExclusiveTime","totalP50","totalP95","tableData","map","durationSeries","zeroFillSeries","seriesName","datum","value","p99","failureRateSeries","failure_rate","p50","p95","max","total_exclusive_time","find","aggregate","domain","duration","row","length","sort","a","b","_jsx","GridEditable","columnOrder","columnSortBy","grid","renderHeadCell","renderBodyCell","column","_ref2","onClick","children","series","Sparkline","color","MeterBar","minWidth","meterItems","total","green300","blue300","red300","height","scrollable","stickyHeader","_ref3","meterText","widths","reduce","acc","item","index","Math","min","push","_jsxs","MeterText","getDuration","MeterContainer","Meter","displayName","_styled","target","p","space","gray100","fontSizeExtraSmall","gray300","HostDetails","isStatusBreakdownLoading","statusBreakdown","useSpansQuery","getHostStatusBreakdownQuery","eventView","getHostStatusBreakdownEventView","hostMarketingName","includes","failures","status","successes","totalCount","count","externalApi","isStatusLoading","statusData","enabled","DetailsContainer","FlexContainer","src","style","marginRight","Host","StatusText","CircleIndicator","size","indicator","LinkContainer","href","rel","StyledIconOpen","ExternalApiDescription","StatusContainer","errorCodeDescription","MeterBarContainer","Failure","borderRadius","border","styles","IconOpen","fontSizeSmall","HTTP_ACTION_OPTIONS","label","action","APIModuleView","onSelect","themes","state","setState","useState","transaction","endpointTableRef","useRef","organization","useOrganization","endpointsDomainEventView","getEndpointDomainsEventView","endpointsDomainQuery","projects","environments","useApiQuery","slug","query","environment","project","proj","String","normalizeDateTimeParams","staleTime","_isDomainsLoading","domains","endpointsGraphEventView","getEndpointGraphEventView","isGraphLoading","graphData","getEndpointGraphQuery","quantiles","seriesByQuantile","forEach","quantile","countSeries","_","num","unit","period","PERIOD_REGEX","startTime","subtract","start","endTime","end","undefined","zeroFilledQuantiles","zeroFilledCounts","zeroFilledFailureRate","seriesGroup","values","setDomain","domainOptions","getInterval","isTopTransactionDataLoading","topTransactionsData","useGetTransactionsForHosts","_ref4","tpmTransactionSeries","queryToSeries","p75TransactionSeries","useSynchronizeCharts","Fragment","FilterOptionsContainer","CompactSelect","triggerProps","prefix","options","onChange","DatePageFilter","alignDropdown","ChartsContainer","ChartsContainerItem","ChartPanel","title","APIModuleChart","loading","chartColors","charts","getColorPalette","setTimeout","current","scrollIntoView","behavior","inline","_ref5","_ref6","ref","EndpointTable","filterOptions","_ref7","Chart","statsPeriod","utc","left","right","top","bottom","definedAxisTicks","stacked","isLineChart","disableXAxis","APIModule","props","selectedRow","Layout","PageErrorProvider","fullWidth","PageErrorAlert","PageFiltersContainer","SpanSummaryPanel","span","span_operation","group_id","onClose","unsetSelectedSpanGroup"],"sourceRoot":""}