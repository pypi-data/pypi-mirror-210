{"version":3,"file":"chunks/app_views_alerts_incidentRedirect_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/alerts/incidentRedirect.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/apiCalls.tsx","webpack:///./app/views/alerts/utils/index.tsx"],"sourcesContent":["import {LegendComponentOption} from 'echarts';\n\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {defined, formatBytesBase2} from 'sentry/utils';\nimport {AggregationOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(\n  value: number | null,\n  outputType: AggregationOutputType = 'number'\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  return tooltipFormatterUsingAggregateOutputType(value, outputType);\n}\n\n/**\n * Formatter for chart tooltips that takes the aggregate output type directly\n */\nexport function tooltipFormatterUsingAggregateOutputType(\n  value: number | null,\n  type: string\n): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    case 'size':\n      return formatBytesBase2(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  outputType: AggregationOutputType,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  return axisLabelFormatterUsingAggregateOutputType(\n    value,\n    outputType,\n    abbreviation,\n    durationUnit\n  );\n}\n\n/**\n * Formatter for chart axis labels that takes the aggregate output type directly\n */\nexport function axisLabelFormatterUsingAggregateOutputType(\n  value: number,\n  type: string,\n  abbreviation: boolean = false,\n  durationUnit?: number\n): string {\n  switch (type) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value, durationUnit);\n    case 'size':\n      return formatBytesBase2(value, 0);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number, durationUnit?: number): string {\n  durationUnit ??= categorizeDuration(value);\n  if (value === 0) {\n    return '0';\n  }\n  switch (durationUnit) {\n    case WEEK: {\n      const label = (value / WEEK).toFixed(0);\n      return t('%swk', label);\n    }\n    case DAY: {\n      const label = (value / DAY).toFixed(0);\n      return t('%sd', label);\n    }\n    case HOUR: {\n      const label = (value / HOUR).toFixed(0);\n      return t('%shr', label);\n    }\n    case MINUTE: {\n      const label = (value / MINUTE).toFixed(0);\n      return t('%smin', label);\n    }\n    case SECOND: {\n      const label = (value / SECOND).toFixed(0);\n      return t('%ss', label);\n    }\n    default:\n      const label = value.toFixed(0);\n      return t('%sms', label);\n  }\n}\n\n/**\n * Given an array of series and an eCharts legend object,\n * finds the range of y values (min and max) based on which series is selected in the legend\n * Assumes series[0] > series[1] > ...\n * @param series Array of eCharts series\n * @param legend eCharts legend object\n * @returns\n */\nexport function findRangeOfMultiSeries(series: Series[], legend?: LegendComponentOption) {\n  let range: {max: number; min: number} | undefined;\n  if (series[0]?.data) {\n    let minSeries = series[0];\n    let maxSeries;\n    series.forEach(({seriesName, data}, idx) => {\n      if (legend?.selected?.[seriesName] !== false && data.length) {\n        minSeries = series[idx];\n        maxSeries ??= series[idx];\n      }\n    });\n    if (maxSeries?.data) {\n      const max = Math.max(\n        ...maxSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      const min = Math.min(\n        ...minSeries.data.map(({value}) => value).filter(value => !!value)\n      );\n      range = {max, min};\n    }\n  }\n  return range;\n}\n\n/**\n * Given a eCharts series and legend, returns the unit to be used on the yAxis for a duration chart\n * @param series eCharts series array\n * @param legend eCharts legend object\n * @returns\n */\nexport function getDurationUnit(\n  series: Series[],\n  legend?: LegendComponentOption\n): number {\n  let durationUnit = 0;\n  const range = findRangeOfMultiSeries(series, legend);\n  if (range) {\n    const avg = (range.max + range.min) / 2;\n    durationUnit = categorizeDuration((range.max - range.min) / 5); // avg of 5 yAxis ticks per chart\n\n    const numOfDigits = (avg / durationUnit).toFixed(0).length;\n    if (numOfDigits > 6) {\n      durationUnit = categorizeDuration(avg);\n    }\n  }\n  return durationUnit;\n}\n\n/**\n * Categorizes the duration by Second, Minute, Hour, etc\n * Ex) categorizeDuration(1200) = MINUTE\n * @param value Duration in ms\n */\nexport function categorizeDuration(value): number {\n  if (value >= WEEK) {\n    return WEEK;\n  }\n  if (value >= DAY) {\n    return DAY;\n  }\n  if (value >= HOUR) {\n    return HOUR;\n  }\n  if (value >= MINUTE) {\n    return MINUTE;\n  }\n  if (value >= SECOND) {\n    return SECOND;\n  }\n  return 1;\n}\n","import {useCallback, useEffect, useState} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport useApi from 'sentry/utils/useApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\nimport {fetchIncident} from './utils/apiCalls';\nimport {alertDetailsLink} from './utils';\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{alertId: string}, {}>;\n\n/**\n * Reirects from an incident to the incident's metric alert details page\n */\nfunction IncidentRedirect({organization, params}: Props) {\n  const api = useApi();\n  const [hasError, setHasError] = useState(false);\n\n  const track = useCallback(() => {\n    trackAnalytics('alert_details.viewed', {\n      organization,\n      alert_id: parseInt(params.alertId, 10),\n    });\n  }, [organization, params.alertId]);\n\n  const fetchData = useCallback(async () => {\n    setHasError(false);\n\n    try {\n      const incident = await fetchIncident(api, organization.slug, params.alertId);\n      browserHistory.replace(\n        normalizeUrl({\n          pathname: alertDetailsLink(organization, incident),\n          query: {alert: incident.identifier},\n        })\n      );\n    } catch (err) {\n      setHasError(true);\n    }\n  }, [setHasError, api, params.alertId, organization]);\n\n  useEffect(() => {\n    fetchData();\n    track();\n  }, [fetchData, track]);\n\n  if (hasError) {\n    return <LoadingError onRetry={fetchData} />;\n  }\n\n  return <LoadingIndicator />;\n}\n\nexport default IncidentRedirect;\n","import {t} from 'sentry/locale';\nimport {MEPAlertsQueryType} from 'sentry/views/alerts/wizard/options';\nimport type {SchemaFormConfig} from 'sentry/views/settings/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n  PERCENT = 'percent',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  /** Also used for performance alerts **/\n  GENERIC_METRICS = 'generic_metrics',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n  queryType?: MEPAlertsQueryType | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import {Client} from 'sentry/api';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\nimport type {Incident} from '../types';\n\n// Use this api for requests that are getting cancelled\nconst uncancellableApi = new Client();\n\nexport function fetchAlertRule(\n  orgId: string,\n  ruleId: string,\n  query?: Record<string, string>\n): Promise<MetricRule> {\n  return uncancellableApi.requestPromise(\n    `/organizations/${orgId}/alert-rules/${ruleId}/`,\n    {query}\n  );\n}\n\nexport function fetchIncidentsForRule(\n  orgId: string,\n  alertRule: string,\n  start: string,\n  end: string\n): Promise<Incident[]> {\n  return uncancellableApi.requestPromise(`/organizations/${orgId}/incidents/`, {\n    query: {\n      project: '-1',\n      alertRule,\n      includeSnapshots: true,\n      start,\n      end,\n      expand: ['activities', 'seen_by', 'original_alert_rule'],\n    },\n  });\n}\n\nexport function fetchIncident(\n  api: Client,\n  orgId: string,\n  alertId: string\n): Promise<Incident> {\n  return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/`);\n}\n","import round from 'lodash/round';\n\nimport {t} from 'sentry/locale';\nimport {Organization, SessionFieldWithOperation} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport toArray from 'sentry/utils/toArray';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  MetricRule,\n  SavedMetricRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertRuleStatus, Incident, IncidentStats} from '../types';\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedMetricRule | MetricRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions and generic_metrics only have one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS || dataset === Dataset.GENERIC_METRICS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionFieldWithOperation.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionFieldWithOperation.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, aggregateOutputType(seriesName));\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, aggregateOutputType(seriesName));\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n\nexport function alertDetailsLink(organization: Organization, incident: Incident) {\n  return `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n}\n\n/**\n * Noramlizes a status string\n */\nexport function getQueryStatus(status: string | string[]): string {\n  if (Array.isArray(status) || status === '') {\n    return 'all';\n  }\n\n  return ['open', 'closed'].includes(status) ? status : 'all';\n}\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\n/**\n * Noramlize a team slug from the query\n */\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  return toArray(team);\n}\n"],"names":["tooltipFormatter","value","outputType","arguments","length","undefined","defined","type","toLocaleString","formatPercentage","getDuration","formatBytesBase2","toString","tooltipFormatterUsingAggregateOutputType","axisLabelFormatter","axisLabelFormatterUsingAggregateOutputType","abbreviation","durationUnit","formatAbbreviatedNumber","categorizeDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","axisDuration","getDurationUnit","series","legend","range","data","maxSeries","minSeries","forEach","_ref","idx","seriesName","selected","max","Math","map","_ref2","filter","min","_ref3","findRangeOfMultiSeries","avg","IncidentRedirect","organization","params","api","useApi","hasError","setHasError","useState","track","useCallback","trackAnalytics","alert_id","parseInt","alertId","fetchData","async","incident","fetchIncident","slug","browserHistory","normalizeUrl","pathname","alertDetailsLink","query","alert","identifier","err","useEffect","_jsx","LoadingError","onRetry","LoadingIndicator","displayName","AlertRuleThresholdType","AlertRuleTriggerType","AlertRuleComparisonType","Dataset","EventTypes","Datasource","SessionsAggregate","TimePeriod","TimeWindow","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","AlertRuleType","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus","CombinedAlertType","uncancellableApi","Client","fetchAlertRule","orgId","ruleId","requestPromise","fetchIncidentsForRule","alertRule","start","end","project","includeSnapshots","expand","isIssueAlert","hasOwnProperty","DATA_SOURCE_LABELS","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","dataset","eventTypes","convertDatasetEventTypesToSource","includes","getQueryDatasource","match","slice","sort","join","source","replace","trim","toUpperCase","isSessionAggregate","aggregate","Object","values","SESSION_AGGREGATE_TO_FIELD","SessionFieldWithOperation","alertAxisFormatter","round","aggregateOutputType","alertTooltipValueFormatter","ALERT_CHART_MIN_MAX_BUFFER","shouldScaleAlertChart","status","originalAlertRuleId","id","getQueryStatus","Array","isArray","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","team","toArray"],"sourceRoot":""}