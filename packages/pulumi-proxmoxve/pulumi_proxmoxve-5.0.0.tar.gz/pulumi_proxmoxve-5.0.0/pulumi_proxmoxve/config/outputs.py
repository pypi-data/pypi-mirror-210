# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'Ssh',
    'VirtualEnvironment',
    'VirtualEnvironmentSsh',
]

@pulumi.output_type
class Ssh(dict):
    def __init__(__self__, *,
                 agent: Optional[bool] = None,
                 agent_socket: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if agent_socket is not None:
            pulumi.set(__self__, "agent_socket", agent_socket)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter(name="agentSocket")
    def agent_socket(self) -> Optional[str]:
        return pulumi.get(self, "agent_socket")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class VirtualEnvironment(dict):
    def __init__(__self__, *,
                 endpoint: Optional[str] = None,
                 insecure: Optional[bool] = None,
                 otp: Optional[str] = None,
                 password: Optional[str] = None,
                 ssh: Optional['outputs.VirtualEnvironmentSsh'] = None,
                 username: Optional[str] = None):
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if otp is not None:
            pulumi.set(__self__, "otp", otp)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def insecure(self) -> Optional[bool]:
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def otp(self) -> Optional[str]:
        return pulumi.get(self, "otp")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def ssh(self) -> Optional['outputs.VirtualEnvironmentSsh']:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class VirtualEnvironmentSsh(dict):
    def __init__(__self__, *,
                 agent: Optional[bool] = None,
                 agent_socket: Optional[str] = None,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if agent_socket is not None:
            pulumi.set(__self__, "agent_socket", agent_socket)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter(name="agentSocket")
    def agent_socket(self) -> Optional[str]:
        return pulumi.get(self, "agent_socket")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


