# Copyright 2023 BentoML Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations

import ast
import logging
import typing as t
from pathlib import Path

import astor

if t.TYPE_CHECKING:
    from fs.base import FS

logger = logging.getLogger(__name__)


def write_service(model_name: str, target_path: str, llm_fs: FS):
    logger.debug("Generating service for %s to %s", model_name, target_path)
    service_file = Path(__file__).parent.parent / "_service.py"
    with open(service_file.__fspath__(), "rb") as f:
        node = ast.parse(f.read())
    generator = ServiceGenerator(model_name)
    generator.visit(node)
    llm_fs.writetext(
        target_path, f"# GENERATED BY 'openllm bundle {model_name}'. DO NOT EDIT\n" + "".join(generator.result)
    )


class ServiceGenerator(astor.SourceGenerator):
    def __init__(self, model_name: str, indent_width: str | None = None):
        self.model_name = model_name
        if indent_width is None:
            indent_width = " " * 4
        super().__init__(indent_width)

    def visit_Assign(self, node: ast.Assign):
        self.newline(node)

        # we need to handle the value assignment for model name, "{__model_name__}"
        # The first iteration is heuristic, as we will loop through all of the call args, which could be very slow.
        # only parse os.environ.get
        try:
            if (
                isinstance(node.value, ast.Call)
                and isinstance(node.value.func, ast.Attribute)
                and node.value.func.attr == "get"
            ):
                if isinstance(node.value.func.value, ast.Attribute) and node.value.func.value.attr == "environ":
                    if isinstance(node.value.func.value.value, ast.Name) and node.value.func.value.value.id == "os":
                        # right now, the last arg is the default value
                        arg = node.value.args[-1]
                        if not isinstance(arg, ast.Constant):
                            pass
                        else:
                            string_value = arg.value.format(__model_name__=self.model_name)
                            node.value.args[-1] = ast.Constant(value=string_value)
            else:
                pass
        except AttributeError as err:
            logger.error(f"Error parsing os.environ.get: {err}")

        # Finally, actually write the assignment
        for idx, target in enumerate(node.targets):
            if idx:
                self.write(", ")
            self.visit(target)
        self.write(" = ")
        self.visit(node.value)
