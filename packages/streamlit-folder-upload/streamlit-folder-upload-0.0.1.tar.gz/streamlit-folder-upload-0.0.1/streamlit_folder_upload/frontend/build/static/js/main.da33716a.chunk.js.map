{"version":3,"sources":["Elements.tsx","UploadUtils.tsx","FolderUploadField.tsx","index.tsx"],"names":["listContainerStyle","maxHeight","height","width","overflow","marginTop","backgroundColor","borderWidth","borderStyle","borderColor","borderRadius","padding","listStyle","listStyleType","listItemStyle","marginBottom","display","alignItems","justifyContent","progressBarStyle","progressFillStyle","checkmarkStyle","color","fontSize","inputLabelStyle","cursor","margin","componentWrapperStyle","sendFile","websocket","files","index","chunk_size","update_fn","length","close","file","instance_name","webkitRelativePath","split","send","JSON","stringify","file_name","name","position","onmessage","evt","data","size","chunk","slice","uploadChunk","FolderUploadField","_StreamlitComponentBa","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","websocket_url","websocket_query","render","state","instance_list","upload_status","_jsx","style","children","_jsxs","Button","webkitdirectory","className","id","type","hidden","onChange","folderInput","htmlFor","map","item","progress","_objectSpread","concat","onClick","folderUpload","file_list","bind","_assertThisInitialized","updateInstanceProgress","args","_createClass","key","value","event","target","this","setState","_loop","i","filter","push","total_size","uploaded_size","instance","indexOf","Streamlit","setComponentValue","_this2","WebSocket","onopen","onclose","instance_index","findIndex","StreamlitComponentBase","withStreamlitConnection","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da33716a.chunk.js","sourcesContent":["\nconst listContainerStyle = {\n    maxHeight: '300px',\n    height: \"100%\",\n    width: '100%',\n    overflow: 'auto',\n    marginTop: '0.5em',\n    backgroundColor: \"rgb(255, 255, 255)\",\n    borderWidth: '1px',\n    borderStyle: 'solid',\n    borderColor: 'lightgrey',\n    borderRadius: '4px',\n    padding: '0.5em',\n};\n\nconst listStyle = {\n    listStyleType: 'disc',\n};\n\nconst listItemStyle = {\n    marginBottom: '0.5em',\n    listStyleType: 'none',\n    backgroundColor: '#f5f5f5',\n    padding: '0.5em',\n    borderRadius: '4px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n};\n\nconst progressBarStyle = {\n    marginTop: '0.2em',\n    width: '100px',\n    height: '8px',\n    backgroundColor: '#e0e0e0',\n    borderRadius: '4px',\n};\n\nconst progressFillStyle = {\n    height: '100%',\n    backgroundColor: '#1e88e5',\n    borderRadius: '4px',\n};\n\nconst checkmarkStyle = {\n    color: 'green',\n    fontSize: '1.2em',\n};\n\nconst inputLabelStyle = {\n    cursor: \"pointer\",\n    width: \"100%\",\n    height: \"100%\",\n    margin: \"auto\",\n}\n\nconst componentWrapperStyle = {\n    width: \"100%\",\n    padding: \"1em\",\n    backgroundColor: \"rgb(240, 242, 246)\",\n    borderRadius: '4px',\n}\n\nexport { componentWrapperStyle, inputLabelStyle, listContainerStyle, listStyle, listItemStyle, progressBarStyle, progressFillStyle, checkmarkStyle }","function uploadChunk(websocket: WebSocket, file: File, position: number, chunk_size: number): number {\n    let end_position = position + chunk_size;\n    if (end_position < file.size) {\n        let chunk: Blob = file.slice(position, position + chunk_size);\n        websocket.send(chunk);\n    } else {\n        let chunk: Blob = file.slice(position, file.size);\n        websocket.send(chunk);\n    };\n    return position + chunk_size;\n};\n\n\nfunction sendFile(websocket: WebSocket, files: FileList | [], index: number, chunk_size: number, update_fn: CallableFunction) {\n    // console.log(\"Sending file\");\n    if (index >= files.length) {\n        // console.log(\"Upload of all files done\");\n        websocket.close(1000);\n    } else {\n        let file: File = files[index];\n        let instance_name: string = file.webkitRelativePath.split(\"/\")[1];\n        // HEADER\n        websocket.send(\"HEADER START\");\n        websocket.send(JSON.stringify({\n            file_name: file.name,\n            instance_name: instance_name,\n        }));\n        websocket.send(\"HEADER END\");\n\n        // FILE\n        let position = 0;\n        websocket.send(\"FILE START\")\n        websocket.onmessage = (evt) => {\n            if (evt.data === \"OK\" && position < file.size) {\n                position = uploadChunk(websocket, file, position, chunk_size);\n                if (position >= file.size) {\n                    // console.log(\"Upload Success\");\n                    websocket.send(\"FILE END\");\n                };\n            } else if (evt.data === \"UPLOAD DONE\") {\n                update_fn(instance_name, file.size);\n                sendFile(websocket, files, index + 1, chunk_size, update_fn);\n            };\n        };\n    };\n};\n\n\nexport { sendFile }","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode, SyntheticEvent } from \"react\";\nimport 'bulma/css/bulma.min.css';\nimport { Button } from \"react-bulma-components\";\nimport {\n  componentWrapperStyle,\n  inputLabelStyle,\n  listContainerStyle,\n  listStyle,\n  listItemStyle,\n  progressBarStyle,\n  progressFillStyle,\n  checkmarkStyle\n} from \"./Elements\"\nimport { sendFile } from \"./UploadUtils\"\n\ninterface UploadedInstance {\n  name: string;\n  files: File[];\n  total_size: number;\n  uploaded_size: number;\n  progress: number;\n}\n\ninterface UploadFieldState {\n  instance_list: UploadedInstance[] | [];\n  file_list: FileList | [];\n  upload_status: string;\n}\n\nclass FolderUploadField extends StreamlitComponentBase<UploadFieldState> {\n  websocket_url: string;\n  websocket_query: string;\n  chunk_size: number;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = { instance_list: [], file_list: [], upload_status: \"PE\" };\n\n    this.folderInput = this.folderInput.bind(this);\n    this.folderUpload = this.folderUpload.bind(this);\n    this.updateInstanceProgress = this.updateInstanceProgress.bind(this);\n\n    this.websocket_url = props.args[\"websocket_url\"];\n    this.websocket_query = (\"?auth_token=\" + props.args[\"auth_token\"] + \"&project_id=\" +\n      props.args[\"project_id\"] + \"&sub_index=\" + props.args[\"sub_index\"]);\n    this.chunk_size = props.args[\"chunk_size\"]\n  };\n\n\n  folderInput(event: SyntheticEvent) {\n    // @ts-ignore\n    var files: FileList = event.target.files;\n    this.setState({ \"file_list\": files });\n\n    let instance_list: UploadedInstance[] = [];\n\n    for (let i = 0; i < files.length; i++) {\n      let file: File = files[i];\n      let instance_name: string = file.webkitRelativePath.split(\"/\")[1];\n\n      if (instance_list.filter(item => item.name === instance_name).length === 0) {\n        instance_list.push({\n          name: instance_name,\n          files: [file],\n          total_size: file.size,\n          uploaded_size: 0,\n          progress: 0,\n        });\n      } else {\n        let instance: UploadedInstance = instance_list.filter(item => item.name === instance_name)[0];\n        let index: number = instance_list.indexOf(instance)\n        instance.files.push(file);\n        instance.total_size = instance.total_size + file.size;\n        instance_list[index] = instance;\n      };\n    };\n    this.setState({ instance_list: instance_list });\n    Streamlit.setComponentValue(\n      instance_list.map(item => ({ \"name\": item.name, \"progress\": item.progress }))\n    );\n  };\n\n\n  folderUpload(event: SyntheticEvent) {\n    const websocket: WebSocket = new WebSocket(this.websocket_url + this.websocket_query);\n    this.setState({ \"upload_status\": \"IP\" });\n    websocket.onopen = (evt) => {\n      // console.log(\"websocket connection open.\");\n      sendFile(websocket, this.state.file_list, 0, this.chunk_size, this.updateInstanceProgress);\n    };\n    websocket.onclose = function () {\n      // console.log(\"Socket connection closed.\");\n    };\n  };\n\n  updateInstanceProgress(instance_name: string, uploaded_size: number) {\n    let instance_list = this.state.instance_list;\n    let instance_index: number = instance_list.findIndex(item => item.name === instance_name);\n    let instance: UploadedInstance = instance_list[instance_index];\n    instance[\"uploaded_size\"] = instance[\"uploaded_size\"] + uploaded_size;\n    instance[\"progress\"] = instance[\"uploaded_size\"] / instance[\"total_size\"] * 100;\n    instance_list[instance_index] = instance;\n    this.setState({ \"instance_list\": instance_list });\n    Streamlit.setComponentValue(\n      instance_list.map(item => ({ \"name\": item.name, \"progress\": item.progress }))\n    );\n  }\n\n\n  public render = (): ReactNode => {\n    if (this.state.instance_list.length === 0 && this.state.upload_status === \"PE\") {\n      return (\n        <div style={componentWrapperStyle}>\n          <Button style={{ width: \"100%\" }}>\n            {/* @ts-ignore */}\n            <input webkitdirectory=\"true\" className=\"input\" id=\"folder-select\" type=\"file\" hidden\n              onChange={this.folderInput} />\n            {/* @ts-ignore */}\n            <label htmlFor=\"folder-select\"\n              style={inputLabelStyle}>\n              Select folder\n            </label>\n          </Button>\n        </div>\n      )\n    } else if (this.state.instance_list.length >= 0 && this.state.upload_status === \"PE\") {\n      return (\n        <div style={componentWrapperStyle}>\n          <Button style={{ width: \"100%\" }}>\n            {/* @ts-ignore */}\n            <input webkitdirectory=\"true\" className=\"input\" id=\"folder-select\" type=\"file\" hidden\n              onChange={this.folderInput} />\n            {/* @ts-ignore */}\n            <label htmlFor=\"folder-select\"\n              style={inputLabelStyle}>\n              Select folder\n            </label>\n          </Button>\n          <div style={listContainerStyle}>\n            <ul style={listStyle}>\n              {this.state.instance_list.map((item, index) => (\n                <li key={index} style={listItemStyle}>\n                  {item.name}\n                  {item.progress < 100 ? (\n                    <div style={progressBarStyle}>\n                      <div\n                        style={{\n                          ...progressFillStyle,\n                          width: `${item.progress}%`,\n                        }}\n                      />\n                    </div>) : (\n                    <span style={checkmarkStyle}>&#10003;</span>\n                  )}\n                </li>\n              ))}\n            </ul>\n          </div>\n          <Button\n            color=\"primary\" style={{ width: \"100%\", marginTop: \"0.5em\" }}\n            onClick={this.folderUpload}\n          >\n            Upload\n          </Button>\n        </div>\n      )\n    } else {\n      return (\n        <div style={componentWrapperStyle}>\n          <div style={listContainerStyle}>\n            <ul style={listStyle}>\n              {this.state.instance_list.map((item, index) => (\n                <li key={index} style={listItemStyle}>\n                  {item.name}\n                  {item.progress < 100 ? (\n                    <div style={progressBarStyle}>\n                      <div\n                        style={{\n                          ...progressFillStyle,\n                          width: `${item.progress}%`,\n                        }}\n                      />\n                    </div>) : (\n                    <span style={checkmarkStyle}>&#10003;</span>\n                  )}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\n\nexport default withStreamlitConnection(FolderUploadField)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport FolderUploadField from \"./FolderUploadField\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <FolderUploadField />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}