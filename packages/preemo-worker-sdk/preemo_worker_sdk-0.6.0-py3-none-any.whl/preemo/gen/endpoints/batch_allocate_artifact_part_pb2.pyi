"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class AllocateArtifactPartConfigMetadata(google.protobuf.message.Message):
    """This message is included for potential future use."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___AllocateArtifactPartConfigMetadata = AllocateArtifactPartConfigMetadata

@typing_extensions.final
class AllocateArtifactPartConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class MetadatasByPartNumberEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___AllocateArtifactPartConfigMetadata: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___AllocateArtifactPartConfigMetadata | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    METADATAS_BY_PART_NUMBER_FIELD_NUMBER: builtins.int
    @property
    def metadatas_by_part_number(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___AllocateArtifactPartConfigMetadata]:
        """For an artifact, part numbers must be sequential integers starting with 0."""
    def __init__(
        self,
        *,
        metadatas_by_part_number: collections.abc.Mapping[builtins.int, global___AllocateArtifactPartConfigMetadata] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadatas_by_part_number", b"metadatas_by_part_number"]) -> None: ...

global___AllocateArtifactPartConfig = AllocateArtifactPartConfig

@typing_extensions.final
class BatchAllocateArtifactPartRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ConfigsByArtifactIdEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___AllocateArtifactPartConfig: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___AllocateArtifactPartConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    CONFIGS_BY_ARTIFACT_ID_FIELD_NUMBER: builtins.int
    @property
    def configs_by_artifact_id(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___AllocateArtifactPartConfig]: ...
    def __init__(
        self,
        *,
        configs_by_artifact_id: collections.abc.Mapping[builtins.str, global___AllocateArtifactPartConfig] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["configs_by_artifact_id", b"configs_by_artifact_id"]) -> None: ...

global___BatchAllocateArtifactPartRequest = BatchAllocateArtifactPartRequest

@typing_extensions.final
class AllocateArtifactPartResultMetadata(google.protobuf.message.Message):
    """This message is included for potential future use."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___AllocateArtifactPartResultMetadata = AllocateArtifactPartResultMetadata

@typing_extensions.final
class AllocateArtifactPartResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class MetadatasByPartNumberEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___AllocateArtifactPartResultMetadata: ...
        def __init__(
            self,
            *,
            key: builtins.int = ...,
            value: global___AllocateArtifactPartResultMetadata | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    METADATAS_BY_PART_NUMBER_FIELD_NUMBER: builtins.int
    @property
    def metadatas_by_part_number(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___AllocateArtifactPartResultMetadata]: ...
    def __init__(
        self,
        *,
        metadatas_by_part_number: collections.abc.Mapping[builtins.int, global___AllocateArtifactPartResultMetadata] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["metadatas_by_part_number", b"metadatas_by_part_number"]) -> None: ...

global___AllocateArtifactPartResult = AllocateArtifactPartResult

@typing_extensions.final
class BatchAllocateArtifactPartResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ResultsByArtifactIdEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___AllocateArtifactPartResult: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___AllocateArtifactPartResult | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    RESULTS_BY_ARTIFACT_ID_FIELD_NUMBER: builtins.int
    @property
    def results_by_artifact_id(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___AllocateArtifactPartResult]: ...
    def __init__(
        self,
        *,
        results_by_artifact_id: collections.abc.Mapping[builtins.str, global___AllocateArtifactPartResult] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["results_by_artifact_id", b"results_by_artifact_id"]) -> None: ...

global___BatchAllocateArtifactPartResponse = BatchAllocateArtifactPartResponse
