# coding: utf-8

"""
    API pro taxonomii CITES

    Toto je API pro taxonomii CITES  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: rjaeger@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaxonEntryType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pid': 'str',
        'name_common_cz': 'str',
        'name_common_en': 'str',
        'name_scientific': 'str',
        'regulation_cites': 'str',
        'regulation_eu': 'str'
    }

    attribute_map = {
        'pid': 'pid',
        'name_common_cz': 'name_common_cz',
        'name_common_en': 'name_common_en',
        'name_scientific': 'name_scientific',
        'regulation_cites': 'regulation_cites',
        'regulation_eu': 'regulation_eu'
    }

    def __init__(self, pid=None, name_common_cz=None, name_common_en=None, name_scientific=None, regulation_cites=None, regulation_eu=None):  # noqa: E501
        """TaxonEntryType - a model defined in Swagger"""  # noqa: E501
        self._pid = None
        self._name_common_cz = None
        self._name_common_en = None
        self._name_scientific = None
        self._regulation_cites = None
        self._regulation_eu = None
        self.discriminator = None
        if pid is not None:
            self.pid = pid
        if name_common_cz is not None:
            self.name_common_cz = name_common_cz
        if name_common_en is not None:
            self.name_common_en = name_common_en
        self.name_scientific = name_scientific
        if regulation_cites is not None:
            self.regulation_cites = regulation_cites
        if regulation_eu is not None:
            self.regulation_eu = regulation_eu

    @property
    def pid(self):
        """Gets the pid of this TaxonEntryType.  # noqa: E501

        Identifikátor Registru CITES  # noqa: E501

        :return: The pid of this TaxonEntryType.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TaxonEntryType.

        Identifikátor Registru CITES  # noqa: E501

        :param pid: The pid of this TaxonEntryType.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def name_common_cz(self):
        """Gets the name_common_cz of this TaxonEntryType.  # noqa: E501

        Obecný název (česky)  # noqa: E501

        :return: The name_common_cz of this TaxonEntryType.  # noqa: E501
        :rtype: str
        """
        return self._name_common_cz

    @name_common_cz.setter
    def name_common_cz(self, name_common_cz):
        """Sets the name_common_cz of this TaxonEntryType.

        Obecný název (česky)  # noqa: E501

        :param name_common_cz: The name_common_cz of this TaxonEntryType.  # noqa: E501
        :type: str
        """

        self._name_common_cz = name_common_cz

    @property
    def name_common_en(self):
        """Gets the name_common_en of this TaxonEntryType.  # noqa: E501

        Obecný název (anglicky)  # noqa: E501

        :return: The name_common_en of this TaxonEntryType.  # noqa: E501
        :rtype: str
        """
        return self._name_common_en

    @name_common_en.setter
    def name_common_en(self, name_common_en):
        """Sets the name_common_en of this TaxonEntryType.

        Obecný název (anglicky)  # noqa: E501

        :param name_common_en: The name_common_en of this TaxonEntryType.  # noqa: E501
        :type: str
        """

        self._name_common_en = name_common_en

    @property
    def name_scientific(self):
        """Gets the name_scientific of this TaxonEntryType.  # noqa: E501

        Vědecký název (latinsky)  # noqa: E501

        :return: The name_scientific of this TaxonEntryType.  # noqa: E501
        :rtype: str
        """
        return self._name_scientific

    @name_scientific.setter
    def name_scientific(self, name_scientific):
        """Sets the name_scientific of this TaxonEntryType.

        Vědecký název (latinsky)  # noqa: E501

        :param name_scientific: The name_scientific of this TaxonEntryType.  # noqa: E501
        :type: str
        """
        if name_scientific is None:
            raise ValueError("Invalid value for `name_scientific`, must not be `None`")  # noqa: E501

        self._name_scientific = name_scientific

    @property
    def regulation_cites(self):
        """Gets the regulation_cites of this TaxonEntryType.  # noqa: E501

        Exemplář sledovaný podle CITES  # noqa: E501

        :return: The regulation_cites of this TaxonEntryType.  # noqa: E501
        :rtype: str
        """
        return self._regulation_cites

    @regulation_cites.setter
    def regulation_cites(self, regulation_cites):
        """Sets the regulation_cites of this TaxonEntryType.

        Exemplář sledovaný podle CITES  # noqa: E501

        :param regulation_cites: The regulation_cites of this TaxonEntryType.  # noqa: E501
        :type: str
        """
        allowed_values = ["I", "I/II", "II", "II/III", "III", "NC", "Not CITES. Protected by the Act 114/1992.", "Not CITES", "", ""]  # noqa: E501
        if regulation_cites not in allowed_values:
            raise ValueError(
                "Invalid value for `regulation_cites` ({0}), must be one of {1}"  # noqa: E501
                .format(regulation_cites, allowed_values)
            )

        self._regulation_cites = regulation_cites

    @property
    def regulation_eu(self):
        """Gets the regulation_eu of this TaxonEntryType.  # noqa: E501

        Exemplář sledovaný podle EU  # noqa: E501

        :return: The regulation_eu of this TaxonEntryType.  # noqa: E501
        :rtype: str
        """
        return self._regulation_eu

    @regulation_eu.setter
    def regulation_eu(self, regulation_eu):
        """Sets the regulation_eu of this TaxonEntryType.

        Exemplář sledovaný podle EU  # noqa: E501

        :param regulation_eu: The regulation_eu of this TaxonEntryType.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "A/B", "B", "B/D", "C", "D", "", ""]  # noqa: E501
        if regulation_eu not in allowed_values:
            raise ValueError(
                "Invalid value for `regulation_eu` ({0}), must be one of {1}"  # noqa: E501
                .format(regulation_eu, allowed_values)
            )

        self._regulation_eu = regulation_eu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxonEntryType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxonEntryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
