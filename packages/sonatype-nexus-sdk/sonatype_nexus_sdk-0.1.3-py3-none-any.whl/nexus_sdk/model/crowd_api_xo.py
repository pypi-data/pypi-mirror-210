# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class CrowdApiXO(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "realmActive",
            "enabled",
        }

        class properties:
            enabled = schemas.BoolSchema
            realmActive = schemas.BoolSchema
            applicationName = schemas.StrSchema
            applicationPassword = schemas.StrSchema
            url = schemas.StrSchema
            useTrustStoreForUrl = schemas.BoolSchema

            class timeout(schemas.Int32Schema):
                class MetaOapg:
                    format = "int32"
                    inclusive_maximum = 3600
                    inclusive_minimum = 1

            __annotations__ = {
                "enabled": enabled,
                "realmActive": realmActive,
                "applicationName": applicationName,
                "applicationPassword": applicationPassword,
                "url": url,
                "useTrustStoreForUrl": useTrustStoreForUrl,
                "timeout": timeout,
            }

    realmActive: MetaOapg.properties.realmActive
    enabled: MetaOapg.properties.enabled

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["enabled"]
    ) -> MetaOapg.properties.enabled:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["realmActive"]
    ) -> MetaOapg.properties.realmActive:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["applicationName"]
    ) -> MetaOapg.properties.applicationName:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["applicationPassword"]
    ) -> MetaOapg.properties.applicationPassword:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["url"]
    ) -> MetaOapg.properties.url:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["useTrustStoreForUrl"]
    ) -> MetaOapg.properties.useTrustStoreForUrl:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["timeout"]
    ) -> MetaOapg.properties.timeout:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "enabled",
                "realmActive",
                "applicationName",
                "applicationPassword",
                "url",
                "useTrustStoreForUrl",
                "timeout",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["enabled"]
    ) -> MetaOapg.properties.enabled:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["realmActive"]
    ) -> MetaOapg.properties.realmActive:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["applicationName"]
    ) -> typing.Union[MetaOapg.properties.applicationName, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["applicationPassword"]
    ) -> typing.Union[MetaOapg.properties.applicationPassword, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["url"]
    ) -> typing.Union[MetaOapg.properties.url, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["useTrustStoreForUrl"]
    ) -> typing.Union[MetaOapg.properties.useTrustStoreForUrl, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["timeout"]
    ) -> typing.Union[MetaOapg.properties.timeout, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "enabled",
                "realmActive",
                "applicationName",
                "applicationPassword",
                "url",
                "useTrustStoreForUrl",
                "timeout",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        realmActive: typing.Union[
            MetaOapg.properties.realmActive,
            bool,
        ],
        enabled: typing.Union[
            MetaOapg.properties.enabled,
            bool,
        ],
        applicationName: typing.Union[
            MetaOapg.properties.applicationName, str, schemas.Unset
        ] = schemas.unset,
        applicationPassword: typing.Union[
            MetaOapg.properties.applicationPassword, str, schemas.Unset
        ] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        useTrustStoreForUrl: typing.Union[
            MetaOapg.properties.useTrustStoreForUrl, bool, schemas.Unset
        ] = schemas.unset,
        timeout: typing.Union[
            MetaOapg.properties.timeout, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "CrowdApiXO":
        return super().__new__(
            cls,
            *_args,
            realmActive=realmActive,
            enabled=enabled,
            applicationName=applicationName,
            applicationPassword=applicationPassword,
            url=url,
            useTrustStoreForUrl=useTrustStoreForUrl,
            timeout=timeout,
            _configuration=_configuration,
            **kwargs,
        )
