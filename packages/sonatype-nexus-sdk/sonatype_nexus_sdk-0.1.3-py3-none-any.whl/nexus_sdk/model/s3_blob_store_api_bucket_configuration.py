# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class S3BlobStoreApiBucketConfiguration(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "bucket",
        }

        class properties:
            @staticmethod
            def bucket() -> typing.Type["S3BlobStoreApiBucket"]:
                return S3BlobStoreApiBucket

            @staticmethod
            def encryption() -> typing.Type["S3BlobStoreApiEncryption"]:
                return S3BlobStoreApiEncryption

            @staticmethod
            def bucketSecurity() -> typing.Type["S3BlobStoreApiBucketSecurity"]:
                return S3BlobStoreApiBucketSecurity

            @staticmethod
            def advancedBucketConnection() -> (
                typing.Type["S3BlobStoreApiAdvancedBucketConnection"]
            ):
                return S3BlobStoreApiAdvancedBucketConnection

            __annotations__ = {
                "bucket": bucket,
                "encryption": encryption,
                "bucketSecurity": bucketSecurity,
                "advancedBucketConnection": advancedBucketConnection,
            }

    bucket: "S3BlobStoreApiBucket"

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["bucket"]
    ) -> "S3BlobStoreApiBucket":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["encryption"]
    ) -> "S3BlobStoreApiEncryption":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["bucketSecurity"]
    ) -> "S3BlobStoreApiBucketSecurity":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["advancedBucketConnection"]
    ) -> "S3BlobStoreApiAdvancedBucketConnection":
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "bucket",
                "encryption",
                "bucketSecurity",
                "advancedBucketConnection",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["bucket"]
    ) -> "S3BlobStoreApiBucket":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["encryption"]
    ) -> typing.Union["S3BlobStoreApiEncryption", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["bucketSecurity"]
    ) -> typing.Union["S3BlobStoreApiBucketSecurity", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["advancedBucketConnection"]
    ) -> typing.Union["S3BlobStoreApiAdvancedBucketConnection", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "bucket",
                "encryption",
                "bucketSecurity",
                "advancedBucketConnection",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        bucket: "S3BlobStoreApiBucket",
        encryption: typing.Union[
            "S3BlobStoreApiEncryption", schemas.Unset
        ] = schemas.unset,
        bucketSecurity: typing.Union[
            "S3BlobStoreApiBucketSecurity", schemas.Unset
        ] = schemas.unset,
        advancedBucketConnection: typing.Union[
            "S3BlobStoreApiAdvancedBucketConnection", schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "S3BlobStoreApiBucketConfiguration":
        return super().__new__(
            cls,
            *_args,
            bucket=bucket,
            encryption=encryption,
            bucketSecurity=bucketSecurity,
            advancedBucketConnection=advancedBucketConnection,
            _configuration=_configuration,
            **kwargs,
        )


from nexus_sdk.model.s3_blob_store_api_advanced_bucket_connection import (
    S3BlobStoreApiAdvancedBucketConnection,
)
from nexus_sdk.model.s3_blob_store_api_bucket import S3BlobStoreApiBucket
from nexus_sdk.model.s3_blob_store_api_bucket_security import (
    S3BlobStoreApiBucketSecurity,
)
from nexus_sdk.model.s3_blob_store_api_encryption import S3BlobStoreApiEncryption
