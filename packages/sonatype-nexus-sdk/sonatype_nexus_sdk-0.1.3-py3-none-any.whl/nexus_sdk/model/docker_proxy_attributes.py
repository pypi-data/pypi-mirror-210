# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class DockerProxyAttributes(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            class indexType(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "HUB": "HUB",
                        "REGISTRY": "REGISTRY",
                        "CUSTOM": "CUSTOM",
                    }

                @schemas.classproperty
                def HUB(cls):
                    return cls("HUB")

                @schemas.classproperty
                def REGISTRY(cls):
                    return cls("REGISTRY")

                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("CUSTOM")

            indexUrl = schemas.StrSchema
            cacheForeignLayers = schemas.BoolSchema

            class foreignLayerUrlWhitelist(schemas.ListSchema):
                class MetaOapg:
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "foreignLayerUrlWhitelist":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            __annotations__ = {
                "indexType": indexType,
                "indexUrl": indexUrl,
                "cacheForeignLayers": cacheForeignLayers,
                "foreignLayerUrlWhitelist": foreignLayerUrlWhitelist,
            }

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["indexType"]
    ) -> MetaOapg.properties.indexType:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["indexUrl"]
    ) -> MetaOapg.properties.indexUrl:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["cacheForeignLayers"]
    ) -> MetaOapg.properties.cacheForeignLayers:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["foreignLayerUrlWhitelist"]
    ) -> MetaOapg.properties.foreignLayerUrlWhitelist:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "indexType",
                "indexUrl",
                "cacheForeignLayers",
                "foreignLayerUrlWhitelist",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["indexType"]
    ) -> typing.Union[MetaOapg.properties.indexType, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["indexUrl"]
    ) -> typing.Union[MetaOapg.properties.indexUrl, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["cacheForeignLayers"]
    ) -> typing.Union[MetaOapg.properties.cacheForeignLayers, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["foreignLayerUrlWhitelist"]
    ) -> typing.Union[MetaOapg.properties.foreignLayerUrlWhitelist, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "indexType",
                "indexUrl",
                "cacheForeignLayers",
                "foreignLayerUrlWhitelist",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        indexType: typing.Union[
            MetaOapg.properties.indexType, str, schemas.Unset
        ] = schemas.unset,
        indexUrl: typing.Union[
            MetaOapg.properties.indexUrl, str, schemas.Unset
        ] = schemas.unset,
        cacheForeignLayers: typing.Union[
            MetaOapg.properties.cacheForeignLayers, bool, schemas.Unset
        ] = schemas.unset,
        foreignLayerUrlWhitelist: typing.Union[
            MetaOapg.properties.foreignLayerUrlWhitelist, list, tuple, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "DockerProxyAttributes":
        return super().__new__(
            cls,
            *_args,
            indexType=indexType,
            indexUrl=indexUrl,
            cacheForeignLayers=cacheForeignLayers,
            foreignLayerUrlWhitelist=foreignLayerUrlWhitelist,
            _configuration=_configuration,
            **kwargs,
        )
