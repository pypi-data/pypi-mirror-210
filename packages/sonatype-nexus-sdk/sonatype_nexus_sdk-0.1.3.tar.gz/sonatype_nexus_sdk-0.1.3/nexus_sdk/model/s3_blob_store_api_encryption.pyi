# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class S3BlobStoreApiEncryption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class encryptionType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def S3MANAGED_ENCRYPTION(cls):
                    return cls("s3ManagedEncryption")
                
                @schemas.classproperty
                def KMS_MANAGED_ENCRYPTION(cls):
                    return cls("kmsManagedEncryption")
            encryptionKey = schemas.StrSchema
            __annotations__ = {
                "encryptionType": encryptionType,
                "encryptionKey": encryptionKey,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryptionType"]) -> MetaOapg.properties.encryptionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryptionKey"]) -> MetaOapg.properties.encryptionKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["encryptionType", "encryptionKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryptionType"]) -> typing.Union[MetaOapg.properties.encryptionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryptionKey"]) -> typing.Union[MetaOapg.properties.encryptionKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["encryptionType", "encryptionKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        encryptionType: typing.Union[MetaOapg.properties.encryptionType, str, schemas.Unset] = schemas.unset,
        encryptionKey: typing.Union[MetaOapg.properties.encryptionKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'S3BlobStoreApiEncryption':
        return super().__new__(
            cls,
            *_args,
            encryptionType=encryptionType,
            encryptionKey=encryptionKey,
            _configuration=_configuration,
            **kwargs,
        )
