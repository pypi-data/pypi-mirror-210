# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class Throwable(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            @staticmethod
            def cause() -> typing.Type["Throwable"]:
                return Throwable

            class stackTrace(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["StackTraceElement"]:
                        return StackTraceElement

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple["StackTraceElement"],
                        typing.List["StackTraceElement"],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "stackTrace":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "StackTraceElement":
                    return super().__getitem__(i)

            message = schemas.StrSchema
            localizedMessage = schemas.StrSchema

            class suppressed(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["Throwable"]:
                        return Throwable

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple["Throwable"], typing.List["Throwable"]
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "suppressed":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "Throwable":
                    return super().__getitem__(i)

            __annotations__ = {
                "cause": cause,
                "stackTrace": stackTrace,
                "message": message,
                "localizedMessage": localizedMessage,
                "suppressed": suppressed,
            }

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cause"]) -> "Throwable":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["stackTrace"]
    ) -> MetaOapg.properties.stackTrace:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["message"]
    ) -> MetaOapg.properties.message:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["localizedMessage"]
    ) -> MetaOapg.properties.localizedMessage:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["suppressed"]
    ) -> MetaOapg.properties.suppressed:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "cause",
                "stackTrace",
                "message",
                "localizedMessage",
                "suppressed",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["cause"]
    ) -> typing.Union["Throwable", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["stackTrace"]
    ) -> typing.Union[MetaOapg.properties.stackTrace, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["message"]
    ) -> typing.Union[MetaOapg.properties.message, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["localizedMessage"]
    ) -> typing.Union[MetaOapg.properties.localizedMessage, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["suppressed"]
    ) -> typing.Union[MetaOapg.properties.suppressed, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "cause",
                "stackTrace",
                "message",
                "localizedMessage",
                "suppressed",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        cause: typing.Union["Throwable", schemas.Unset] = schemas.unset,
        stackTrace: typing.Union[
            MetaOapg.properties.stackTrace, list, tuple, schemas.Unset
        ] = schemas.unset,
        message: typing.Union[
            MetaOapg.properties.message, str, schemas.Unset
        ] = schemas.unset,
        localizedMessage: typing.Union[
            MetaOapg.properties.localizedMessage, str, schemas.Unset
        ] = schemas.unset,
        suppressed: typing.Union[
            MetaOapg.properties.suppressed, list, tuple, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "Throwable":
        return super().__new__(
            cls,
            *_args,
            cause=cause,
            stackTrace=stackTrace,
            message=message,
            localizedMessage=localizedMessage,
            suppressed=suppressed,
            _configuration=_configuration,
            **kwargs,
        )


from nexus_sdk.model.stack_trace_element import StackTraceElement
