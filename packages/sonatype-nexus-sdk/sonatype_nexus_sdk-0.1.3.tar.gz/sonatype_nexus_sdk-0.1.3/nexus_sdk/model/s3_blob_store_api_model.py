# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class S3BlobStoreApiModel(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "name",
            "bucketConfiguration",
        }

        class properties:
            name = schemas.StrSchema

            @staticmethod
            def bucketConfiguration() -> (
                typing.Type["S3BlobStoreApiBucketConfiguration"]
            ):
                return S3BlobStoreApiBucketConfiguration

            @staticmethod
            def softQuota() -> typing.Type["BlobStoreApiSoftQuota"]:
                return BlobStoreApiSoftQuota

            type = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "bucketConfiguration": bucketConfiguration,
                "softQuota": softQuota,
                "type": type,
            }

    name: MetaOapg.properties.name
    bucketConfiguration: "S3BlobStoreApiBucketConfiguration"

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["bucketConfiguration"]
    ) -> "S3BlobStoreApiBucketConfiguration":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["softQuota"]
    ) -> "BlobStoreApiSoftQuota":
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["type"]
    ) -> MetaOapg.properties.type:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "name",
                "bucketConfiguration",
                "softQuota",
                "type",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["bucketConfiguration"]
    ) -> "S3BlobStoreApiBucketConfiguration":
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["softQuota"]
    ) -> typing.Union["BlobStoreApiSoftQuota", schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["type"]
    ) -> typing.Union[MetaOapg.properties.type, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "name",
                "bucketConfiguration",
                "softQuota",
                "type",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        bucketConfiguration: "S3BlobStoreApiBucketConfiguration",
        softQuota: typing.Union["BlobStoreApiSoftQuota", schemas.Unset] = schemas.unset,
        type: typing.Union[
            MetaOapg.properties.type, str, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "S3BlobStoreApiModel":
        return super().__new__(
            cls,
            *_args,
            name=name,
            bucketConfiguration=bucketConfiguration,
            softQuota=softQuota,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )


from nexus_sdk.model.blob_store_api_soft_quota import BlobStoreApiSoftQuota
from nexus_sdk.model.s3_blob_store_api_bucket_configuration import (
    S3BlobStoreApiBucketConfiguration,
)
