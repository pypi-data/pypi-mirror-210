# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class TaskXO(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            type = schemas.StrSchema
            message = schemas.StrSchema
            currentState = schemas.StrSchema
            lastRunResult = schemas.StrSchema
            nextRun = schemas.DateTimeSchema
            lastRun = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "type": type,
                "message": message,
                "currentState": currentState,
                "lastRunResult": lastRunResult,
                "nextRun": nextRun,
                "lastRun": lastRun,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentState"]) -> MetaOapg.properties.currentState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRunResult"]) -> MetaOapg.properties.lastRunResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextRun"]) -> MetaOapg.properties.nextRun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRun"]) -> MetaOapg.properties.lastRun: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "type", "message", "currentState", "lastRunResult", "nextRun", "lastRun", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentState"]) -> typing.Union[MetaOapg.properties.currentState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRunResult"]) -> typing.Union[MetaOapg.properties.lastRunResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextRun"]) -> typing.Union[MetaOapg.properties.nextRun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRun"]) -> typing.Union[MetaOapg.properties.lastRun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "type", "message", "currentState", "lastRunResult", "nextRun", "lastRun", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        currentState: typing.Union[MetaOapg.properties.currentState, str, schemas.Unset] = schemas.unset,
        lastRunResult: typing.Union[MetaOapg.properties.lastRunResult, str, schemas.Unset] = schemas.unset,
        nextRun: typing.Union[MetaOapg.properties.nextRun, str, datetime, schemas.Unset] = schemas.unset,
        lastRun: typing.Union[MetaOapg.properties.lastRun, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskXO':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            type=type,
            message=message,
            currentState=currentState,
            lastRunResult=lastRunResult,
            nextRun=nextRun,
            lastRun=lastRun,
            _configuration=_configuration,
            **kwargs,
        )
