# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class ComponentXO(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            id = schemas.StrSchema
            repository = schemas.StrSchema
            format = schemas.StrSchema
            group = schemas.StrSchema
            name = schemas.StrSchema
            version = schemas.StrSchema

            class assets(schemas.ListSchema):
                class MetaOapg:
                    @staticmethod
                    def items() -> typing.Type["AssetXO"]:
                        return AssetXO

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple["AssetXO"], typing.List["AssetXO"]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "assets":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> "AssetXO":
                    return super().__getitem__(i)

            __annotations__ = {
                "id": id,
                "repository": repository,
                "format": format,
                "group": group,
                "name": name,
                "version": version,
                "assets": assets,
            }

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["id"]
    ) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["repository"]
    ) -> MetaOapg.properties.repository:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["format"]
    ) -> MetaOapg.properties.format:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["group"]
    ) -> MetaOapg.properties.group:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["version"]
    ) -> MetaOapg.properties.version:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["assets"]
    ) -> MetaOapg.properties.assets:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "id",
                "repository",
                "format",
                "group",
                "name",
                "version",
                "assets",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["id"]
    ) -> typing.Union[MetaOapg.properties.id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["repository"]
    ) -> typing.Union[MetaOapg.properties.repository, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["format"]
    ) -> typing.Union[MetaOapg.properties.format, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["group"]
    ) -> typing.Union[MetaOapg.properties.group, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["name"]
    ) -> typing.Union[MetaOapg.properties.name, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["version"]
    ) -> typing.Union[MetaOapg.properties.version, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["assets"]
    ) -> typing.Union[MetaOapg.properties.assets, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "id",
                "repository",
                "format",
                "group",
                "name",
                "version",
                "assets",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        repository: typing.Union[
            MetaOapg.properties.repository, str, schemas.Unset
        ] = schemas.unset,
        format: typing.Union[
            MetaOapg.properties.format, str, schemas.Unset
        ] = schemas.unset,
        group: typing.Union[
            MetaOapg.properties.group, str, schemas.Unset
        ] = schemas.unset,
        name: typing.Union[
            MetaOapg.properties.name, str, schemas.Unset
        ] = schemas.unset,
        version: typing.Union[
            MetaOapg.properties.version, str, schemas.Unset
        ] = schemas.unset,
        assets: typing.Union[
            MetaOapg.properties.assets, list, tuple, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "ComponentXO":
        return super().__new__(
            cls,
            *_args,
            id=id,
            repository=repository,
            format=format,
            group=group,
            name=name,
            version=version,
            assets=assets,
            _configuration=_configuration,
            **kwargs,
        )


from nexus_sdk.model.asset_xo import AssetXO
