# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class ApiUser(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "status",
        }

        class properties:
            class status(schemas.EnumBase, schemas.StrSchema):
                class MetaOapg:
                    enum_value_to_name = {
                        "active": "ACTIVE",
                        "locked": "LOCKED",
                        "disabled": "DISABLED",
                        "changepassword": "CHANGEPASSWORD",
                    }

                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")

                @schemas.classproperty
                def LOCKED(cls):
                    return cls("locked")

                @schemas.classproperty
                def DISABLED(cls):
                    return cls("disabled")

                @schemas.classproperty
                def CHANGEPASSWORD(cls):
                    return cls("changepassword")

            userId = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            emailAddress = schemas.StrSchema
            source = schemas.StrSchema
            readOnly = schemas.BoolSchema

            class roles(schemas.ListSchema):
                class MetaOapg:
                    unique_items = True
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "roles":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            class externalRoles(schemas.ListSchema):
                class MetaOapg:
                    unique_items = True
                    items = schemas.StrSchema

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                        typing.List[
                            typing.Union[
                                MetaOapg.items,
                                str,
                            ]
                        ],
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> "externalRoles":
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)

            __annotations__ = {
                "status": status,
                "userId": userId,
                "firstName": firstName,
                "lastName": lastName,
                "emailAddress": emailAddress,
                "source": source,
                "readOnly": readOnly,
                "roles": roles,
                "externalRoles": externalRoles,
            }

    status: MetaOapg.properties.status

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["status"]
    ) -> MetaOapg.properties.status:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["userId"]
    ) -> MetaOapg.properties.userId:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["firstName"]
    ) -> MetaOapg.properties.firstName:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["lastName"]
    ) -> MetaOapg.properties.lastName:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["emailAddress"]
    ) -> MetaOapg.properties.emailAddress:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["source"]
    ) -> MetaOapg.properties.source:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["readOnly"]
    ) -> MetaOapg.properties.readOnly:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["roles"]
    ) -> MetaOapg.properties.roles:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["externalRoles"]
    ) -> MetaOapg.properties.externalRoles:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "status",
                "userId",
                "firstName",
                "lastName",
                "emailAddress",
                "source",
                "readOnly",
                "roles",
                "externalRoles",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["status"]
    ) -> MetaOapg.properties.status:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["userId"]
    ) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["firstName"]
    ) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["lastName"]
    ) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["emailAddress"]
    ) -> typing.Union[MetaOapg.properties.emailAddress, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["source"]
    ) -> typing.Union[MetaOapg.properties.source, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["readOnly"]
    ) -> typing.Union[MetaOapg.properties.readOnly, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["roles"]
    ) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["externalRoles"]
    ) -> typing.Union[MetaOapg.properties.externalRoles, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "status",
                "userId",
                "firstName",
                "lastName",
                "emailAddress",
                "source",
                "readOnly",
                "roles",
                "externalRoles",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        status: typing.Union[
            MetaOapg.properties.status,
            str,
        ],
        userId: typing.Union[
            MetaOapg.properties.userId, str, schemas.Unset
        ] = schemas.unset,
        firstName: typing.Union[
            MetaOapg.properties.firstName, str, schemas.Unset
        ] = schemas.unset,
        lastName: typing.Union[
            MetaOapg.properties.lastName, str, schemas.Unset
        ] = schemas.unset,
        emailAddress: typing.Union[
            MetaOapg.properties.emailAddress, str, schemas.Unset
        ] = schemas.unset,
        source: typing.Union[
            MetaOapg.properties.source, str, schemas.Unset
        ] = schemas.unset,
        readOnly: typing.Union[
            MetaOapg.properties.readOnly, bool, schemas.Unset
        ] = schemas.unset,
        roles: typing.Union[
            MetaOapg.properties.roles, list, tuple, schemas.Unset
        ] = schemas.unset,
        externalRoles: typing.Union[
            MetaOapg.properties.externalRoles, list, tuple, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "ApiUser":
        return super().__new__(
            cls,
            *_args,
            status=status,
            userId=userId,
            firstName=firstName,
            lastName=lastName,
            emailAddress=emailAddress,
            source=source,
            readOnly=readOnly,
            roles=roles,
            externalRoles=externalRoles,
            _configuration=_configuration,
            **kwargs,
        )
