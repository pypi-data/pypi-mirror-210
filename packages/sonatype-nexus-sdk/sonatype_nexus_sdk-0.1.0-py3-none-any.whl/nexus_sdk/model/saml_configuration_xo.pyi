# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class SamlConfigurationXO(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "idpMetadata",
            "usernameAttribute",
        }
        
        class properties:
            idpMetadata = schemas.StrSchema
            usernameAttribute = schemas.StrSchema
            entityId = schemas.StrSchema
            firstNameAttribute = schemas.StrSchema
            lastNameAttribute = schemas.StrSchema
            emailAttribute = schemas.StrSchema
            groupsAttribute = schemas.StrSchema
            validateResponseSignature = schemas.BoolSchema
            validateAssertionSignature = schemas.BoolSchema
            __annotations__ = {
                "idpMetadata": idpMetadata,
                "usernameAttribute": usernameAttribute,
                "entityId": entityId,
                "firstNameAttribute": firstNameAttribute,
                "lastNameAttribute": lastNameAttribute,
                "emailAttribute": emailAttribute,
                "groupsAttribute": groupsAttribute,
                "validateResponseSignature": validateResponseSignature,
                "validateAssertionSignature": validateAssertionSignature,
            }
    
    idpMetadata: MetaOapg.properties.idpMetadata
    usernameAttribute: MetaOapg.properties.usernameAttribute
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idpMetadata"]) -> MetaOapg.properties.idpMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usernameAttribute"]) -> MetaOapg.properties.usernameAttribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstNameAttribute"]) -> MetaOapg.properties.firstNameAttribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastNameAttribute"]) -> MetaOapg.properties.lastNameAttribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAttribute"]) -> MetaOapg.properties.emailAttribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupsAttribute"]) -> MetaOapg.properties.groupsAttribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validateResponseSignature"]) -> MetaOapg.properties.validateResponseSignature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validateAssertionSignature"]) -> MetaOapg.properties.validateAssertionSignature: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idpMetadata", "usernameAttribute", "entityId", "firstNameAttribute", "lastNameAttribute", "emailAttribute", "groupsAttribute", "validateResponseSignature", "validateAssertionSignature", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idpMetadata"]) -> MetaOapg.properties.idpMetadata: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usernameAttribute"]) -> MetaOapg.properties.usernameAttribute: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> typing.Union[MetaOapg.properties.entityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstNameAttribute"]) -> typing.Union[MetaOapg.properties.firstNameAttribute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastNameAttribute"]) -> typing.Union[MetaOapg.properties.lastNameAttribute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAttribute"]) -> typing.Union[MetaOapg.properties.emailAttribute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupsAttribute"]) -> typing.Union[MetaOapg.properties.groupsAttribute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validateResponseSignature"]) -> typing.Union[MetaOapg.properties.validateResponseSignature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validateAssertionSignature"]) -> typing.Union[MetaOapg.properties.validateAssertionSignature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idpMetadata", "usernameAttribute", "entityId", "firstNameAttribute", "lastNameAttribute", "emailAttribute", "groupsAttribute", "validateResponseSignature", "validateAssertionSignature", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        idpMetadata: typing.Union[MetaOapg.properties.idpMetadata, str, ],
        usernameAttribute: typing.Union[MetaOapg.properties.usernameAttribute, str, ],
        entityId: typing.Union[MetaOapg.properties.entityId, str, schemas.Unset] = schemas.unset,
        firstNameAttribute: typing.Union[MetaOapg.properties.firstNameAttribute, str, schemas.Unset] = schemas.unset,
        lastNameAttribute: typing.Union[MetaOapg.properties.lastNameAttribute, str, schemas.Unset] = schemas.unset,
        emailAttribute: typing.Union[MetaOapg.properties.emailAttribute, str, schemas.Unset] = schemas.unset,
        groupsAttribute: typing.Union[MetaOapg.properties.groupsAttribute, str, schemas.Unset] = schemas.unset,
        validateResponseSignature: typing.Union[MetaOapg.properties.validateResponseSignature, bool, schemas.Unset] = schemas.unset,
        validateAssertionSignature: typing.Union[MetaOapg.properties.validateAssertionSignature, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SamlConfigurationXO':
        return super().__new__(
            cls,
            *_args,
            idpMetadata=idpMetadata,
            usernameAttribute=usernameAttribute,
            entityId=entityId,
            firstNameAttribute=firstNameAttribute,
            lastNameAttribute=lastNameAttribute,
            emailAttribute=emailAttribute,
            groupsAttribute=groupsAttribute,
            validateResponseSignature=validateResponseSignature,
            validateAssertionSignature=validateAssertionSignature,
            _configuration=_configuration,
            **kwargs,
        )
