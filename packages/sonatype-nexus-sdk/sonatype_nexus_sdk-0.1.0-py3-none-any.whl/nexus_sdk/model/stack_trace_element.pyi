# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class StackTraceElement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            methodName = schemas.StrSchema
            fileName = schemas.StrSchema
            lineNumber = schemas.Int32Schema
            className = schemas.StrSchema
            nativeMethod = schemas.BoolSchema
            __annotations__ = {
                "methodName": methodName,
                "fileName": fileName,
                "lineNumber": lineNumber,
                "className": className,
                "nativeMethod": nativeMethod,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["methodName"]) -> MetaOapg.properties.methodName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileName"]) -> MetaOapg.properties.fileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineNumber"]) -> MetaOapg.properties.lineNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["className"]) -> MetaOapg.properties.className: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nativeMethod"]) -> MetaOapg.properties.nativeMethod: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["methodName", "fileName", "lineNumber", "className", "nativeMethod", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["methodName"]) -> typing.Union[MetaOapg.properties.methodName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileName"]) -> typing.Union[MetaOapg.properties.fileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineNumber"]) -> typing.Union[MetaOapg.properties.lineNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["className"]) -> typing.Union[MetaOapg.properties.className, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nativeMethod"]) -> typing.Union[MetaOapg.properties.nativeMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["methodName", "fileName", "lineNumber", "className", "nativeMethod", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        methodName: typing.Union[MetaOapg.properties.methodName, str, schemas.Unset] = schemas.unset,
        fileName: typing.Union[MetaOapg.properties.fileName, str, schemas.Unset] = schemas.unset,
        lineNumber: typing.Union[MetaOapg.properties.lineNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        className: typing.Union[MetaOapg.properties.className, str, schemas.Unset] = schemas.unset,
        nativeMethod: typing.Union[MetaOapg.properties.nativeMethod, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StackTraceElement':
        return super().__new__(
            cls,
            *_args,
            methodName=methodName,
            fileName=fileName,
            lineNumber=lineNumber,
            className=className,
            nativeMethod=nativeMethod,
            _configuration=_configuration,
            **kwargs,
        )
