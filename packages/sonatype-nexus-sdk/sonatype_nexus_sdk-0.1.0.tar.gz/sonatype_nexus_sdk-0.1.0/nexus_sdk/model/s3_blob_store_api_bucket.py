# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class S3BlobStoreApiBucket(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "name",
            "expiration",
            "region",
        }

        class properties:
            region = schemas.StrSchema
            name = schemas.StrSchema
            expiration = schemas.Int32Schema
            prefix = schemas.StrSchema
            __annotations__ = {
                "region": region,
                "name": name,
                "expiration": expiration,
                "prefix": prefix,
            }

    name: MetaOapg.properties.name
    expiration: MetaOapg.properties.expiration
    region: MetaOapg.properties.region

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["region"]
    ) -> MetaOapg.properties.region:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["expiration"]
    ) -> MetaOapg.properties.expiration:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["prefix"]
    ) -> MetaOapg.properties.prefix:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "region",
                "name",
                "expiration",
                "prefix",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["region"]
    ) -> MetaOapg.properties.region:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["name"]
    ) -> MetaOapg.properties.name:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["expiration"]
    ) -> MetaOapg.properties.expiration:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["prefix"]
    ) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "region",
                "name",
                "expiration",
                "prefix",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        name: typing.Union[
            MetaOapg.properties.name,
            str,
        ],
        expiration: typing.Union[
            MetaOapg.properties.expiration,
            decimal.Decimal,
            int,
        ],
        region: typing.Union[
            MetaOapg.properties.region,
            str,
        ],
        prefix: typing.Union[
            MetaOapg.properties.prefix, str, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "S3BlobStoreApiBucket":
        return super().__new__(
            cls,
            *_args,
            name=name,
            expiration=expiration,
            region=region,
            prefix=prefix,
            _configuration=_configuration,
            **kwargs,
        )
