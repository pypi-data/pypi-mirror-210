# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class GenericBlobStoreApiResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def softQuota() -> typing.Type['BlobStoreApiSoftQuota']:
                return BlobStoreApiSoftQuota
            name = schemas.StrSchema
            type = schemas.StrSchema
            unavailable = schemas.BoolSchema
            blobCount = schemas.Int64Schema
            totalSizeInBytes = schemas.Int64Schema
            availableSpaceInBytes = schemas.Int64Schema
            __annotations__ = {
                "softQuota": softQuota,
                "name": name,
                "type": type,
                "unavailable": unavailable,
                "blobCount": blobCount,
                "totalSizeInBytes": totalSizeInBytes,
                "availableSpaceInBytes": availableSpaceInBytes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softQuota"]) -> 'BlobStoreApiSoftQuota': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unavailable"]) -> MetaOapg.properties.unavailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blobCount"]) -> MetaOapg.properties.blobCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalSizeInBytes"]) -> MetaOapg.properties.totalSizeInBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableSpaceInBytes"]) -> MetaOapg.properties.availableSpaceInBytes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["softQuota", "name", "type", "unavailable", "blobCount", "totalSizeInBytes", "availableSpaceInBytes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softQuota"]) -> typing.Union['BlobStoreApiSoftQuota', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unavailable"]) -> typing.Union[MetaOapg.properties.unavailable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blobCount"]) -> typing.Union[MetaOapg.properties.blobCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalSizeInBytes"]) -> typing.Union[MetaOapg.properties.totalSizeInBytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableSpaceInBytes"]) -> typing.Union[MetaOapg.properties.availableSpaceInBytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["softQuota", "name", "type", "unavailable", "blobCount", "totalSizeInBytes", "availableSpaceInBytes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        softQuota: typing.Union['BlobStoreApiSoftQuota', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        unavailable: typing.Union[MetaOapg.properties.unavailable, bool, schemas.Unset] = schemas.unset,
        blobCount: typing.Union[MetaOapg.properties.blobCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalSizeInBytes: typing.Union[MetaOapg.properties.totalSizeInBytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        availableSpaceInBytes: typing.Union[MetaOapg.properties.availableSpaceInBytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GenericBlobStoreApiResponse':
        return super().__new__(
            cls,
            *_args,
            softQuota=softQuota,
            name=name,
            type=type,
            unavailable=unavailable,
            blobCount=blobCount,
            totalSizeInBytes=totalSizeInBytes,
            availableSpaceInBytes=availableSpaceInBytes,
            _configuration=_configuration,
            **kwargs,
        )

from nexus_sdk.model.blob_store_api_soft_quota import BlobStoreApiSoftQuota
