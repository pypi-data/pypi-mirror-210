# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class IqConnectionXo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "authenticationType",
        }
        
        class properties:
            
            
            class authenticationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def PKI(cls):
                    return cls("PKI")
            enabled = schemas.BoolSchema
            showLink = schemas.BoolSchema
            url = schemas.StrSchema
            username = schemas.StrSchema
            password = schemas.StrSchema
            useTrustStoreForUrl = schemas.BoolSchema
            
            
            class timeoutSeconds(
                schemas.Int32Schema
            ):
                pass
            properties = schemas.StrSchema
            __annotations__ = {
                "authenticationType": authenticationType,
                "enabled": enabled,
                "showLink": showLink,
                "url": url,
                "username": username,
                "password": password,
                "useTrustStoreForUrl": useTrustStoreForUrl,
                "timeoutSeconds": timeoutSeconds,
                "properties": properties,
            }
    
    authenticationType: MetaOapg.properties.authenticationType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authenticationType"]) -> MetaOapg.properties.authenticationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showLink"]) -> MetaOapg.properties.showLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useTrustStoreForUrl"]) -> MetaOapg.properties.useTrustStoreForUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeoutSeconds"]) -> MetaOapg.properties.timeoutSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authenticationType", "enabled", "showLink", "url", "username", "password", "useTrustStoreForUrl", "timeoutSeconds", "properties", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authenticationType"]) -> MetaOapg.properties.authenticationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showLink"]) -> typing.Union[MetaOapg.properties.showLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useTrustStoreForUrl"]) -> typing.Union[MetaOapg.properties.useTrustStoreForUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeoutSeconds"]) -> typing.Union[MetaOapg.properties.timeoutSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authenticationType", "enabled", "showLink", "url", "username", "password", "useTrustStoreForUrl", "timeoutSeconds", "properties", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        authenticationType: typing.Union[MetaOapg.properties.authenticationType, str, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        showLink: typing.Union[MetaOapg.properties.showLink, bool, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        useTrustStoreForUrl: typing.Union[MetaOapg.properties.useTrustStoreForUrl, bool, schemas.Unset] = schemas.unset,
        timeoutSeconds: typing.Union[MetaOapg.properties.timeoutSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        properties: typing.Union[MetaOapg.properties.properties, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IqConnectionXo':
        return super().__new__(
            cls,
            *_args,
            authenticationType=authenticationType,
            enabled=enabled,
            showLink=showLink,
            url=url,
            username=username,
            password=password,
            useTrustStoreForUrl=useTrustStoreForUrl,
            timeoutSeconds=timeoutSeconds,
            properties=properties,
            _configuration=_configuration,
            **kwargs,
        )
