# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.42.0-01
    Generated by: https://openapi-generator.tech
"""

import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date, datetime  # noqa: F401

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from nexus_sdk import schemas  # noqa: F401


class AssetXO(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        class properties:
            downloadUrl = schemas.StrSchema
            path = schemas.StrSchema
            id = schemas.StrSchema
            repository = schemas.StrSchema
            format = schemas.StrSchema

            class checksum(schemas.DictSchema):
                class MetaOapg:
                    additional_properties = schemas.DictSchema

                def __getitem__(
                    self, name: typing.Union[str,]
                ) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                def get_item_oapg(
                    self, name: typing.Union[str,]
                ) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[
                        dict,
                        frozendict.frozendict,
                    ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[
                        MetaOapg.additional_properties,
                        dict,
                        frozendict.frozendict,
                    ],
                ) -> "checksum":
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            contentType = schemas.StrSchema
            lastModified = schemas.DateTimeSchema
            lastDownloaded = schemas.DateTimeSchema
            uploader = schemas.StrSchema
            uploaderIp = schemas.StrSchema
            fileSize = schemas.Int64Schema
            __annotations__ = {
                "downloadUrl": downloadUrl,
                "path": path,
                "id": id,
                "repository": repository,
                "format": format,
                "checksum": checksum,
                "contentType": contentType,
                "lastModified": lastModified,
                "lastDownloaded": lastDownloaded,
                "uploader": uploader,
                "uploaderIp": uploaderIp,
                "fileSize": fileSize,
            }

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["downloadUrl"]
    ) -> MetaOapg.properties.downloadUrl:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["path"]
    ) -> MetaOapg.properties.path:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["id"]
    ) -> MetaOapg.properties.id:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["repository"]
    ) -> MetaOapg.properties.repository:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["format"]
    ) -> MetaOapg.properties.format:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["checksum"]
    ) -> MetaOapg.properties.checksum:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["contentType"]
    ) -> MetaOapg.properties.contentType:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["lastModified"]
    ) -> MetaOapg.properties.lastModified:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["lastDownloaded"]
    ) -> MetaOapg.properties.lastDownloaded:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["uploader"]
    ) -> MetaOapg.properties.uploader:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["uploaderIp"]
    ) -> MetaOapg.properties.uploaderIp:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["fileSize"]
    ) -> MetaOapg.properties.fileSize:
        ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema:
        ...

    def __getitem__(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "downloadUrl",
                "path",
                "id",
                "repository",
                "format",
                "checksum",
                "contentType",
                "lastModified",
                "lastDownloaded",
                "uploader",
                "uploaderIp",
                "fileSize",
            ],
            str,
        ],
    ):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["downloadUrl"]
    ) -> typing.Union[MetaOapg.properties.downloadUrl, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["path"]
    ) -> typing.Union[MetaOapg.properties.path, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["id"]
    ) -> typing.Union[MetaOapg.properties.id, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["repository"]
    ) -> typing.Union[MetaOapg.properties.repository, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["format"]
    ) -> typing.Union[MetaOapg.properties.format, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["checksum"]
    ) -> typing.Union[MetaOapg.properties.checksum, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["contentType"]
    ) -> typing.Union[MetaOapg.properties.contentType, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["lastModified"]
    ) -> typing.Union[MetaOapg.properties.lastModified, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["lastDownloaded"]
    ) -> typing.Union[MetaOapg.properties.lastDownloaded, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["uploader"]
    ) -> typing.Union[MetaOapg.properties.uploader, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["uploaderIp"]
    ) -> typing.Union[MetaOapg.properties.uploaderIp, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["fileSize"]
    ) -> typing.Union[MetaOapg.properties.fileSize, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: str
    ) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[
            typing_extensions.Literal[
                "downloadUrl",
                "path",
                "id",
                "repository",
                "format",
                "checksum",
                "contentType",
                "lastModified",
                "lastDownloaded",
                "uploader",
                "uploaderIp",
                "fileSize",
            ],
            str,
        ],
    ):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[
            dict,
            frozendict.frozendict,
        ],
        downloadUrl: typing.Union[
            MetaOapg.properties.downloadUrl, str, schemas.Unset
        ] = schemas.unset,
        path: typing.Union[
            MetaOapg.properties.path, str, schemas.Unset
        ] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        repository: typing.Union[
            MetaOapg.properties.repository, str, schemas.Unset
        ] = schemas.unset,
        format: typing.Union[
            MetaOapg.properties.format, str, schemas.Unset
        ] = schemas.unset,
        checksum: typing.Union[
            MetaOapg.properties.checksum, dict, frozendict.frozendict, schemas.Unset
        ] = schemas.unset,
        contentType: typing.Union[
            MetaOapg.properties.contentType, str, schemas.Unset
        ] = schemas.unset,
        lastModified: typing.Union[
            MetaOapg.properties.lastModified, str, datetime, schemas.Unset
        ] = schemas.unset,
        lastDownloaded: typing.Union[
            MetaOapg.properties.lastDownloaded, str, datetime, schemas.Unset
        ] = schemas.unset,
        uploader: typing.Union[
            MetaOapg.properties.uploader, str, schemas.Unset
        ] = schemas.unset,
        uploaderIp: typing.Union[
            MetaOapg.properties.uploaderIp, str, schemas.Unset
        ] = schemas.unset,
        fileSize: typing.Union[
            MetaOapg.properties.fileSize, decimal.Decimal, int, schemas.Unset
        ] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[
            schemas.AnyTypeSchema,
            dict,
            frozendict.frozendict,
            str,
            date,
            datetime,
            uuid.UUID,
            int,
            float,
            decimal.Decimal,
            None,
            list,
            tuple,
            bytes,
        ],
    ) -> "AssetXO":
        return super().__new__(
            cls,
            *_args,
            downloadUrl=downloadUrl,
            path=path,
            id=id,
            repository=repository,
            format=format,
            checksum=checksum,
            contentType=contentType,
            lastModified=lastModified,
            lastDownloaded=lastDownloaded,
            uploader=uploader,
            uploaderIp=uploaderIp,
            fileSize=fileSize,
            _configuration=_configuration,
            **kwargs,
        )
