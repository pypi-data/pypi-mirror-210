# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cyberpay_utils.company.proto import company_pb2 as cyberpay__utils_dot_company_dot_proto_dot_company__pb2
from cyberpay_utils.company.proto import company_service_pb2 as cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2
from cyberpay_utils.company.proto import company_user_pb2 as cyberpay__utils_dot_company_dot_proto_dot_company__user__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class CompanyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscibeCompany = channel.unary_unary(
                '/company_service.proto.CompanyService/SubscibeCompany',
                request_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.SubscibeCompanyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetCompanyUsers = channel.unary_unary(
                '/company_service.proto.CompanyService/GetCompanyUsers',
                request_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUsersRequest.SerializeToString,
                response_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUsersResponse.FromString,
                )
        self.GetCompanyById = channel.unary_unary(
                '/company_service.proto.CompanyService/GetCompanyById',
                request_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyByIdRequest.SerializeToString,
                response_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__pb2.Company.FromString,
                )
        self.GetCompanyUserById = channel.unary_unary(
                '/company_service.proto.CompanyService/GetCompanyUserById',
                request_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserByIdRequest.SerializeToString,
                response_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__user__pb2.CompanyUser.FromString,
                )
        self.GetCompanyUserContractMeta = channel.unary_unary(
                '/company_service.proto.CompanyService/GetCompanyUserContractMeta',
                request_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserContractMetaRequest.SerializeToString,
                response_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserContractMetaResponse.FromString,
                )
        self.SetCompanyUserIsActive = channel.unary_unary(
                '/company_service.proto.CompanyService/SetCompanyUserIsActive',
                request_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.SetCompanyUserIsActiveRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class CompanyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscibeCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompanyUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompanyById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompanyUserById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompanyUserContractMeta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCompanyUserIsActive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompanyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscibeCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscibeCompany,
                    request_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.SubscibeCompanyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetCompanyUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompanyUsers,
                    request_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUsersRequest.FromString,
                    response_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUsersResponse.SerializeToString,
            ),
            'GetCompanyById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompanyById,
                    request_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyByIdRequest.FromString,
                    response_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__pb2.Company.SerializeToString,
            ),
            'GetCompanyUserById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompanyUserById,
                    request_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserByIdRequest.FromString,
                    response_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__user__pb2.CompanyUser.SerializeToString,
            ),
            'GetCompanyUserContractMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompanyUserContractMeta,
                    request_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserContractMetaRequest.FromString,
                    response_serializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserContractMetaResponse.SerializeToString,
            ),
            'SetCompanyUserIsActive': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCompanyUserIsActive,
                    request_deserializer=cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.SetCompanyUserIsActiveRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'company_service.proto.CompanyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CompanyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscibeCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/company_service.proto.CompanyService/SubscibeCompany',
            cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.SubscibeCompanyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompanyUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/company_service.proto.CompanyService/GetCompanyUsers',
            cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUsersRequest.SerializeToString,
            cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompanyById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/company_service.proto.CompanyService/GetCompanyById',
            cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyByIdRequest.SerializeToString,
            cyberpay__utils_dot_company_dot_proto_dot_company__pb2.Company.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompanyUserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/company_service.proto.CompanyService/GetCompanyUserById',
            cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserByIdRequest.SerializeToString,
            cyberpay__utils_dot_company_dot_proto_dot_company__user__pb2.CompanyUser.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompanyUserContractMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/company_service.proto.CompanyService/GetCompanyUserContractMeta',
            cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserContractMetaRequest.SerializeToString,
            cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.GetCompanyUserContractMetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCompanyUserIsActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/company_service.proto.CompanyService/SetCompanyUserIsActive',
            cyberpay__utils_dot_company_dot_proto_dot_company__service__pb2.SetCompanyUserIsActiveRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
