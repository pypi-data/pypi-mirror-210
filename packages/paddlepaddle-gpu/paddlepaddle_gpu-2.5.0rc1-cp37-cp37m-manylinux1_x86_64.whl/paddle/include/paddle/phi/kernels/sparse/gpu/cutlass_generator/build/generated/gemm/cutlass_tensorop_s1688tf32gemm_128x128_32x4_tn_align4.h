
/*
  Generated by gemm_operation.py - Do not edit.
*/
#pragma once
#ifdef PADDLE_WITH_CUTLASS

///////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////


namespace phi {
namespace sparse {

// Gemm operator cutlass_tensorop_s1688tf32gemm_128x128_32x4_tn_align4
template<cutlass::gemm::GemmUniversalMode Mode_ =
             cutlass::gemm::GemmUniversalMode::kGemm>
struct cutlass_tensorop_s1688tf32gemm_128x128_32x4_tn_align4 {
  using Gemm =
    cutlass::gemm::device::GemmUniversal<
      float,
      cutlass::layout::ColumnMajor,
      float,
      cutlass::layout::RowMajor,
      float,
      cutlass::layout::RowMajor,
      float,
      cutlass::arch::OpClassTensorOp,
      cutlass::arch::Sm80,
      cutlass::gemm::GemmShape<128, 128, 32>,
      cutlass::gemm::GemmShape<64, 64, 32>,
      cutlass::gemm::GemmShape<16, 8, 8>,
      
    cutlass::epilogue::thread::LinearCombination<
      float,
      4,
      float,
      float
    >
,
      cutlass::gemm::threadblock::GemmIdentityThreadblockSwizzle<8>,
      4,
      4,
      4,
      cutlass::arch::OpMultiplyAdd,
      cutlass::ComplexTransform::kNone,
      cutlass::ComplexTransform::kNone,
      true, // gather a
      true, // gather b
      false // scatter d
    >;
  static const cutlass::gemm::GemmUniversalMode Mode = Mode_;
};

}  // namespace sparse
}  // namespace phi
#endif
