
/*
  Generated by gemm_operation.py - Do not edit.
*/
#pragma once
#ifdef PADDLE_WITH_CUTLASS

///////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////


namespace phi {
namespace sparse {

// Gemm operator cutlass_tensorop_h16816gemm_128x256_64x3_nn_align8
template<cutlass::gemm::GemmUniversalMode Mode_ =
             cutlass::gemm::GemmUniversalMode::kGemm>
struct cutlass_tensorop_h16816gemm_128x256_64x3_nn_align8 {
  using Gemm =
    cutlass::gemm::device::GemmUniversal<
      cutlass::half_t,
      cutlass::layout::RowMajor,
      cutlass::half_t,
      cutlass::layout::RowMajor,
      cutlass::half_t,
      cutlass::layout::RowMajor,
      cutlass::half_t,
      cutlass::arch::OpClassTensorOp,
      cutlass::arch::Sm80,
      cutlass::gemm::GemmShape<128, 256, 64>,
      cutlass::gemm::GemmShape<64, 64, 64>,
      cutlass::gemm::GemmShape<16, 8, 16>,
      
    cutlass::epilogue::thread::LinearCombination<
      cutlass::half_t,
      8,
      cutlass::half_t,
      cutlass::half_t
    >
,
      cutlass::gemm::threadblock::GemmIdentityThreadblockSwizzle<8>,
      3,
      8,
      8,
      cutlass::arch::OpMultiplyAdd,
      cutlass::ComplexTransform::kNone,
      cutlass::ComplexTransform::kNone,
      true, // gather a
      false, // gather b
      true // scatter d
    >;
  static const cutlass::gemm::GemmUniversalMode Mode = Mode_;
};

}  // namespace sparse
}  // namespace phi
#endif
