# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libsbml_networkeditor
else:
    import _libsbml_networkeditor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def compareChar(c1, c2):
    return _libsbml_networkeditor.compareChar(c1, c2)

def stringCompare(str1, str2):
    return _libsbml_networkeditor.stringCompare(str1, str2)

def getListOfLayouts(document):
    return _libsbml_networkeditor.getListOfLayouts(document)

def getNumLayouts(*args):
    return _libsbml_networkeditor.getNumLayouts(*args)

def getLayout(*args):
    return _libsbml_networkeditor.getLayout(*args)

def addLayout(document, layout):
    return _libsbml_networkeditor.addLayout(document, layout)

def createLayout(document):
    return _libsbml_networkeditor.createLayout(document)

def removeAllLayouts(document):
    return _libsbml_networkeditor.removeAllLayouts(document)

def setDefaultLayoutFeatures(document, layout):
    return _libsbml_networkeditor.setDefaultLayoutFeatures(document, layout)

def isSetId(graphicalObject):
    return _libsbml_networkeditor.isSetId(graphicalObject)

def getId(graphicalObject):
    return _libsbml_networkeditor.getId(graphicalObject)

def setId(graphicalObject, sid):
    return _libsbml_networkeditor.setId(graphicalObject, sid)

def isSetName(graphicalObject):
    return _libsbml_networkeditor.isSetName(graphicalObject)

def getName(graphicalObject):
    return _libsbml_networkeditor.getName(graphicalObject)

def setName(graphicalObject, name):
    return _libsbml_networkeditor.setName(graphicalObject, name)

def getGraphicalObject(layout, id):
    return _libsbml_networkeditor.getGraphicalObject(layout, id)

def getNumCompartmentGlyphs(layout):
    return _libsbml_networkeditor.getNumCompartmentGlyphs(layout)

def getCompartmentGlyph(*args):
    return _libsbml_networkeditor.getCompartmentGlyph(*args)

def getCompartmentId(*args):
    return _libsbml_networkeditor.getCompartmentId(*args)

def isCompartmentGlyph(*args):
    return _libsbml_networkeditor.isCompartmentGlyph(*args)

def getNumSpeciesGlyphs(layout):
    return _libsbml_networkeditor.getNumSpeciesGlyphs(layout)

def getSpeciesGlyph(*args):
    return _libsbml_networkeditor.getSpeciesGlyph(*args)

def getSpeciesId(*args):
    return _libsbml_networkeditor.getSpeciesId(*args)

def isSpeciesGlyph(*args):
    return _libsbml_networkeditor.isSpeciesGlyph(*args)

def getNumReactionGlyphs(layout):
    return _libsbml_networkeditor.getNumReactionGlyphs(layout)

def getReactionGlyph(*args):
    return _libsbml_networkeditor.getReactionGlyph(*args)

def getReactionId(*args):
    return _libsbml_networkeditor.getReactionId(*args)

def isReactionGlyph(*args):
    return _libsbml_networkeditor.isReactionGlyph(*args)

def getNumSpeciesReferenceGlyphs(reactionGlyph):
    return _libsbml_networkeditor.getNumSpeciesReferenceGlyphs(reactionGlyph)

def getSpeciesReferenceGlyph(reactionGlyph, index):
    return _libsbml_networkeditor.getSpeciesReferenceGlyph(reactionGlyph, index)

def getSpeciesReferenceId(*args):
    return _libsbml_networkeditor.getSpeciesReferenceId(*args)

def getSpeciesGlyphId(*args):
    return _libsbml_networkeditor.getSpeciesGlyphId(*args)

def getRole(*args):
    return _libsbml_networkeditor.getRole(*args)

def isSpeciesReferenceGlyph(graphicalObject):
    return _libsbml_networkeditor.isSpeciesReferenceGlyph(graphicalObject)

def getNumTextGlyphs(layout):
    return _libsbml_networkeditor.getNumTextGlyphs(layout)

def getTextGlyph(*args):
    return _libsbml_networkeditor.getTextGlyph(*args)

def isSetText(*args):
    return _libsbml_networkeditor.isSetText(*args)

def getText(*args):
    return _libsbml_networkeditor.getText(*args)

def setText(*args):
    return _libsbml_networkeditor.setText(*args)

def isSetOriginOfTextId(*args):
    return _libsbml_networkeditor.isSetOriginOfTextId(*args)

def getOriginOfTextId(*args):
    return _libsbml_networkeditor.getOriginOfTextId(*args)

def setOriginOfTextId(*args):
    return _libsbml_networkeditor.setOriginOfTextId(*args)

def isSetGraphicalObjectId(*args):
    return _libsbml_networkeditor.isSetGraphicalObjectId(*args)

def getGraphicalObjectId(*args):
    return _libsbml_networkeditor.getGraphicalObjectId(*args)

def setGraphicalObjectId(*args):
    return _libsbml_networkeditor.setGraphicalObjectId(*args)

def isTextGlyph(*args):
    return _libsbml_networkeditor.isTextGlyph(*args)

def getPositionX(*args):
    return _libsbml_networkeditor.getPositionX(*args)

def setPositionX(*args):
    return _libsbml_networkeditor.setPositionX(*args)

def getPositionY(*args):
    return _libsbml_networkeditor.getPositionY(*args)

def setPositionY(*args):
    return _libsbml_networkeditor.setPositionY(*args)

def getDimensionWidth(*args):
    return _libsbml_networkeditor.getDimensionWidth(*args)

def setDimensionWidth(*args):
    return _libsbml_networkeditor.setDimensionWidth(*args)

def getDimensionHeight(*args):
    return _libsbml_networkeditor.getDimensionHeight(*args)

def setDimensionHeight(*args):
    return _libsbml_networkeditor.setDimensionHeight(*args)

def isSetCurve(*args):
    return _libsbml_networkeditor.isSetCurve(*args)

def getCurve(*args):
    return _libsbml_networkeditor.getCurve(*args)

def getNumCurveSegments(*args):
    return _libsbml_networkeditor.getNumCurveSegments(*args)

def getCurveSegment(*args):
    return _libsbml_networkeditor.getCurveSegment(*args)

def createLineCurveSegment(*args):
    return _libsbml_networkeditor.createLineCurveSegment(*args)

def createCubicBezierCurveSegment(*args):
    return _libsbml_networkeditor.createCubicBezierCurveSegment(*args)

def removeCurveSegment(*args):
    return _libsbml_networkeditor.removeCurveSegment(*args)

def isCubicBezier(*args):
    return _libsbml_networkeditor.isCubicBezier(*args)

def getCurveSegmentStartPointX(*args):
    return _libsbml_networkeditor.getCurveSegmentStartPointX(*args)

def setCurveSegmentStartPointX(*args):
    return _libsbml_networkeditor.setCurveSegmentStartPointX(*args)

def getCurveSegmentStartPointY(*args):
    return _libsbml_networkeditor.getCurveSegmentStartPointY(*args)

def setCurveSegmentStartPointY(*args):
    return _libsbml_networkeditor.setCurveSegmentStartPointY(*args)

def getCurveSegmentEndPointX(*args):
    return _libsbml_networkeditor.getCurveSegmentEndPointX(*args)

def setCurveSegmentEndPointX(*args):
    return _libsbml_networkeditor.setCurveSegmentEndPointX(*args)

def getCurveSegmentEndPointY(*args):
    return _libsbml_networkeditor.getCurveSegmentEndPointY(*args)

def setCurveSegmentEndPointY(*args):
    return _libsbml_networkeditor.setCurveSegmentEndPointY(*args)

def getCurveSegmentBasePoint1X(*args):
    return _libsbml_networkeditor.getCurveSegmentBasePoint1X(*args)

def setCurveSegmentBasePoint1X(*args):
    return _libsbml_networkeditor.setCurveSegmentBasePoint1X(*args)

def getCurveSegmentBasePoint1Y(*args):
    return _libsbml_networkeditor.getCurveSegmentBasePoint1Y(*args)

def setCurveSegmentBasePoint1Y(*args):
    return _libsbml_networkeditor.setCurveSegmentBasePoint1Y(*args)

def getCurveSegmentBasePoint2X(*args):
    return _libsbml_networkeditor.getCurveSegmentBasePoint2X(*args)

def setCurveSegmentBasePoint2X(*args):
    return _libsbml_networkeditor.setCurveSegmentBasePoint2X(*args)

def getCurveSegmentBasePoint2Y(*args):
    return _libsbml_networkeditor.getCurveSegmentBasePoint2Y(*args)

def setCurveSegmentBasePoint2Y(*args):
    return _libsbml_networkeditor.setCurveSegmentBasePoint2Y(*args)

def getListOfGlobalRenderInformation(document):
    return _libsbml_networkeditor.getListOfGlobalRenderInformation(document)

def getNumGlobalRenderInformation(*args):
    return _libsbml_networkeditor.getNumGlobalRenderInformation(*args)

def getGlobalRenderInformation(*args):
    return _libsbml_networkeditor.getGlobalRenderInformation(*args)

def addGlobalRenderInformation(document, globalRenderInformation):
    return _libsbml_networkeditor.addGlobalRenderInformation(document, globalRenderInformation)

def createGlobalRenderInformation(document):
    return _libsbml_networkeditor.createGlobalRenderInformation(document)

def removeAllGlobalRenderInformation(document):
    return _libsbml_networkeditor.removeAllGlobalRenderInformation(document)

def setDefaultGlobalRenderInformationFeatures(document, globalRenderInformation):
    return _libsbml_networkeditor.setDefaultGlobalRenderInformationFeatures(document, globalRenderInformation)

def getListOfLocalRenderInformation(layout):
    return _libsbml_networkeditor.getListOfLocalRenderInformation(layout)

def getNumLocalRenderInformation(*args):
    return _libsbml_networkeditor.getNumLocalRenderInformation(*args)

def getLocalRenderInformation(*args):
    return _libsbml_networkeditor.getLocalRenderInformation(*args)

def addLocalRenderInformation(layout, localRenderInformation):
    return _libsbml_networkeditor.addLocalRenderInformation(layout, localRenderInformation)

def createLocalRenderInformation(layout):
    return _libsbml_networkeditor.createLocalRenderInformation(layout)

def removeAllLocalRenderInformation(layout):
    return _libsbml_networkeditor.removeAllLocalRenderInformation(layout)

def setDefaultLocalRenderInformationFeatures(document, layout, localRenderInformation):
    return _libsbml_networkeditor.setDefaultLocalRenderInformationFeatures(document, layout, localRenderInformation)

def isSetBackgroundColor(globalRenderInformation):
    return _libsbml_networkeditor.isSetBackgroundColor(globalRenderInformation)

def getBackgroundColor(globalRenderInformation):
    return _libsbml_networkeditor.getBackgroundColor(globalRenderInformation)

def setBackgroundColor(globalRenderInformation, backgroundColor):
    return _libsbml_networkeditor.setBackgroundColor(globalRenderInformation, backgroundColor)

def getColorDefinition(renderInformationBase, sid):
    return _libsbml_networkeditor.getColorDefinition(renderInformationBase, sid)

def isSetValue(*args):
    return _libsbml_networkeditor.isSetValue(*args)

def getValue(*args):
    return _libsbml_networkeditor.getValue(*args)

def setValue(*args):
    return _libsbml_networkeditor.setValue(*args)

def getGradientDefinition(renderInformationBase, sid):
    return _libsbml_networkeditor.getGradientDefinition(renderInformationBase, sid)

def isLinearGradient(*args):
    return _libsbml_networkeditor.isLinearGradient(*args)

def isRadialGradient(*args):
    return _libsbml_networkeditor.isRadialGradient(*args)

def isSetSpreadMethod(*args):
    return _libsbml_networkeditor.isSetSpreadMethod(*args)

def getSpreadMethod(*args):
    return _libsbml_networkeditor.getSpreadMethod(*args)

def setSpreadMethod(*args):
    return _libsbml_networkeditor.setSpreadMethod(*args)

def getNumGradientStops(*args):
    return _libsbml_networkeditor.getNumGradientStops(*args)

def getGradientStop(*args):
    return _libsbml_networkeditor.getGradientStop(*args)

def isSetOffset(*args):
    return _libsbml_networkeditor.isSetOffset(*args)

def getOffset(*args):
    return _libsbml_networkeditor.getOffset(*args)

def setOffset(*args):
    return _libsbml_networkeditor.setOffset(*args)

def isSetStopColor(*args):
    return _libsbml_networkeditor.isSetStopColor(*args)

def getStopColor(*args):
    return _libsbml_networkeditor.getStopColor(*args)

def setStopColor(*args):
    return _libsbml_networkeditor.setStopColor(*args)

def isSetLinearGradientX1(*args):
    return _libsbml_networkeditor.isSetLinearGradientX1(*args)

def getLinearGradientX1(*args):
    return _libsbml_networkeditor.getLinearGradientX1(*args)

def setLinearGradientX1(*args):
    return _libsbml_networkeditor.setLinearGradientX1(*args)

def isSetLinearGradientX2(*args):
    return _libsbml_networkeditor.isSetLinearGradientX2(*args)

def getLinearGradientX2(*args):
    return _libsbml_networkeditor.getLinearGradientX2(*args)

def setLinearGradientX2(*args):
    return _libsbml_networkeditor.setLinearGradientX2(*args)

def isSetLinearGradientY1(*args):
    return _libsbml_networkeditor.isSetLinearGradientY1(*args)

def getLinearGradientY1(*args):
    return _libsbml_networkeditor.getLinearGradientY1(*args)

def setLinearGradientY1(*args):
    return _libsbml_networkeditor.setLinearGradientY1(*args)

def isSetLinearGradientY2(*args):
    return _libsbml_networkeditor.isSetLinearGradientY2(*args)

def getLinearGradientY2(*args):
    return _libsbml_networkeditor.getLinearGradientY2(*args)

def setLinearGradientY2(*args):
    return _libsbml_networkeditor.setLinearGradientY2(*args)

def isSetRadialGradientCx(*args):
    return _libsbml_networkeditor.isSetRadialGradientCx(*args)

def getRadialGradientCx(*args):
    return _libsbml_networkeditor.getRadialGradientCx(*args)

def setRadialGradientCx(*args):
    return _libsbml_networkeditor.setRadialGradientCx(*args)

def isSetRadialGradientCy(*args):
    return _libsbml_networkeditor.isSetRadialGradientCy(*args)

def getRadialGradientCy(*args):
    return _libsbml_networkeditor.getRadialGradientCy(*args)

def setRadialGradientCy(*args):
    return _libsbml_networkeditor.setRadialGradientCy(*args)

def isSetRadialGradientFx(*args):
    return _libsbml_networkeditor.isSetRadialGradientFx(*args)

def getRadialGradientFx(*args):
    return _libsbml_networkeditor.getRadialGradientFx(*args)

def setRadialGradientFx(*args):
    return _libsbml_networkeditor.setRadialGradientFx(*args)

def isSetRadialGradientFy(*args):
    return _libsbml_networkeditor.isSetRadialGradientFy(*args)

def getRadialGradientFy(*args):
    return _libsbml_networkeditor.getRadialGradientFy(*args)

def setRadialGradientFy(*args):
    return _libsbml_networkeditor.setRadialGradientFy(*args)

def isSetRadialGradientR(*args):
    return _libsbml_networkeditor.isSetRadialGradientR(*args)

def getRadialGradientR(*args):
    return _libsbml_networkeditor.getRadialGradientR(*args)

def setRadialGradientR(*args):
    return _libsbml_networkeditor.setRadialGradientR(*args)

def getLineEnding(renderInformationBase, sid):
    return _libsbml_networkeditor.getLineEnding(renderInformationBase, sid)

def isSetEnableRotationalMapping(*args):
    return _libsbml_networkeditor.isSetEnableRotationalMapping(*args)

def getEnableRotationalMapping(*args):
    return _libsbml_networkeditor.getEnableRotationalMapping(*args)

def setEnableRotationalMapping(*args):
    return _libsbml_networkeditor.setEnableRotationalMapping(*args)

def getBoundingBox(*args):
    return _libsbml_networkeditor.getBoundingBox(*args)

def getRenderGroupOfLineEnding(renderInformationBase, sid):
    return _libsbml_networkeditor.getRenderGroupOfLineEnding(renderInformationBase, sid)

def getStyle(*args):
    return _libsbml_networkeditor.getStyle(*args)

def getStyleById(*args):
    return _libsbml_networkeditor.getStyleById(*args)

def getStyleByRole(*args):
    return _libsbml_networkeditor.getStyleByRole(*args)

def getStyleByType(*args):
    return _libsbml_networkeditor.getStyleByType(*args)

def getRenderGroup(*args):
    return _libsbml_networkeditor.getRenderGroup(*args)

def isSetStrokeColor(*args):
    return _libsbml_networkeditor.isSetStrokeColor(*args)

def getStrokeColor(*args):
    return _libsbml_networkeditor.getStrokeColor(*args)

def setStrokeColor(*args):
    return _libsbml_networkeditor.setStrokeColor(*args)

def isSetStrokeWidth(*args):
    return _libsbml_networkeditor.isSetStrokeWidth(*args)

def getStrokeWidth(*args):
    return _libsbml_networkeditor.getStrokeWidth(*args)

def setStrokeWidth(*args):
    return _libsbml_networkeditor.setStrokeWidth(*args)

def isSetStrokeDashArray(*args):
    return _libsbml_networkeditor.isSetStrokeDashArray(*args)

def getStrokeDashArray(*args):
    return _libsbml_networkeditor.getStrokeDashArray(*args)

def setStrokeDashArray(*args):
    return _libsbml_networkeditor.setStrokeDashArray(*args)

def getNumStrokeDashes(*args):
    return _libsbml_networkeditor.getNumStrokeDashes(*args)

def getDash(*args):
    return _libsbml_networkeditor.getDash(*args)

def isSetFontColor(*args):
    return _libsbml_networkeditor.isSetFontColor(*args)

def getFontColor(*args):
    return _libsbml_networkeditor.getFontColor(*args)

def setFontColor(*args):
    return _libsbml_networkeditor.setFontColor(*args)

def isSetFontFamily(*args):
    return _libsbml_networkeditor.isSetFontFamily(*args)

def getFontFamily(*args):
    return _libsbml_networkeditor.getFontFamily(*args)

def setFontFamily(*args):
    return _libsbml_networkeditor.setFontFamily(*args)

def isSetFontSize(*args):
    return _libsbml_networkeditor.isSetFontSize(*args)

def getFontSize(*args):
    return _libsbml_networkeditor.getFontSize(*args)

def setFontSize(*args):
    return _libsbml_networkeditor.setFontSize(*args)

def isSetFontWeight(*args):
    return _libsbml_networkeditor.isSetFontWeight(*args)

def getFontWeight(*args):
    return _libsbml_networkeditor.getFontWeight(*args)

def setFontWeight(*args):
    return _libsbml_networkeditor.setFontWeight(*args)

def isSetFontStyle(*args):
    return _libsbml_networkeditor.isSetFontStyle(*args)

def getFontStyle(*args):
    return _libsbml_networkeditor.getFontStyle(*args)

def setFontStyle(*args):
    return _libsbml_networkeditor.setFontStyle(*args)

def isSetTextAnchor(*args):
    return _libsbml_networkeditor.isSetTextAnchor(*args)

def getTextAnchor(*args):
    return _libsbml_networkeditor.getTextAnchor(*args)

def setTextAnchor(*args):
    return _libsbml_networkeditor.setTextAnchor(*args)

def isSetVTextAnchor(*args):
    return _libsbml_networkeditor.isSetVTextAnchor(*args)

def getVTextAnchor(*args):
    return _libsbml_networkeditor.getVTextAnchor(*args)

def setVTextAnchor(*args):
    return _libsbml_networkeditor.setVTextAnchor(*args)

def isSetFillColor(*args):
    return _libsbml_networkeditor.isSetFillColor(*args)

def getFillColor(*args):
    return _libsbml_networkeditor.getFillColor(*args)

def setFillColor(*args):
    return _libsbml_networkeditor.setFillColor(*args)

def isSetStartHead(*args):
    return _libsbml_networkeditor.isSetStartHead(*args)

def getStartHead(*args):
    return _libsbml_networkeditor.getStartHead(*args)

def setStartHead(*args):
    return _libsbml_networkeditor.setStartHead(*args)

def isSetEndHead(*args):
    return _libsbml_networkeditor.isSetEndHead(*args)

def getEndHead(*args):
    return _libsbml_networkeditor.getEndHead(*args)

def setEndHead(*args):
    return _libsbml_networkeditor.setEndHead(*args)

def getNumGeometricShapes(*args):
    return _libsbml_networkeditor.getNumGeometricShapes(*args)

def getGeometricShape(*args):
    return _libsbml_networkeditor.getGeometricShape(*args)

def addGeometricShape(*args):
    return _libsbml_networkeditor.addGeometricShape(*args)

def removeGeometricShape(*args):
    return _libsbml_networkeditor.removeGeometricShape(*args)

def isRectangle(*args):
    return _libsbml_networkeditor.isRectangle(*args)

def isEllipse(*args):
    return _libsbml_networkeditor.isEllipse(*args)

def isPolygon(*args):
    return _libsbml_networkeditor.isPolygon(*args)

def isRenderCurve(*args):
    return _libsbml_networkeditor.isRenderCurve(*args)

def isImage(*args):
    return _libsbml_networkeditor.isImage(*args)

def isText(*args):
    return _libsbml_networkeditor.isText(*args)

def isSetGeometricShapeX(*args):
    return _libsbml_networkeditor.isSetGeometricShapeX(*args)

def getGeometricShapeX(*args):
    return _libsbml_networkeditor.getGeometricShapeX(*args)

def setGeometricShapeX(*args):
    return _libsbml_networkeditor.setGeometricShapeX(*args)

def isSetGeometricShapeY(*args):
    return _libsbml_networkeditor.isSetGeometricShapeY(*args)

def getGeometricShapeY(*args):
    return _libsbml_networkeditor.getGeometricShapeY(*args)

def setGeometricShapeY(*args):
    return _libsbml_networkeditor.setGeometricShapeY(*args)

def isSetGeometricShapeWidth(*args):
    return _libsbml_networkeditor.isSetGeometricShapeWidth(*args)

def getGeometricShapeWidth(*args):
    return _libsbml_networkeditor.getGeometricShapeWidth(*args)

def setGeometricShapeWidth(*args):
    return _libsbml_networkeditor.setGeometricShapeWidth(*args)

def isSetGeometricShapeHeight(*args):
    return _libsbml_networkeditor.isSetGeometricShapeHeight(*args)

def getGeometricShapeHeight(*args):
    return _libsbml_networkeditor.getGeometricShapeHeight(*args)

def setGeometricShapeHeight(*args):
    return _libsbml_networkeditor.setGeometricShapeHeight(*args)

def isSetGeometricShapeRatio(*args):
    return _libsbml_networkeditor.isSetGeometricShapeRatio(*args)

def getGeometricShapeRatio(*args):
    return _libsbml_networkeditor.getGeometricShapeRatio(*args)

def setGeometricShapeRatio(*args):
    return _libsbml_networkeditor.setGeometricShapeRatio(*args)

def isSetGeometricShapeCornerCurvatureRadiusX(*args):
    return _libsbml_networkeditor.isSetGeometricShapeCornerCurvatureRadiusX(*args)

def getGeometricShapeCornerCurvatureRadiusX(*args):
    return _libsbml_networkeditor.getGeometricShapeCornerCurvatureRadiusX(*args)

def setGeometricShapeCornerCurvatureRadiusX(*args):
    return _libsbml_networkeditor.setGeometricShapeCornerCurvatureRadiusX(*args)

def isSetGeometricShapeCornerCurvatureRadiusY(*args):
    return _libsbml_networkeditor.isSetGeometricShapeCornerCurvatureRadiusY(*args)

def getGeometricShapeCornerCurvatureRadiusY(*args):
    return _libsbml_networkeditor.getGeometricShapeCornerCurvatureRadiusY(*args)

def setGeometricShapeCornerCurvatureRadiusY(*args):
    return _libsbml_networkeditor.setGeometricShapeCornerCurvatureRadiusY(*args)

def isSetGeometricShapeCenterX(*args):
    return _libsbml_networkeditor.isSetGeometricShapeCenterX(*args)

def getGeometricShapeCenterX(*args):
    return _libsbml_networkeditor.getGeometricShapeCenterX(*args)

def setGeometricShapeCenterX(*args):
    return _libsbml_networkeditor.setGeometricShapeCenterX(*args)

def isSetGeometricShapeCenterY(*args):
    return _libsbml_networkeditor.isSetGeometricShapeCenterY(*args)

def getGeometricShapeCenterY(*args):
    return _libsbml_networkeditor.getGeometricShapeCenterY(*args)

def setGeometricShapeCenterY(*args):
    return _libsbml_networkeditor.setGeometricShapeCenterY(*args)

def isSetGeometricShapeRadiusX(*args):
    return _libsbml_networkeditor.isSetGeometricShapeRadiusX(*args)

def getGeometricShapeRadiusX(*args):
    return _libsbml_networkeditor.getGeometricShapeRadiusX(*args)

def setGeometricShapeRadiusX(*args):
    return _libsbml_networkeditor.setGeometricShapeRadiusX(*args)

def isSetGeometricShapeRadiusY(*args):
    return _libsbml_networkeditor.isSetGeometricShapeRadiusY(*args)

def getGeometricShapeRadiusY(*args):
    return _libsbml_networkeditor.getGeometricShapeRadiusY(*args)

def setGeometricShapeRadiusY(*args):
    return _libsbml_networkeditor.setGeometricShapeRadiusY(*args)

def getGeometricShapeNumElements(*args):
    return _libsbml_networkeditor.getGeometricShapeNumElements(*args)

def getGeometricShapeElementX(*args):
    return _libsbml_networkeditor.getGeometricShapeElementX(*args)

def setGeometricShapeElementX(*args):
    return _libsbml_networkeditor.setGeometricShapeElementX(*args)

def getGeometricShapeElementY(*args):
    return _libsbml_networkeditor.getGeometricShapeElementY(*args)

def setGeometricShapeElementY(*args):
    return _libsbml_networkeditor.setGeometricShapeElementY(*args)

def getGeometricShapeBasePoint1X(*args):
    return _libsbml_networkeditor.getGeometricShapeBasePoint1X(*args)

def setGeometricShapeBasePoint1X(*args):
    return _libsbml_networkeditor.setGeometricShapeBasePoint1X(*args)

def getGeometricShapeBasePoint1Y(*args):
    return _libsbml_networkeditor.getGeometricShapeBasePoint1Y(*args)

def setGeometricShapeBasePoint1Y(*args):
    return _libsbml_networkeditor.setGeometricShapeBasePoint1Y(*args)

def getGeometricShapeBasePoint2X(*args):
    return _libsbml_networkeditor.getGeometricShapeBasePoint2X(*args)

def setGeometricShapeBasePoint2X(*args):
    return _libsbml_networkeditor.setGeometricShapeBasePoint2X(*args)

def getGeometricShapeBasePoint2Y(*args):
    return _libsbml_networkeditor.getGeometricShapeBasePoint2Y(*args)

def setGeometricShapeBasePoint2Y(*args):
    return _libsbml_networkeditor.setGeometricShapeBasePoint2Y(*args)

def addRenderPointToGeometricShape(*args):
    return _libsbml_networkeditor.addRenderPointToGeometricShape(*args)

def addRenderCubicBezierToGeometricShape(*args):
    return _libsbml_networkeditor.addRenderCubicBezierToGeometricShape(*args)

def removeElementFromGeometricShape(*args):
    return _libsbml_networkeditor.removeElementFromGeometricShape(*args)

def isRenderCubicBezier(*args):
    return _libsbml_networkeditor.isRenderCubicBezier(*args)

def isSetGeometricShapeHref(*args):
    return _libsbml_networkeditor.isSetGeometricShapeHref(*args)

def getGeometricShapeHref(*args):
    return _libsbml_networkeditor.getGeometricShapeHref(*args)

def setGeometricShapeHref(*args):
    return _libsbml_networkeditor.setGeometricShapeHref(*args)

def getObjectRole(*args):
    return _libsbml_networkeditor.getObjectRole(*args)


