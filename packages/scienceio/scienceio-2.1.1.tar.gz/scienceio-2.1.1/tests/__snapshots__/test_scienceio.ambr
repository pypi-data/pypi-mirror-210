# name: test_autogenerated__process[identify_phi][docstring]
  '''
  Make a identify-phi request to the ScienceIO API, and returns the result when completed.
  
  Args:
      text (str): The input text to process using the identify-phi model.
  
  Returns:
      dict: The output of the identify-phi API call with the given input text.
  '''
# ---
# name: test_autogenerated__process[identify_phi][payload]
  dict({
    'annotations': list([
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[PATIENT]',
            'score': 0.998,
          }),
        }),
        'span': dict({
          'end': 12,
          'start': 0,
        }),
        'text': 'Romeo Santos',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[DOCTOR]',
            'score': 0.999,
          }),
        }),
        'span': dict({
          'end': 56,
          'start': 42,
        }),
        'text': 'Geoffrey Royce',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[DATE]',
          }),
          'phi_type': dict({
            'label': '[DATE]',
            'score': 1.0,
          }),
        }),
        'span': dict({
          'end': 77,
          'start': 60,
        }),
        'text': 'December 21, 2020',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[PATIENT]',
            'score': 0.999,
          }),
        }),
        'span': dict({
          'end': 89,
          'start': 83,
        }),
        'text': 'Santos',
      }),
    ]),
    'input_text': 'Romeo Santos made an appointment with Dr. Geoffrey Royce on December 21, 2020. Mr. Santos was complaining of symptoms of alcohol overdose, and showed signs of possible Capgras delusion.',
  })
# ---
# name: test_autogenerated__process[redact_phi][docstring]
  '''
  Make a redact-phi request to the ScienceIO API, and returns the result when completed.
  
  Args:
      text (str): The input text to process using the redact-phi model.
  
  Returns:
      dict: The output of the redact-phi API call with the given input text.
  '''
# ---
# name: test_autogenerated__process[redact_phi][payload]
  dict({
    'annotations': list([
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[PATIENT]',
            'score': 0.998,
          }),
        }),
        'span': dict({
          'end': 9,
          'start': 0,
        }),
        'text': '[PATIENT]',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[DOCTOR]',
            'score': 0.999,
          }),
        }),
        'span': dict({
          'end': 47,
          'start': 39,
        }),
        'text': '[DOCTOR]',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[DATE]',
          }),
          'phi_type': dict({
            'label': '[DATE]',
            'score': 1.0,
          }),
        }),
        'span': dict({
          'end': 57,
          'start': 51,
        }),
        'text': '[DATE]',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[PATIENT]',
            'score': 0.999,
          }),
        }),
        'span': dict({
          'end': 72,
          'start': 63,
        }),
        'text': '[PATIENT]',
      }),
    ]),
    'output_text': '[PATIENT] made an appointment with Dr. [DOCTOR] on [DATE]. Mr. [PATIENT] was complaining of symptoms of alcohol overdose, and showed signs of possible Capgras delusion.',
  })
# ---
# name: test_autogenerated__process[structure][docstring]
  '''
  Make a structure request to the ScienceIO API, and returns the result when completed.
  
  Args:
      text (str): The input text to process using the structure model.
  
  Returns:
      dict: The output of the structure API call with the given input text.
  '''
# ---
# name: test_autogenerated__process[structure][payload]
  dict({
    'spans': list([
      dict({
        'concept_id': 'UMLS:C5203670',
        'concept_name': 'COVID-19',
        'concept_type': 'Medical Conditions',
        'pos_end': 12,
        'pos_start': 4,
        'text': 'COVID-19',
      }),
      dict({
        'concept_id': 'UMLS:C1615608',
        'concept_name': 'Pandemics',
        'concept_type': 'Anatomy & Physiology',
        'pos_end': 21,
        'pos_start': 13,
        'text': 'pandemic',
      }),
      dict({
        'concept_id': 'UMLS:C0008059',
        'concept_name': 'Child',
        'concept_type': 'Context',
        'pos_end': 81,
        'pos_start': 73,
        'text': 'children',
      }),
      dict({
        'concept_id': 'UMLS:C0001779',
        'concept_name': 'Age',
        'concept_type': 'Anatomy & Physiology',
        'pos_end': 90,
        'pos_start': 87,
        'text': 'Age',
      }),
      dict({
        'concept_id': 'UMLS:C0008059',
        'concept_name': 'Child',
        'concept_type': 'Context',
        'pos_end': 151,
        'pos_start': 143,
        'text': 'children',
      }),
      dict({
        'concept_id': 'UMLS:C0009450',
        'concept_name': 'Communicable Diseases',
        'concept_type': 'Medical Conditions',
        'pos_end': 192,
        'pos_start': 183,
        'text': 'infection',
      }),
    ]),
    'text': 'The COVID-19 pandemic has shown a markedly low proportion of cases among children 1-4. Age disparities in observed cases could be explained by children having lower susceptibility to infection, lower propensity to show clinical symptoms or both.',
  })
# ---
# name: test_autogenerated__submit_and_poll[identify_phi][payload]
  dict({
    'annotations': list([
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[PATIENT]',
            'score': 0.998,
          }),
        }),
        'span': dict({
          'end': 12,
          'start': 0,
        }),
        'text': 'Romeo Santos',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[DOCTOR]',
            'score': 0.999,
          }),
        }),
        'span': dict({
          'end': 56,
          'start': 42,
        }),
        'text': 'Geoffrey Royce',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[DATE]',
          }),
          'phi_type': dict({
            'label': '[DATE]',
            'score': 1.0,
          }),
        }),
        'span': dict({
          'end': 77,
          'start': 60,
        }),
        'text': 'December 21, 2020',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[PATIENT]',
            'score': 0.999,
          }),
        }),
        'span': dict({
          'end': 89,
          'start': 83,
        }),
        'text': 'Santos',
      }),
    ]),
    'input_text': 'Romeo Santos made an appointment with Dr. Geoffrey Royce on December 21, 2020. Mr. Santos was complaining of symptoms of alcohol overdose, and showed signs of possible Capgras delusion.',
  })
# ---
# name: test_autogenerated__submit_and_poll[identify_phi][poller_docstring]
  '''
  Fetches the results of a previous identify-phi request to the ScienceIO API.
  
  Args:
      request_id (str): The id for the request, as returned by `submit_identify_phi_request`.
  
  Returns:
      Optional[dict]: The output of the identify-phi API call with the given input text, if the request is completed. Otherwise, `None`.
  '''
# ---
# name: test_autogenerated__submit_and_poll[identify_phi][submit_docstring]
  '''
  Submits a identify-phi request to the ScienceIO API, and returns a request id to fetch results at a later time.
  
  Args:
      text (str): The input text to process using the identify-phi model.
  
  Returns:
      str: The id for this request, usable with `get_identify_phi_response`.
  '''
# ---
# name: test_autogenerated__submit_and_poll[redact_phi][payload]
  dict({
    'annotations': list([
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[PATIENT]',
            'score': 0.998,
          }),
        }),
        'span': dict({
          'end': 9,
          'start': 0,
        }),
        'text': '[PATIENT]',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[DOCTOR]',
            'score': 0.999,
          }),
        }),
        'span': dict({
          'end': 47,
          'start': 39,
        }),
        'text': '[DOCTOR]',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[DATE]',
          }),
          'phi_type': dict({
            'label': '[DATE]',
            'score': 1.0,
          }),
        }),
        'span': dict({
          'end': 57,
          'start': 51,
        }),
        'text': '[DATE]',
      }),
      dict({
        'labels': dict({
          'category': dict({
            'label': '[PERSON]',
          }),
          'phi_type': dict({
            'label': '[PATIENT]',
            'score': 0.999,
          }),
        }),
        'span': dict({
          'end': 72,
          'start': 63,
        }),
        'text': '[PATIENT]',
      }),
    ]),
    'output_text': '[PATIENT] made an appointment with Dr. [DOCTOR] on [DATE]. Mr. [PATIENT] was complaining of symptoms of alcohol overdose, and showed signs of possible Capgras delusion.',
  })
# ---
# name: test_autogenerated__submit_and_poll[redact_phi][poller_docstring]
  '''
  Fetches the results of a previous redact-phi request to the ScienceIO API.
  
  Args:
      request_id (str): The id for the request, as returned by `submit_redact_phi_request`.
  
  Returns:
      Optional[dict]: The output of the redact-phi API call with the given input text, if the request is completed. Otherwise, `None`.
  '''
# ---
# name: test_autogenerated__submit_and_poll[redact_phi][submit_docstring]
  '''
  Submits a redact-phi request to the ScienceIO API, and returns a request id to fetch results at a later time.
  
  Args:
      text (str): The input text to process using the redact-phi model.
  
  Returns:
      str: The id for this request, usable with `get_redact_phi_response`.
  '''
# ---
# name: test_autogenerated__submit_and_poll[structure][payload]
  dict({
    'spans': list([
      dict({
        'concept_id': 'UMLS:C5203670',
        'concept_name': 'COVID-19',
        'concept_type': 'Medical Conditions',
        'pos_end': 12,
        'pos_start': 4,
        'text': 'COVID-19',
      }),
      dict({
        'concept_id': 'UMLS:C1615608',
        'concept_name': 'Pandemics',
        'concept_type': 'Anatomy & Physiology',
        'pos_end': 21,
        'pos_start': 13,
        'text': 'pandemic',
      }),
      dict({
        'concept_id': 'UMLS:C0008059',
        'concept_name': 'Child',
        'concept_type': 'Context',
        'pos_end': 81,
        'pos_start': 73,
        'text': 'children',
      }),
      dict({
        'concept_id': 'UMLS:C0001779',
        'concept_name': 'Age',
        'concept_type': 'Anatomy & Physiology',
        'pos_end': 90,
        'pos_start': 87,
        'text': 'Age',
      }),
      dict({
        'concept_id': 'UMLS:C0008059',
        'concept_name': 'Child',
        'concept_type': 'Context',
        'pos_end': 151,
        'pos_start': 143,
        'text': 'children',
      }),
      dict({
        'concept_id': 'UMLS:C0009450',
        'concept_name': 'Communicable Diseases',
        'concept_type': 'Medical Conditions',
        'pos_end': 192,
        'pos_start': 183,
        'text': 'infection',
      }),
    ]),
    'text': 'The COVID-19 pandemic has shown a markedly low proportion of cases among children 1-4. Age disparities in observed cases could be explained by children having lower susceptibility to infection, lower propensity to show clinical symptoms or both.',
  })
# ---
# name: test_autogenerated__submit_and_poll[structure][poller_docstring]
  '''
  Fetches the results of a previous structure request to the ScienceIO API.
  
  Args:
      request_id (str): The id for the request, as returned by `submit_structure_request`.
  
  Returns:
      Optional[dict]: The output of the structure API call with the given input text, if the request is completed. Otherwise, `None`.
  '''
# ---
# name: test_autogenerated__submit_and_poll[structure][submit_docstring]
  '''
  Submits a structure request to the ScienceIO API, and returns a request id to fetch results at a later time.
  
  Args:
      text (str): The input text to process using the structure model.
  
  Returns:
      str: The id for this request, usable with `get_structure_response`.
  '''
# ---
# name: test_error_cases[blocked_api_user_submit]
  dict({
    'serialized_exception': '"Your free trial has ended. Please upgrade your plan by visiting science.io/pricing to proceed"',
    'status_code': 403,
  })
# ---
# name: test_error_cases[expired_request_id_poll]
  dict({
    'serialized_exception': '"An error occured, please email api_support@science.io for assistance."',
    'status_code': 410,
  })
# ---
# name: test_error_cases[invalid_api_key_too_short_submit]
  dict({
    'serialized_exception': '{"message": "Invalid request", "errors": {"api_id": ["ensure this value has at least 20 characters"]}}',
    'status_code': 400,
  })
# ---
# name: test_error_cases[invalid_api_secret_submit]
  dict({
    'serialized_exception': '{"message": "Invalid request", "errors": {"api_secret": ["value is not a valid uuid"]}}',
    'status_code': 400,
  })
# ---
# name: test_error_cases[lambda_cold_start_timeout_submit]
  dict({
    'serialized_exception': '"An error occured, please email api_support@science.io for assistance."',
    'status_code': 503,
  })
# ---
# name: test_error_cases[unknown_api_key_submit]
  dict({
    'serialized_exception': '"API key not found"',
    'status_code': 404,
  })
# ---
# name: test_error_cases[unknown_request_id_poll]
  dict({
    'serialized_exception': '"Request id xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx not found"',
    'status_code': 404,
  })
# ---
