"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Contains enums and messages reused throught the Microgrid API definitions.

Copyright:
Copyright 2022 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""
import builtins
import collections.abc
import frequenz.api.common.metrics_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ErrorLevel:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ErrorLevelEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ErrorLevel.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ERROR_LEVEL_UNSPECIFIED: _ErrorLevel.ValueType  # 0
    """Unspecified component error."""
    ERROR_LEVEL_WARN: _ErrorLevel.ValueType  # 1
    """Action must be taken to prevent a severe error from occurring in the
    future.
    """
    ERROR_LEVEL_CRITICAL: _ErrorLevel.ValueType  # 2
    """A severe error that causes the component to fail. Immediate action must be
    taken.
    """

class ErrorLevel(_ErrorLevel, metaclass=_ErrorLevelEnumTypeWrapper):
    """Error levels definitions."""

ERROR_LEVEL_UNSPECIFIED: ErrorLevel.ValueType  # 0
"""Unspecified component error."""
ERROR_LEVEL_WARN: ErrorLevel.ValueType  # 1
"""Action must be taken to prevent a severe error from occurring in the
future.
"""
ERROR_LEVEL_CRITICAL: ErrorLevel.ValueType  # 2
"""A severe error that causes the component to fail. Immediate action must be
taken.
"""
global___ErrorLevel = ErrorLevel

@typing_extensions.final
class MetricAggregation(google.protobuf.message.Message):
    """Metrics depicted as a collection of statistical summaries.

    Useful when a component has to report multiple values for the same metric.
    E.g., a battery is a collection of several blocks, and each block has a
    temperature sensor. The battery can report a summary of the values provided
    by all these sensors, like, min, max, avg, etc., and if possible, the entire
    array of temperature values.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AVG_FIELD_NUMBER: builtins.int
    MIN_FIELD_NUMBER: builtins.int
    MAX_FIELD_NUMBER: builtins.int
    RAW_VALUES_FIELD_NUMBER: builtins.int
    RATED_BOUNDS_FIELD_NUMBER: builtins.int
    COMPONENT_BOUNDS_FIELD_NUMBER: builtins.int
    SYSTEM_EXCLUSION_BOUNDS_FIELD_NUMBER: builtins.int
    SYSTEM_INCLUSION_BOUNDS_FIELD_NUMBER: builtins.int
    avg: builtins.float
    """The average value of the metric."""
    min: builtins.float
    """The minimum value of the metric."""
    max: builtins.float
    """The maximum value of the metric."""
    @property
    def raw_values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """The array of all the metric values."""
    @property
    def rated_bounds(self) -> frequenz.api.common.metrics_pb2.Bounds:
        """The manufacturer's rated bounds of the metric. This may differ from
        `system_bounds` as it does not take into account the current state of the
        overall system.
        """
    @property
    def component_bounds(self) -> frequenz.api.common.metrics_pb2.Bounds:
        """The current bounds of the metric, as imposed by the component this metric
        originates from.
        """
    @property
    def system_exclusion_bounds(self) -> frequenz.api.common.metrics_pb2.Bounds:
        """These bounds indicate the range of values that are disallowed for the
        metric.
        If these bounds for a metric are [`lower`, `upper`], then this metric's
        `value` needs to comply with the constraints
        `value <= lower` OR `upper <= value`.

        It is important to note that these bounds work together with
        `system_inclusion_bounds`.

        E.g., for the system to accept a charge command,
        clients need to request power values within the bounds
        `[system_inclusion_bounds.lower, system_exclusion_bounds.lower]`.
        This means that clients can only request charge commands with power values
        that are within the `system_inclusion_bounds`, but not within
        `system_exclusion_bounds`.
        Similarly, for the system to accept a discharge command,
        clients need to request power values within the bounds
        `[system_exclusion_bounds.upper, system_inclusion_bounds.upper]`.

        The following diagram illustrates the relationship between the bounds.
        ```
          inclusion.lower                              inclusion.upper
        <-------|============|------------------|============|--------->
                       exclusion.lower    exclusion.upper
        ```
        ---- values here are disallowed and wil be rejected
        ==== vales here are allowed and will be accepted
        """
    @property
    def system_inclusion_bounds(self) -> frequenz.api.common.metrics_pb2.Bounds:
        """These bounds indicate the range of values that are allowed for the metric.
        If these bounds for a metric are [`lower`, `upper`], then this metric's
        `value` needs to comply with the constraint `lower <= value <= upper`

        It is important to note that these bounds work together with
        `system_exclusion_bounds`.

        E.g., for the system to accept a charge command,
        clients need to request power values within the bounds
        `[system_inclusion_bounds.lower, system_exclusion_bounds.lower]`.
        This means that clients can only request charge commands with power values
        that are within the `system_inclusion_bounds`, but not within
        `system_exclusion_bounds`.
        Similarly, for the system to accept a discharge command,
        clients need to request power values within the bounds
        `[system_exclusion_bounds.upper, system_inclusion_bounds.upper]`.

        The following diagram illustrates the relationship between the bounds.
        ```
          inclusion.lower                              inclusion.upper
        <-------|============|------------------|============|--------->
                       exclusion.lower    exclusion.upper
        ```
        ---- values here are disallowed and wil be rejected
        ==== vales here are allowed and will be accepted
        """
    def __init__(
        self,
        *,
        avg: builtins.float = ...,
        min: builtins.float | None = ...,
        max: builtins.float | None = ...,
        raw_values: collections.abc.Iterable[builtins.float] | None = ...,
        rated_bounds: frequenz.api.common.metrics_pb2.Bounds | None = ...,
        component_bounds: frequenz.api.common.metrics_pb2.Bounds | None = ...,
        system_exclusion_bounds: frequenz.api.common.metrics_pb2.Bounds | None = ...,
        system_inclusion_bounds: frequenz.api.common.metrics_pb2.Bounds | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_max", b"_max", "_min", b"_min", "component_bounds", b"component_bounds", "max", b"max", "min", b"min", "rated_bounds", b"rated_bounds", "system_exclusion_bounds", b"system_exclusion_bounds", "system_inclusion_bounds", b"system_inclusion_bounds"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_max", b"_max", "_min", b"_min", "avg", b"avg", "component_bounds", b"component_bounds", "max", b"max", "min", b"min", "rated_bounds", b"rated_bounds", "raw_values", b"raw_values", "system_exclusion_bounds", b"system_exclusion_bounds", "system_inclusion_bounds", b"system_inclusion_bounds"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_max", b"_max"]) -> typing_extensions.Literal["max"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_min", b"_min"]) -> typing_extensions.Literal["min"] | None: ...

global___MetricAggregation = MetricAggregation
