---
- name: Create
  hosts: localhost
  gather_facts: false
  no_log: "{{ molecule_no_log }}"

  vars:
    molecule_ephemeral_directory: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}"
    molecule_scenario_name: "{{ lookup('env', 'MOLECULE_SCENARIO_NAME') }}"
    molecule_project_name: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') | basename }}"
    qemu_vm_arch: "x86_64"
    qemu_vm_memory: "1024"

  tasks:
    - name: Generate OpenSSH key pair
      community.crypto.openssh_keypair:
        path: "{{ molecule_ephemeral_directory }}/id_ed25519"
        type: ed25519
      register: vm_ssh_identity_file

    - name: Register VMs data
      ansible.builtin.set_fact:
        instance: {
          "instance": "molecule-{{ molecule_project_name }}-{{ molecule_scenario_name }}-{{ item.name }}",
          "name": "{{ item.name }}",
          "vm_arch": "{{ item.vm_arch | default(qemu_vm_arch) }}",
          "vm_image": "{{ item.vm_image }}",
          "vm_image_format": "{{ item.vm_image_format | default('qcow2') }}",
          "vm_memory": "{{ item.vm_memory | default(qemu_vm_memory) }}",
          "vm_ssh_host": "{{ item.vm_ssh_host | default('127.0.0.1') }}",
          "vm_ssh_port": "{{ item.vm_ssh_port | default(10022) }}",
          "vm_ssh_user": "{{ item.vm_ssh_user | default('root') }}",
          "vm_ssh_identity_file": "{{ item.vm_ssh_identity_file | default(vm_ssh_identity_file.filename) }}",
          "vm_run_pidfile": "{{ molecule_ephemeral_directory }}/run/{{ item.name }}.pid",
          "vm_run_diskfile": "{{ molecule_ephemeral_directory }}/run/{{ item.name }}.qcow2",
        }
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"
      register: molecule_instances

    - name: Prepare VMs data
      ansible.builtin.set_fact:
        molecule_instances: "{{ molecule_instances.results | map(attribute='ansible_facts.instance') | list }}"

    - debug: var=molecule_instances

    - name: Ensure run directory exists
      ansible.builtin.file:
        path: "{{ molecule_ephemeral_directory }}/run/"
        state: directory
        mode: "0755"

    - name: Create VMs disks based on provided image
      ansible.builtin.command: >
        qemu-img create
        -f qcow2
        -o backing_file={{ item.vm_image }},backing_fmt={{ item.vm_image_format }}
        {{ item.vm_run_diskfile }}
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create cloud-init folders
      ansible.builtin.file:
        path: "{{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}/"
        state: directory
        mode: "0755"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Render meta-data template
      ansible.builtin.template:
        src: templates/meta-data.j2
        dest: "{{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}/meta-data"
        mode: "0644"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Render user-data template
      ansible.builtin.template:
        src: templates/user-data.j2
        dest: "{{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}/user-data"
        mode: "0644"
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create cloud-init iso using mkisofs
      ansible.builtin.command: >
        mkisofs
        -output {{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}.iso
        -volid cidata
        -joliet
        -rock
        {{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}/
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Launch VMs  # noqa: no-changed-when
      ansible.builtin.command: >
        qemu-system-{{ item.vm_arch }}
        -boot d
        -cdrom {{ molecule_ephemeral_directory }}/run/cloud-init/{{ item.name }}.iso
        -hda {{ item.vm_run_diskfile }}
        -m {{ item.vm_memory }}
        -net nic
        -net user,hostfwd=tcp::{{ item.vm_ssh_port }}-:22
        -display none
        -daemonize
        -pidfile {{ item.vm_run_pidfile }}
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Prepare VMs config dict
      ansible.builtin.set_fact:
        instance_conf_dict: {
          "instance": "{{ item.instance }}",
          "name": "{{ item.name }}",
          "address": "{{ item.vm_ssh_host }}",
          "user": "{{ item.vm_ssh_user }}",
          "port": "{{ item.vm_ssh_port }}",
          "identity_file": "{{ item.vm_ssh_identity_file }}",
          "pidfile": "{{ item.vm_run_pidfile }}",
          "diskfile": "{{ item.vm_run_diskfile }}",
        }
      loop: "{{ molecule_instances }}"
      loop_control:
        label: "{{ item.name }}"
      register: instance_config_dict

    - name: Prepare VMs config list
      ansible.builtin.set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump VMs config
      ansible.builtin.copy:
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
        mode: "0644"
