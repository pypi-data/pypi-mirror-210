from typing import List
import db
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.bookmark
import ghidra.trace.model.breakpoint
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.program
import ghidra.trace.model.property
import ghidra.trace.model.stack
import ghidra.trace.model.symbol
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time
import ghidra.trace.util
import ghidra.util
import ghidra.util.task
import java.io
import java.lang
import java.util


class Trace(ghidra.program.model.data.DataTypeManagerDomainObject, object):
    DO_DOMAIN_FILE_CHANGED: int = 2
    DO_OBJECT_CLOSED: int = 6
    DO_OBJECT_ERROR: int = 8
    DO_OBJECT_RENAMED: int = 3
    DO_OBJECT_RESTORED: int = 4
    DO_OBJECT_SAVED: int = 1
    DO_PROPERTY_CHANGED: int = 5
    TRACE_ICON: javax.swing.Icon = jar:file:/opt/hostedtoolcache/ghidra/10.3/x64/Ghidra/Framework/Gui/lib/Gui.jar!/images/core.png
    undoLock: object = java.lang.Object@6b273ac1




    class TraceStackChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@2d1ba019
        CHANGED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@5c251b2d
        DELETED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@2f22d1df



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryRegionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@30a93aac
        CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@2c992507
        DELETED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@150ca562
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@65e7d4b2



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceProgramViewListener(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def viewCreated(self, __a0: ghidra.trace.model.program.TraceProgramView) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TracePlatformChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@7b623b8
        DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@7e331a88
        MAPPING_ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@76172927
        MAPPING_DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@3ef74375



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceStaticMappingChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@1b728179
        DELETED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@2d6fdc8f



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSymbolChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@16c128cd
        ADDRESS_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@645fcc7d
        ASSOCIATION_ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@7993f39a
        ASSOCIATION_REMOVED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@236e082
        CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@270dd122
        DELETED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@7455eae8
        LIFESPAN_CHANGED: ghidra.trace.util.DefaultTraceChangeType = ghidra.trace.util.DefaultTraceChangeType@7ba3d452
        PARENT_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@47ae05b5
        RENAMED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@224a44ea
        SET_AS_PRIMARY: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@1442b908
        SOURCE_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@30deb062



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceObjectChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@ddc3b78
        DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@c575903
        LIFE_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@66038ab
        VALUE_CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@32395893
        VALUE_DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@1a11a50e
        VALUE_LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@16f14384



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCodeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@33a90824
        DATA_TYPE_REPLACED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@53dd8a75
        DATA_TYPE_SETTINGS_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@4b8cfbf0
        FRAGMENT_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@5ca21cbf
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@4c2e374a
        REMOVED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@7fa2ad0a



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceFunctionTagChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@40762815
        CHANGED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@15e7bee1
        DELETED: ghidra.trace.model.Trace.TraceFunctionTagChangeType = ghidra.trace.model.Trace$TraceFunctionTagChangeType@7f478baa



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryStateChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryStateChangeType = ghidra.trace.model.Trace$TraceMemoryStateChangeType@256e11ae



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceDataTypeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@22d6fefd
        CHANGED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@17706e21
        DELETED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@2f2ca6b2
        MOVED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@7c90a4ac
        RENAMED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@36439de0
        REPLACED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@7a9a3198



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCategoryChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@681f5877
        DELETED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@42197149
        MOVED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@2ca10d95
        RENAMED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@1153241c



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceModuleChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@63b7c581
        CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@37759a41
        DELETED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@3f0e2b77
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@1b6744a6



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceOverlaySpaceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@5e727b52
        DELETED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@369025d1



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryBytesChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryBytesChangeType = ghidra.trace.model.Trace$TraceMemoryBytesChangeType@4ab55173



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceReferenceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@1bddd866
        DELETED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@55a32b1c
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@35fdd612
        PRIMARY_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@5a71601e



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceInstructionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        FALL_THROUGH_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@6ca130b
        FLOW_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@5d5c0886



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSnapshotChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@601cc8aa
        CHANGED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@b3deb84
        DELETED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@5db9e3a3



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCommentChangeType(ghidra.trace.util.DefaultTraceChangeType):
        EOL_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@77d1b66
        PLATE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@4e9468d9
        POST_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@790d0e75
        PRE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@122da70
        REPEATABLE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@1314974a
        type: int







        @staticmethod
        def byType(__a0: int) -> ghidra.trace.model.Trace.TraceCommentChangeType: ...

        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSectionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@4a6be4c5
        CHANGED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@363b4c42
        DELETED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@27548256



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBookmarkChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@3bf306a0
        CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@69b219c5
        DELETED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@7fafecc0
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@42f6430a
        TYPE_ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@6af77097



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCompositeDataChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@1a8672bd
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@6a9892f7
        REMOVED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@39e3b14b



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBreakpointChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@2b0a9634
        CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@70203f59
        DELETED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@591ab87a
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@7dd733fb



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSourceArchiveChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@6dbc222e
        CHANGED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@56f404bd
        DELETED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@12f8ad73



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceThreadChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@41ec9e04
        CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@4c9aa512
        DELETED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@1bde1ac7
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@177fe6c0



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceFunctionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@33a430f3
        CHANGED_BODY: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@7b1d416e
        CHANGED_CALL_FIXUP: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@6bd18401
        CHANGED_INLINE: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@643d098e
        CHANGED_NORETURN: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@5b0599a1
        CHANGED_PARAMETERS: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@7ebc207b
        CHANGED_PURGE: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@1e139143
        CHANGED_RETURN: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@66a605c3
        CHANGED_THUNK: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@c2209da
        TAG_APPLIED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@67ac918c
        TAG_REMOVED: ghidra.trace.model.Trace.TraceFunctionChangeType = ghidra.trace.model.Trace$TraceFunctionChangeType@7a56ac14



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def clearUndo(self) -> None: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def createProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def createTimeViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAddressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    def getAllProgramViews(self) -> java.util.Collection: ...

    def getBaseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getBaseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getBookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    def getBreakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    def getConsumerList(self) -> java.util.ArrayList: ...

    def getCurrentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getDescription(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getEmulatorCacheVersion(self) -> long: ...

    def getEquateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    def getFixedProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceProgramView: ...

    def getMemoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    def getMetadata(self) -> java.util.Map: ...

    def getModificationNumber(self) -> long: ...

    def getModuleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    def getName(self) -> unicode: ...

    def getObjectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getPlatformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    def getProgramView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def getRedoName(self) -> unicode: ...

    def getReferenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    def getRegisterContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    def getStackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    def getStaticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    def getSymbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getThreadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    def getTimeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    def getUndoName(self) -> unicode: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    @staticmethod
    def isLegacy(__a0: ghidra.trace.model.Trace) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def lockRead(self) -> ghidra.util.LockHold: ...

    def lockWrite(self) -> ghidra.util.LockHold: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openTransaction(self, __a0: unicode) -> db.Transaction: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setEmulatorCacheVersion(self, __a0: long) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    @property
    def allProgramViews(self) -> java.util.Collection: ...

    @property
    def baseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    @property
    def baseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def baseLanguage(self) -> ghidra.program.model.lang.Language: ...

    @property
    def bookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    @property
    def breakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    @property
    def changeable(self) -> bool: ...

    @property
    def changed(self) -> bool: ...

    @property
    def closed(self) -> bool: ...

    @property
    def codeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    @property
    def consumerList(self) -> java.util.ArrayList: ...

    @property
    def currentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    @property
    def dataTypeManager(self) -> ghidra.trace.model.data.TraceBasedDataTypeManager: ...

    @property
    def description(self) -> unicode: ...

    @property
    def domainFile(self) -> ghidra.framework.model.DomainFile: ...

    @property
    def emulatorCacheVersion(self) -> long: ...

    @emulatorCacheVersion.setter
    def emulatorCacheVersion(self, value: long) -> None: ...

    @property
    def equateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    @property
    def eventsEnabled(self) -> None: ...  # No getter available.

    @eventsEnabled.setter
    def eventsEnabled(self, value: bool) -> None: ...

    @property
    def locked(self) -> bool: ...

    @property
    def memoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    @property
    def metadata(self) -> java.util.Map: ...

    @property
    def modificationNumber(self) -> long: ...

    @property
    def moduleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def objectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    @property
    def optionsNames(self) -> List[object]: ...

    @property
    def platformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    @property
    def programView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    @property
    def redoName(self) -> unicode: ...

    @property
    def referenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    @property
    def registerContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    @property
    def sendingEvents(self) -> bool: ...

    @property
    def stackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    @property
    def staticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    @property
    def symbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    @property
    def synchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    @property
    def temporary(self) -> bool: ...

    @temporary.setter
    def temporary(self, value: bool) -> None: ...

    @property
    def threadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    @property
    def timeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    @property
    def undoName(self) -> unicode: ...