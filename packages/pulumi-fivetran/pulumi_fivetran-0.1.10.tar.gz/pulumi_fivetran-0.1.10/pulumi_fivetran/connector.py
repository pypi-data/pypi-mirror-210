# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectorArgs', 'Connector']

@pulumi.input_type
class ConnectorArgs:
    def __init__(__self__, *,
                 config: pulumi.Input['ConnectorConfigArgs'],
                 destination_schema: pulumi.Input['ConnectorDestinationSchemaArgs'],
                 group_id: pulumi.Input[str],
                 pause_after_trial: pulumi.Input[str],
                 paused: pulumi.Input[str],
                 service: pulumi.Input[str],
                 sync_frequency: pulumi.Input[str],
                 auth: Optional[pulumi.Input['ConnectorAuthArgs']] = None,
                 daily_sync_time: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[str]] = None,
                 trust_fingerprints: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Connector resource.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "destination_schema", destination_schema)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "pause_after_trial", pause_after_trial)
        pulumi.set(__self__, "paused", paused)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "sync_frequency", sync_frequency)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if daily_sync_time is not None:
            pulumi.set(__self__, "daily_sync_time", daily_sync_time)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if trust_certificates is not None:
            pulumi.set(__self__, "trust_certificates", trust_certificates)
        if trust_fingerprints is not None:
            pulumi.set(__self__, "trust_fingerprints", trust_fingerprints)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input['ConnectorConfigArgs']:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input['ConnectorConfigArgs']):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="destinationSchema")
    def destination_schema(self) -> pulumi.Input['ConnectorDestinationSchemaArgs']:
        return pulumi.get(self, "destination_schema")

    @destination_schema.setter
    def destination_schema(self, value: pulumi.Input['ConnectorDestinationSchemaArgs']):
        pulumi.set(self, "destination_schema", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="pauseAfterTrial")
    def pause_after_trial(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pause_after_trial")

    @pause_after_trial.setter
    def pause_after_trial(self, value: pulumi.Input[str]):
        pulumi.set(self, "pause_after_trial", value)

    @property
    @pulumi.getter
    def paused(self) -> pulumi.Input[str]:
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: pulumi.Input[str]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="syncFrequency")
    def sync_frequency(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sync_frequency")

    @sync_frequency.setter
    def sync_frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "sync_frequency", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['ConnectorAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['ConnectorAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="dailySyncTime")
    def daily_sync_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daily_sync_time")

    @daily_sync_time.setter
    def daily_sync_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daily_sync_time", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_certificates")

    @trust_certificates.setter
    def trust_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_certificates", value)

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_fingerprints")

    @trust_fingerprints.setter
    def trust_fingerprints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_fingerprints", value)


@pulumi.input_type
class _ConnectorState:
    def __init__(__self__, *,
                 auth: Optional[pulumi.Input['ConnectorAuthArgs']] = None,
                 config: Optional[pulumi.Input['ConnectorConfigArgs']] = None,
                 connected_by: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 daily_sync_time: Optional[pulumi.Input[str]] = None,
                 destination_schema: Optional[pulumi.Input['ConnectorDestinationSchemaArgs']] = None,
                 failed_at: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pause_after_trial: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[str]] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 service_version: Optional[pulumi.Input[str]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusArgs']]]] = None,
                 succeeded_at: Optional[pulumi.Input[str]] = None,
                 sync_frequency: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[str]] = None,
                 trust_fingerprints: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Connector resources.
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connected_by is not None:
            pulumi.set(__self__, "connected_by", connected_by)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if daily_sync_time is not None:
            pulumi.set(__self__, "daily_sync_time", daily_sync_time)
        if destination_schema is not None:
            pulumi.set(__self__, "destination_schema", destination_schema)
        if failed_at is not None:
            pulumi.set(__self__, "failed_at", failed_at)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pause_after_trial is not None:
            pulumi.set(__self__, "pause_after_trial", pause_after_trial)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if service_version is not None:
            pulumi.set(__self__, "service_version", service_version)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if succeeded_at is not None:
            pulumi.set(__self__, "succeeded_at", succeeded_at)
        if sync_frequency is not None:
            pulumi.set(__self__, "sync_frequency", sync_frequency)
        if trust_certificates is not None:
            pulumi.set(__self__, "trust_certificates", trust_certificates)
        if trust_fingerprints is not None:
            pulumi.set(__self__, "trust_fingerprints", trust_fingerprints)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['ConnectorAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['ConnectorAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ConnectorConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ConnectorConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="connectedBy")
    def connected_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connected_by")

    @connected_by.setter
    def connected_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connected_by", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dailySyncTime")
    def daily_sync_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daily_sync_time")

    @daily_sync_time.setter
    def daily_sync_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daily_sync_time", value)

    @property
    @pulumi.getter(name="destinationSchema")
    def destination_schema(self) -> Optional[pulumi.Input['ConnectorDestinationSchemaArgs']]:
        return pulumi.get(self, "destination_schema")

    @destination_schema.setter
    def destination_schema(self, value: Optional[pulumi.Input['ConnectorDestinationSchemaArgs']]):
        pulumi.set(self, "destination_schema", value)

    @property
    @pulumi.getter(name="failedAt")
    def failed_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "failed_at")

    @failed_at.setter
    def failed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_at", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pauseAfterTrial")
    def pause_after_trial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pause_after_trial")

    @pause_after_trial.setter
    def pause_after_trial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pause_after_trial", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_type", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="serviceVersion")
    def service_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_version")

    @service_version.setter
    def service_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_version", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusArgs']]]]:
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @property
    @pulumi.getter(name="succeededAt")
    def succeeded_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "succeeded_at")

    @succeeded_at.setter
    def succeeded_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "succeeded_at", value)

    @property
    @pulumi.getter(name="syncFrequency")
    def sync_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_frequency")

    @sync_frequency.setter
    def sync_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_frequency", value)

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_certificates")

    @trust_certificates.setter
    def trust_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_certificates", value)

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_fingerprints")

    @trust_fingerprints.setter
    def trust_fingerprints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_fingerprints", value)


class Connector(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth: Optional[pulumi.Input[pulumi.InputType['ConnectorAuthArgs']]] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['ConnectorConfigArgs']]] = None,
                 daily_sync_time: Optional[pulumi.Input[str]] = None,
                 destination_schema: Optional[pulumi.Input[pulumi.InputType['ConnectorDestinationSchemaArgs']]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 pause_after_trial: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 sync_frequency: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[str]] = None,
                 trust_fingerprints: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Connector resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Connector resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConnectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth: Optional[pulumi.Input[pulumi.InputType['ConnectorAuthArgs']]] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['ConnectorConfigArgs']]] = None,
                 daily_sync_time: Optional[pulumi.Input[str]] = None,
                 destination_schema: Optional[pulumi.Input[pulumi.InputType['ConnectorDestinationSchemaArgs']]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 pause_after_trial: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 sync_frequency: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[str]] = None,
                 trust_fingerprints: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectorArgs.__new__(ConnectorArgs)

            __props__.__dict__["auth"] = auth
            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            __props__.__dict__["daily_sync_time"] = daily_sync_time
            if destination_schema is None and not opts.urn:
                raise TypeError("Missing required property 'destination_schema'")
            __props__.__dict__["destination_schema"] = destination_schema
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            if pause_after_trial is None and not opts.urn:
                raise TypeError("Missing required property 'pause_after_trial'")
            __props__.__dict__["pause_after_trial"] = pause_after_trial
            if paused is None and not opts.urn:
                raise TypeError("Missing required property 'paused'")
            __props__.__dict__["paused"] = paused
            __props__.__dict__["run_setup_tests"] = run_setup_tests
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            if sync_frequency is None and not opts.urn:
                raise TypeError("Missing required property 'sync_frequency'")
            __props__.__dict__["sync_frequency"] = sync_frequency
            __props__.__dict__["trust_certificates"] = trust_certificates
            __props__.__dict__["trust_fingerprints"] = trust_fingerprints
            __props__.__dict__["connected_by"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["failed_at"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["schedule_type"] = None
            __props__.__dict__["service_version"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["succeeded_at"] = None
        super(Connector, __self__).__init__(
            'fivetran:index/connector:Connector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth: Optional[pulumi.Input[pulumi.InputType['ConnectorAuthArgs']]] = None,
            config: Optional[pulumi.Input[pulumi.InputType['ConnectorConfigArgs']]] = None,
            connected_by: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            daily_sync_time: Optional[pulumi.Input[str]] = None,
            destination_schema: Optional[pulumi.Input[pulumi.InputType['ConnectorDestinationSchemaArgs']]] = None,
            failed_at: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pause_after_trial: Optional[pulumi.Input[str]] = None,
            paused: Optional[pulumi.Input[str]] = None,
            run_setup_tests: Optional[pulumi.Input[str]] = None,
            schedule_type: Optional[pulumi.Input[str]] = None,
            service: Optional[pulumi.Input[str]] = None,
            service_version: Optional[pulumi.Input[str]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnectorStatusArgs']]]]] = None,
            succeeded_at: Optional[pulumi.Input[str]] = None,
            sync_frequency: Optional[pulumi.Input[str]] = None,
            trust_certificates: Optional[pulumi.Input[str]] = None,
            trust_fingerprints: Optional[pulumi.Input[str]] = None) -> 'Connector':
        """
        Get an existing Connector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectorState.__new__(_ConnectorState)

        __props__.__dict__["auth"] = auth
        __props__.__dict__["config"] = config
        __props__.__dict__["connected_by"] = connected_by
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["daily_sync_time"] = daily_sync_time
        __props__.__dict__["destination_schema"] = destination_schema
        __props__.__dict__["failed_at"] = failed_at
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["name"] = name
        __props__.__dict__["pause_after_trial"] = pause_after_trial
        __props__.__dict__["paused"] = paused
        __props__.__dict__["run_setup_tests"] = run_setup_tests
        __props__.__dict__["schedule_type"] = schedule_type
        __props__.__dict__["service"] = service
        __props__.__dict__["service_version"] = service_version
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["succeeded_at"] = succeeded_at
        __props__.__dict__["sync_frequency"] = sync_frequency
        __props__.__dict__["trust_certificates"] = trust_certificates
        __props__.__dict__["trust_fingerprints"] = trust_fingerprints
        return Connector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Output[Optional['outputs.ConnectorAuth']]:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.ConnectorConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="connectedBy")
    def connected_by(self) -> pulumi.Output[str]:
        return pulumi.get(self, "connected_by")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dailySyncTime")
    def daily_sync_time(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "daily_sync_time")

    @property
    @pulumi.getter(name="destinationSchema")
    def destination_schema(self) -> pulumi.Output['outputs.ConnectorDestinationSchema']:
        return pulumi.get(self, "destination_schema")

    @property
    @pulumi.getter(name="failedAt")
    def failed_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "failed_at")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pauseAfterTrial")
    def pause_after_trial(self) -> pulumi.Output[str]:
        return pulumi.get(self, "pause_after_trial")

    @property
    @pulumi.getter
    def paused(self) -> pulumi.Output[str]:
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "run_setup_tests")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="serviceVersion")
    def service_version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_version")

    @property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.ConnectorStatus']]:
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="succeededAt")
    def succeeded_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "succeeded_at")

    @property
    @pulumi.getter(name="syncFrequency")
    def sync_frequency(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sync_frequency")

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "trust_certificates")

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "trust_fingerprints")

