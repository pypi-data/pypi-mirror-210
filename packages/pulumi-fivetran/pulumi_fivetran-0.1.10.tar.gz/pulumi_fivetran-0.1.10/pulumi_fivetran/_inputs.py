# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ConnectorAuthArgs',
    'ConnectorAuthClientAccessArgs',
    'ConnectorConfigArgs',
    'ConnectorConfigAdobeAnalyticsConfigurationArgs',
    'ConnectorConfigCustomTableArgs',
    'ConnectorConfigProjectCredentialArgs',
    'ConnectorConfigReportArgs',
    'ConnectorDestinationSchemaArgs',
    'ConnectorSchemaConfigSchemaArgs',
    'ConnectorSchemaConfigSchemaTableArgs',
    'ConnectorSchemaConfigSchemaTableColumnArgs',
    'ConnectorStatusArgs',
    'ConnectorStatusTaskArgs',
    'ConnectorStatusWarningArgs',
    'DestinationConfigArgs',
    'GroupUsersUserArgs',
]

@pulumi.input_type
class ConnectorAuthArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_access: Optional[pulumi.Input['ConnectorAuthClientAccessArgs']] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_access is not None:
            pulumi.set(__self__, "client_access", client_access)
        if realm_id is not None:
            pulumi.set(__self__, "realm_id", realm_id)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientAccess")
    def client_access(self) -> Optional[pulumi.Input['ConnectorAuthClientAccessArgs']]:
        return pulumi.get(self, "client_access")

    @client_access.setter
    def client_access(self, value: Optional[pulumi.Input['ConnectorAuthClientAccessArgs']]):
        pulumi.set(self, "client_access", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorAuthClientAccessArgs:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 developer_token: Optional[pulumi.Input[str]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if developer_token is not None:
            pulumi.set(__self__, "developer_token", developer_token)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="developerToken")
    def developer_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "developer_token")

    @developer_token.setter
    def developer_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "developer_token", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class ConnectorConfigArgs:
    def __init__(__self__, *,
                 abs_connection_string: Optional[pulumi.Input[str]] = None,
                 abs_container_name: Optional[pulumi.Input[str]] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 action_breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 action_report_time: Optional[pulumi.Input[str]] = None,
                 adobe_analytics_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigAdobeAnalyticsConfigurationArgs']]]] = None,
                 advertisables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 advertisers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 advertisers_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 aggregation: Optional[pulumi.Input[str]] = None,
                 always_encrypted: Optional[pulumi.Input[str]] = None,
                 api_access_token: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 api_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_quota: Optional[pulumi.Input[str]] = None,
                 api_secret: Optional[pulumi.Input[str]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 api_type: Optional[pulumi.Input[str]] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 api_version: Optional[pulumi.Input[str]] = None,
                 app_sync_mode: Optional[pulumi.Input[str]] = None,
                 append_file_option: Optional[pulumi.Input[str]] = None,
                 apps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 archive_pattern: Optional[pulumi.Input[str]] = None,
                 auth_mode: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 authorization_method: Optional[pulumi.Input[str]] = None,
                 aws_region_code: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_service: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 click_attribution_window: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 cloud_storage_type: Optional[pulumi.Input[str]] = None,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 compression: Optional[pulumi.Input[str]] = None,
                 config_method: Optional[pulumi.Input[str]] = None,
                 config_type: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 connection_type: Optional[pulumi.Input[str]] = None,
                 consumer_group: Optional[pulumi.Input[str]] = None,
                 consumer_key: Optional[pulumi.Input[str]] = None,
                 consumer_secret: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 conversion_report_time: Optional[pulumi.Input[str]] = None,
                 conversion_window_size: Optional[pulumi.Input[str]] = None,
                 custom_tables: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigCustomTableArgs']]]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 daily_api_call_limit: Optional[pulumi.Input[str]] = None,
                 data_center: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 dataset_id: Optional[pulumi.Input[str]] = None,
                 datasource: Optional[pulumi.Input[str]] = None,
                 date_granularity: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 dimension_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 elements: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_all_dimension_combinations: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 engagement_attribution_window: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 escape_char: Optional[pulumi.Input[str]] = None,
                 eu_region: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 file_type: Optional[pulumi.Input[str]] = None,
                 finance_account_sync_mode: Optional[pulumi.Input[str]] = None,
                 finance_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 ftp_host: Optional[pulumi.Input[str]] = None,
                 ftp_password: Optional[pulumi.Input[str]] = None,
                 ftp_port: Optional[pulumi.Input[str]] = None,
                 ftp_user: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 function_app: Optional[pulumi.Input[str]] = None,
                 function_key: Optional[pulumi.Input[str]] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 function_trigger: Optional[pulumi.Input[str]] = None,
                 gcs_bucket: Optional[pulumi.Input[str]] = None,
                 gcs_folder: Optional[pulumi.Input[str]] = None,
                 home_folder: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identity: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 integration_key: Optional[pulumi.Input[str]] = None,
                 is_ftps: Optional[pulumi.Input[str]] = None,
                 is_multi_entity_feature_enabled: Optional[pulumi.Input[str]] = None,
                 is_new_package: Optional[pulumi.Input[str]] = None,
                 is_secure: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 last_synced_changes_utc: Optional[pulumi.Input[str]] = None,
                 latest_version: Optional[pulumi.Input[str]] = None,
                 manager_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 merchant_id: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[str]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 named_range: Optional[pulumi.Input[str]] = None,
                 network_code: Optional[pulumi.Input[str]] = None,
                 null_sequence: Optional[pulumi.Input[str]] = None,
                 oauth_token: Optional[pulumi.Input[str]] = None,
                 oauth_token_secret: Optional[pulumi.Input[str]] = None,
                 on_error: Optional[pulumi.Input[str]] = None,
                 on_premise: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pat: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pem_certificate: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 post_click_attribution_window_size: Optional[pulumi.Input[str]] = None,
                 prebuilt_report: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_credentials: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigProjectCredentialArgs']]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 publication_name: Optional[pulumi.Input[str]] = None,
                 query_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 replication_slot: Optional[pulumi.Input[str]] = None,
                 report_configuration_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 report_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 report_url: Optional[pulumi.Input[str]] = None,
                 reports: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigReportArgs']]]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 s3bucket: Optional[pulumi.Input[str]] = None,
                 s3external_id: Optional[pulumi.Input[str]] = None,
                 s3folder: Optional[pulumi.Input[str]] = None,
                 s3role_arn: Optional[pulumi.Input[str]] = None,
                 sales_account_sync_mode: Optional[pulumi.Input[str]] = None,
                 sales_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[str]] = None,
                 security_protocol: Optional[pulumi.Input[str]] = None,
                 selected_exports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[str]] = None,
                 service_version: Optional[pulumi.Input[str]] = None,
                 sftp_host: Optional[pulumi.Input[str]] = None,
                 sftp_is_key_pair: Optional[pulumi.Input[str]] = None,
                 sftp_password: Optional[pulumi.Input[str]] = None,
                 sftp_port: Optional[pulumi.Input[str]] = None,
                 sftp_user: Optional[pulumi.Input[str]] = None,
                 sheet_id: Optional[pulumi.Input[str]] = None,
                 shop: Optional[pulumi.Input[str]] = None,
                 sid: Optional[pulumi.Input[str]] = None,
                 site_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 skip_after: Optional[pulumi.Input[str]] = None,
                 skip_before: Optional[pulumi.Input[str]] = None,
                 soap_uri: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 swipe_attribution_window: Optional[pulumi.Input[str]] = None,
                 sync_data_locker: Optional[pulumi.Input[str]] = None,
                 sync_format: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 sync_type: Optional[pulumi.Input[str]] = None,
                 technical_account_id: Optional[pulumi.Input[str]] = None,
                 test_table_name: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 timeframe_months: Optional[pulumi.Input[str]] = None,
                 token_key: Optional[pulumi.Input[str]] = None,
                 token_secret: Optional[pulumi.Input[str]] = None,
                 tunnel_host: Optional[pulumi.Input[str]] = None,
                 tunnel_port: Optional[pulumi.Input[str]] = None,
                 tunnel_user: Optional[pulumi.Input[str]] = None,
                 unique_id: Optional[pulumi.Input[str]] = None,
                 update_config_on_each_sync: Optional[pulumi.Input[str]] = None,
                 update_method: Optional[pulumi.Input[str]] = None,
                 use_api_keys: Optional[pulumi.Input[str]] = None,
                 use_webhooks: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_key: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 view_attribution_window: Optional[pulumi.Input[str]] = None,
                 view_through_attribution_window_size: Optional[pulumi.Input[str]] = None):
        if abs_connection_string is not None:
            pulumi.set(__self__, "abs_connection_string", abs_connection_string)
        if abs_container_name is not None:
            pulumi.set(__self__, "abs_container_name", abs_container_name)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if action_breakdowns is not None:
            pulumi.set(__self__, "action_breakdowns", action_breakdowns)
        if action_report_time is not None:
            pulumi.set(__self__, "action_report_time", action_report_time)
        if adobe_analytics_configurations is not None:
            pulumi.set(__self__, "adobe_analytics_configurations", adobe_analytics_configurations)
        if advertisables is not None:
            pulumi.set(__self__, "advertisables", advertisables)
        if advertisers is not None:
            pulumi.set(__self__, "advertisers", advertisers)
        if advertisers_ids is not None:
            pulumi.set(__self__, "advertisers_ids", advertisers_ids)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if always_encrypted is not None:
            pulumi.set(__self__, "always_encrypted", always_encrypted)
        if api_access_token is not None:
            pulumi.set(__self__, "api_access_token", api_access_token)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_keys is not None:
            pulumi.set(__self__, "api_keys", api_keys)
        if api_quota is not None:
            pulumi.set(__self__, "api_quota", api_quota)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)
        if api_token is not None:
            pulumi.set(__self__, "api_token", api_token)
        if api_type is not None:
            pulumi.set(__self__, "api_type", api_type)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if app_sync_mode is not None:
            pulumi.set(__self__, "app_sync_mode", app_sync_mode)
        if append_file_option is not None:
            pulumi.set(__self__, "append_file_option", append_file_option)
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if archive_pattern is not None:
            pulumi.set(__self__, "archive_pattern", archive_pattern)
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if authorization_method is not None:
            pulumi.set(__self__, "authorization_method", authorization_method)
        if aws_region_code is not None:
            pulumi.set(__self__, "aws_region_code", aws_region_code)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if breakdowns is not None:
            pulumi.set(__self__, "breakdowns", breakdowns)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_service is not None:
            pulumi.set(__self__, "bucket_service", bucket_service)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if click_attribution_window is not None:
            pulumi.set(__self__, "click_attribution_window", click_attribution_window)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if cloud_storage_type is not None:
            pulumi.set(__self__, "cloud_storage_type", cloud_storage_type)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if config_method is not None:
            pulumi.set(__self__, "config_method", config_method)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if consumer_group is not None:
            pulumi.set(__self__, "consumer_group", consumer_group)
        if consumer_key is not None:
            pulumi.set(__self__, "consumer_key", consumer_key)
        if consumer_secret is not None:
            pulumi.set(__self__, "consumer_secret", consumer_secret)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if conversion_report_time is not None:
            pulumi.set(__self__, "conversion_report_time", conversion_report_time)
        if conversion_window_size is not None:
            pulumi.set(__self__, "conversion_window_size", conversion_window_size)
        if custom_tables is not None:
            pulumi.set(__self__, "custom_tables", custom_tables)
        if customer_id is not None:
            pulumi.set(__self__, "customer_id", customer_id)
        if daily_api_call_limit is not None:
            pulumi.set(__self__, "daily_api_call_limit", daily_api_call_limit)
        if data_center is not None:
            pulumi.set(__self__, "data_center", data_center)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)
        if datasource is not None:
            pulumi.set(__self__, "datasource", datasource)
        if date_granularity is not None:
            pulumi.set(__self__, "date_granularity", date_granularity)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if dimension_attributes is not None:
            pulumi.set(__self__, "dimension_attributes", dimension_attributes)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_all_dimension_combinations is not None:
            pulumi.set(__self__, "enable_all_dimension_combinations", enable_all_dimension_combinations)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if engagement_attribution_window is not None:
            pulumi.set(__self__, "engagement_attribution_window", engagement_attribution_window)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if escape_char is not None:
            pulumi.set(__self__, "escape_char", escape_char)
        if eu_region is not None:
            pulumi.set(__self__, "eu_region", eu_region)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if finance_account_sync_mode is not None:
            pulumi.set(__self__, "finance_account_sync_mode", finance_account_sync_mode)
        if finance_accounts is not None:
            pulumi.set(__self__, "finance_accounts", finance_accounts)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if ftp_host is not None:
            pulumi.set(__self__, "ftp_host", ftp_host)
        if ftp_password is not None:
            pulumi.set(__self__, "ftp_password", ftp_password)
        if ftp_port is not None:
            pulumi.set(__self__, "ftp_port", ftp_port)
        if ftp_user is not None:
            pulumi.set(__self__, "ftp_user", ftp_user)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if function_app is not None:
            pulumi.set(__self__, "function_app", function_app)
        if function_key is not None:
            pulumi.set(__self__, "function_key", function_key)
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if function_trigger is not None:
            pulumi.set(__self__, "function_trigger", function_trigger)
        if gcs_bucket is not None:
            pulumi.set(__self__, "gcs_bucket", gcs_bucket)
        if gcs_folder is not None:
            pulumi.set(__self__, "gcs_folder", gcs_folder)
        if home_folder is not None:
            pulumi.set(__self__, "home_folder", home_folder)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if identity is not None:
            pulumi.set(__self__, "identity", identity)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if integration_key is not None:
            pulumi.set(__self__, "integration_key", integration_key)
        if is_ftps is not None:
            pulumi.set(__self__, "is_ftps", is_ftps)
        if is_multi_entity_feature_enabled is not None:
            pulumi.set(__self__, "is_multi_entity_feature_enabled", is_multi_entity_feature_enabled)
        if is_new_package is not None:
            pulumi.set(__self__, "is_new_package", is_new_package)
        if is_secure is not None:
            pulumi.set(__self__, "is_secure", is_secure)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_synced_changes_utc is not None:
            pulumi.set(__self__, "last_synced_changes_utc", last_synced_changes_utc)
        if latest_version is not None:
            pulumi.set(__self__, "latest_version", latest_version)
        if manager_accounts is not None:
            pulumi.set(__self__, "manager_accounts", manager_accounts)
        if merchant_id is not None:
            pulumi.set(__self__, "merchant_id", merchant_id)
        if message_type is not None:
            pulumi.set(__self__, "message_type", message_type)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if named_range is not None:
            pulumi.set(__self__, "named_range", named_range)
        if network_code is not None:
            pulumi.set(__self__, "network_code", network_code)
        if null_sequence is not None:
            pulumi.set(__self__, "null_sequence", null_sequence)
        if oauth_token is not None:
            pulumi.set(__self__, "oauth_token", oauth_token)
        if oauth_token_secret is not None:
            pulumi.set(__self__, "oauth_token_secret", oauth_token_secret)
        if on_error is not None:
            pulumi.set(__self__, "on_error", on_error)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if pages is not None:
            pulumi.set(__self__, "pages", pages)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pat is not None:
            pulumi.set(__self__, "pat", pat)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pem_certificate is not None:
            pulumi.set(__self__, "pem_certificate", pem_certificate)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if post_click_attribution_window_size is not None:
            pulumi.set(__self__, "post_click_attribution_window_size", post_click_attribution_window_size)
        if prebuilt_report is not None:
            pulumi.set(__self__, "prebuilt_report", prebuilt_report)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if project_credentials is not None:
            pulumi.set(__self__, "project_credentials", project_credentials)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if publication_name is not None:
            pulumi.set(__self__, "publication_name", publication_name)
        if query_id is not None:
            pulumi.set(__self__, "query_id", query_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if replication_slot is not None:
            pulumi.set(__self__, "replication_slot", replication_slot)
        if report_configuration_ids is not None:
            pulumi.set(__self__, "report_configuration_ids", report_configuration_ids)
        if report_suites is not None:
            pulumi.set(__self__, "report_suites", report_suites)
        if report_type is not None:
            pulumi.set(__self__, "report_type", report_type)
        if report_url is not None:
            pulumi.set(__self__, "report_url", report_url)
        if reports is not None:
            pulumi.set(__self__, "reports", reports)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if resource_url is not None:
            pulumi.set(__self__, "resource_url", resource_url)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if s3bucket is not None:
            pulumi.set(__self__, "s3bucket", s3bucket)
        if s3external_id is not None:
            pulumi.set(__self__, "s3external_id", s3external_id)
        if s3folder is not None:
            pulumi.set(__self__, "s3folder", s3folder)
        if s3role_arn is not None:
            pulumi.set(__self__, "s3role_arn", s3role_arn)
        if sales_account_sync_mode is not None:
            pulumi.set(__self__, "sales_account_sync_mode", sales_account_sync_mode)
        if sales_accounts is not None:
            pulumi.set(__self__, "sales_accounts", sales_accounts)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)
        if selected_exports is not None:
            pulumi.set(__self__, "selected_exports", selected_exports)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if service_version is not None:
            pulumi.set(__self__, "service_version", service_version)
        if sftp_host is not None:
            pulumi.set(__self__, "sftp_host", sftp_host)
        if sftp_is_key_pair is not None:
            pulumi.set(__self__, "sftp_is_key_pair", sftp_is_key_pair)
        if sftp_password is not None:
            pulumi.set(__self__, "sftp_password", sftp_password)
        if sftp_port is not None:
            pulumi.set(__self__, "sftp_port", sftp_port)
        if sftp_user is not None:
            pulumi.set(__self__, "sftp_user", sftp_user)
        if sheet_id is not None:
            pulumi.set(__self__, "sheet_id", sheet_id)
        if shop is not None:
            pulumi.set(__self__, "shop", shop)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)
        if site_urls is not None:
            pulumi.set(__self__, "site_urls", site_urls)
        if skip_after is not None:
            pulumi.set(__self__, "skip_after", skip_after)
        if skip_before is not None:
            pulumi.set(__self__, "skip_before", skip_before)
        if soap_uri is not None:
            pulumi.set(__self__, "soap_uri", soap_uri)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sub_domain is not None:
            pulumi.set(__self__, "sub_domain", sub_domain)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if swipe_attribution_window is not None:
            pulumi.set(__self__, "swipe_attribution_window", swipe_attribution_window)
        if sync_data_locker is not None:
            pulumi.set(__self__, "sync_data_locker", sync_data_locker)
        if sync_format is not None:
            pulumi.set(__self__, "sync_format", sync_format)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)
        if sync_type is not None:
            pulumi.set(__self__, "sync_type", sync_type)
        if technical_account_id is not None:
            pulumi.set(__self__, "technical_account_id", technical_account_id)
        if test_table_name is not None:
            pulumi.set(__self__, "test_table_name", test_table_name)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if timeframe_months is not None:
            pulumi.set(__self__, "timeframe_months", timeframe_months)
        if token_key is not None:
            pulumi.set(__self__, "token_key", token_key)
        if token_secret is not None:
            pulumi.set(__self__, "token_secret", token_secret)
        if tunnel_host is not None:
            pulumi.set(__self__, "tunnel_host", tunnel_host)
        if tunnel_port is not None:
            pulumi.set(__self__, "tunnel_port", tunnel_port)
        if tunnel_user is not None:
            pulumi.set(__self__, "tunnel_user", tunnel_user)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)
        if update_config_on_each_sync is not None:
            pulumi.set(__self__, "update_config_on_each_sync", update_config_on_each_sync)
        if update_method is not None:
            pulumi.set(__self__, "update_method", update_method)
        if use_api_keys is not None:
            pulumi.set(__self__, "use_api_keys", use_api_keys)
        if use_webhooks is not None:
            pulumi.set(__self__, "use_webhooks", use_webhooks)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_key is not None:
            pulumi.set(__self__, "user_key", user_key)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_profiles is not None:
            pulumi.set(__self__, "user_profiles", user_profiles)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if view_attribution_window is not None:
            pulumi.set(__self__, "view_attribution_window", view_attribution_window)
        if view_through_attribution_window_size is not None:
            pulumi.set(__self__, "view_through_attribution_window_size", view_through_attribution_window_size)

    @property
    @pulumi.getter(name="absConnectionString")
    def abs_connection_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "abs_connection_string")

    @abs_connection_string.setter
    def abs_connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abs_connection_string", value)

    @property
    @pulumi.getter(name="absContainerName")
    def abs_container_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "abs_container_name")

    @abs_container_name.setter
    def abs_container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abs_container_name", value)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "accounts", value)

    @property
    @pulumi.getter(name="actionBreakdowns")
    def action_breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "action_breakdowns")

    @action_breakdowns.setter
    def action_breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "action_breakdowns", value)

    @property
    @pulumi.getter(name="actionReportTime")
    def action_report_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_report_time")

    @action_report_time.setter
    def action_report_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_report_time", value)

    @property
    @pulumi.getter(name="adobeAnalyticsConfigurations")
    def adobe_analytics_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigAdobeAnalyticsConfigurationArgs']]]]:
        return pulumi.get(self, "adobe_analytics_configurations")

    @adobe_analytics_configurations.setter
    def adobe_analytics_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigAdobeAnalyticsConfigurationArgs']]]]):
        pulumi.set(self, "adobe_analytics_configurations", value)

    @property
    @pulumi.getter
    def advertisables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "advertisables")

    @advertisables.setter
    def advertisables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "advertisables", value)

    @property
    @pulumi.getter
    def advertisers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "advertisers")

    @advertisers.setter
    def advertisers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "advertisers", value)

    @property
    @pulumi.getter(name="advertisersIds")
    def advertisers_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "advertisers_ids")

    @advertisers_ids.setter
    def advertisers_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "advertisers_ids", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="alwaysEncrypted")
    def always_encrypted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "always_encrypted")

    @always_encrypted.setter
    def always_encrypted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_encrypted", value)

    @property
    @pulumi.getter(name="apiAccessToken")
    def api_access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_access_token")

    @api_access_token.setter
    def api_access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_access_token", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiKeys")
    def api_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "api_keys")

    @api_keys.setter
    def api_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_keys", value)

    @property
    @pulumi.getter(name="apiQuota")
    def api_quota(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_quota")

    @api_quota.setter
    def api_quota(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_quota", value)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_secret", value)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="apiType")
    def api_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_type")

    @api_type.setter
    def api_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_type", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="appSyncMode")
    def app_sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_sync_mode")

    @app_sync_mode.setter
    def app_sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sync_mode", value)

    @property
    @pulumi.getter(name="appendFileOption")
    def append_file_option(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "append_file_option")

    @append_file_option.setter
    def append_file_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "append_file_option", value)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter(name="archivePattern")
    def archive_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "archive_pattern")

    @archive_pattern.setter
    def archive_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_pattern", value)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_mode")

    @auth_mode.setter
    def auth_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="authorizationMethod")
    def authorization_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_method")

    @authorization_method.setter
    def authorization_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_method", value)

    @property
    @pulumi.getter(name="awsRegionCode")
    def aws_region_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_region_code")

    @aws_region_code.setter
    def aws_region_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region_code", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "breakdowns")

    @breakdowns.setter
    def breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "breakdowns", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketService")
    def bucket_service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_service")

    @bucket_service.setter
    def bucket_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_service", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="clickAttributionWindow")
    def click_attribution_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "click_attribution_window")

    @click_attribution_window.setter
    def click_attribution_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "click_attribution_window", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="cloudStorageType")
    def cloud_storage_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_storage_type")

    @cloud_storage_type.setter
    def cloud_storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_storage_type", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="configMethod")
    def config_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_method")

    @config_method.setter
    def config_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_method", value)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_type", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_group")

    @consumer_group.setter
    def consumer_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_group", value)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_key")

    @consumer_key.setter
    def consumer_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_key", value)

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_secret")

    @consumer_secret.setter
    def consumer_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_secret", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter(name="conversionReportTime")
    def conversion_report_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "conversion_report_time")

    @conversion_report_time.setter
    def conversion_report_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conversion_report_time", value)

    @property
    @pulumi.getter(name="conversionWindowSize")
    def conversion_window_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "conversion_window_size")

    @conversion_window_size.setter
    def conversion_window_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conversion_window_size", value)

    @property
    @pulumi.getter(name="customTables")
    def custom_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigCustomTableArgs']]]]:
        return pulumi.get(self, "custom_tables")

    @custom_tables.setter
    def custom_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigCustomTableArgs']]]]):
        pulumi.set(self, "custom_tables", value)

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter(name="dailyApiCallLimit")
    def daily_api_call_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "daily_api_call_limit")

    @daily_api_call_limit.setter
    def daily_api_call_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daily_api_call_limit", value)

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_center")

    @data_center.setter
    def data_center(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_center", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter
    def datasource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datasource")

    @datasource.setter
    def datasource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datasource", value)

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_granularity")

    @date_granularity.setter
    def date_granularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_granularity", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="dimensionAttributes")
    def dimension_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dimension_attributes")

    @dimension_attributes.setter
    def dimension_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dimension_attributes", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter
    def elements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableAllDimensionCombinations")
    def enable_all_dimension_combinations(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_all_dimension_combinations")

    @enable_all_dimension_combinations.setter
    def enable_all_dimension_combinations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_all_dimension_combinations", value)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="engagementAttributionWindow")
    def engagement_attribution_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engagement_attribution_window")

    @engagement_attribution_window.setter
    def engagement_attribution_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engagement_attribution_window", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "escape_char")

    @escape_char.setter
    def escape_char(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escape_char", value)

    @property
    @pulumi.getter(name="euRegion")
    def eu_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eu_region")

    @eu_region.setter
    def eu_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eu_region", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="financeAccountSyncMode")
    def finance_account_sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "finance_account_sync_mode")

    @finance_account_sync_mode.setter
    def finance_account_sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finance_account_sync_mode", value)

    @property
    @pulumi.getter(name="financeAccounts")
    def finance_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "finance_accounts")

    @finance_accounts.setter
    def finance_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "finance_accounts", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="ftpHost")
    def ftp_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_host")

    @ftp_host.setter
    def ftp_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_host", value)

    @property
    @pulumi.getter(name="ftpPassword")
    def ftp_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_password")

    @ftp_password.setter
    def ftp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_password", value)

    @property
    @pulumi.getter(name="ftpPort")
    def ftp_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_port")

    @ftp_port.setter
    def ftp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_port", value)

    @property
    @pulumi.getter(name="ftpUser")
    def ftp_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ftp_user")

    @ftp_user.setter
    def ftp_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_user", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter(name="functionApp")
    def function_app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_app")

    @function_app.setter
    def function_app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_app", value)

    @property
    @pulumi.getter(name="functionKey")
    def function_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_key")

    @function_key.setter
    def function_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_key", value)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter(name="functionTrigger")
    def function_trigger(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_trigger")

    @function_trigger.setter
    def function_trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_trigger", value)

    @property
    @pulumi.getter(name="gcsBucket")
    def gcs_bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcs_bucket")

    @gcs_bucket.setter
    def gcs_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcs_bucket", value)

    @property
    @pulumi.getter(name="gcsFolder")
    def gcs_folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcs_folder")

    @gcs_folder.setter
    def gcs_folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcs_folder", value)

    @property
    @pulumi.getter(name="homeFolder")
    def home_folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "home_folder")

    @home_folder.setter
    def home_folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_folder", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def identity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity")

    @identity.setter
    def identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "integration_key")

    @integration_key.setter
    def integration_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_key", value)

    @property
    @pulumi.getter(name="isFtps")
    def is_ftps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_ftps")

    @is_ftps.setter
    def is_ftps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_ftps", value)

    @property
    @pulumi.getter(name="isMultiEntityFeatureEnabled")
    def is_multi_entity_feature_enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_multi_entity_feature_enabled")

    @is_multi_entity_feature_enabled.setter
    def is_multi_entity_feature_enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_multi_entity_feature_enabled", value)

    @property
    @pulumi.getter(name="isNewPackage")
    def is_new_package(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_new_package")

    @is_new_package.setter
    def is_new_package(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_new_package", value)

    @property
    @pulumi.getter(name="isSecure")
    def is_secure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_secure")

    @is_secure.setter
    def is_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_secure", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def last_synced_changes_utc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_synced_changes_utc")

    @last_synced_changes_utc.setter
    def last_synced_changes_utc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_synced_changes_utc", value)

    @property
    @pulumi.getter(name="latestVersion")
    def latest_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_version")

    @latest_version.setter
    def latest_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_version", value)

    @property
    @pulumi.getter(name="managerAccounts")
    def manager_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "manager_accounts")

    @manager_accounts.setter
    def manager_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "manager_accounts", value)

    @property
    @pulumi.getter(name="merchantId")
    def merchant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "merchant_id")

    @merchant_id.setter
    def merchant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "merchant_id", value)

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_type")

    @message_type.setter
    def message_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_type", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="namedRange")
    def named_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "named_range")

    @named_range.setter
    def named_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "named_range", value)

    @property
    @pulumi.getter(name="networkCode")
    def network_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_code")

    @network_code.setter
    def network_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_code", value)

    @property
    @pulumi.getter(name="nullSequence")
    def null_sequence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "null_sequence")

    @null_sequence.setter
    def null_sequence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "null_sequence", value)

    @property
    @pulumi.getter(name="oauthToken")
    def oauth_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_token")

    @oauth_token.setter
    def oauth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_token", value)

    @property
    @pulumi.getter(name="oauthTokenSecret")
    def oauth_token_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oauth_token_secret")

    @oauth_token_secret.setter
    def oauth_token_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_token_secret", value)

    @property
    @pulumi.getter(name="onError")
    def on_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "on_error")

    @on_error.setter
    def on_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_error", value)

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "on_premise")

    @on_premise.setter
    def on_premise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_premise", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter
    def pages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pages")

    @pages.setter
    def pages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pages", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def pat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pat")

    @pat.setter
    def pat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pat", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="pemCertificate")
    def pem_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pem_certificate")

    @pem_certificate.setter
    def pem_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pem_certificate", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="postClickAttributionWindowSize")
    def post_click_attribution_window_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_click_attribution_window_size")

    @post_click_attribution_window_size.setter
    def post_click_attribution_window_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_click_attribution_window_size", value)

    @property
    @pulumi.getter(name="prebuiltReport")
    def prebuilt_report(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prebuilt_report")

    @prebuilt_report.setter
    def prebuilt_report(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prebuilt_report", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter(name="projectCredentials")
    def project_credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigProjectCredentialArgs']]]]:
        return pulumi.get(self, "project_credentials")

    @project_credentials.setter
    def project_credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigProjectCredentialArgs']]]]):
        pulumi.set(self, "project_credentials", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="publicationName")
    def publication_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "publication_name")

    @publication_name.setter
    def publication_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publication_name", value)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_id")

    @query_id.setter
    def query_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replication_slot")

    @replication_slot.setter
    def replication_slot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_slot", value)

    @property
    @pulumi.getter(name="reportConfigurationIds")
    def report_configuration_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "report_configuration_ids")

    @report_configuration_ids.setter
    def report_configuration_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "report_configuration_ids", value)

    @property
    @pulumi.getter(name="reportSuites")
    def report_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "report_suites")

    @report_suites.setter
    def report_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "report_suites", value)

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_type")

    @report_type.setter
    def report_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_type", value)

    @property
    @pulumi.getter(name="reportUrl")
    def report_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_url")

    @report_url.setter
    def report_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_url", value)

    @property
    @pulumi.getter
    def reports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigReportArgs']]]]:
        return pulumi.get(self, "reports")

    @reports.setter
    def reports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorConfigReportArgs']]]]):
        pulumi.set(self, "reports", value)

    @property
    @pulumi.getter
    def repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "repositories")

    @repositories.setter
    def repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repositories", value)

    @property
    @pulumi.getter(name="resourceUrl")
    def resource_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_url")

    @resource_url.setter
    def resource_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_url", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter
    def s3bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3bucket")

    @s3bucket.setter
    def s3bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3bucket", value)

    @property
    @pulumi.getter(name="s3externalId")
    def s3external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3external_id")

    @s3external_id.setter
    def s3external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3external_id", value)

    @property
    @pulumi.getter
    def s3folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3folder")

    @s3folder.setter
    def s3folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3folder", value)

    @property
    @pulumi.getter(name="s3roleArn")
    def s3role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3role_arn")

    @s3role_arn.setter
    def s3role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3role_arn", value)

    @property
    @pulumi.getter(name="salesAccountSyncMode")
    def sales_account_sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sales_account_sync_mode")

    @sales_account_sync_mode.setter
    def sales_account_sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sales_account_sync_mode", value)

    @property
    @pulumi.getter(name="salesAccounts")
    def sales_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sales_accounts")

    @sales_accounts.setter
    def sales_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sales_accounts", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_protocol")

    @security_protocol.setter
    def security_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_protocol", value)

    @property
    @pulumi.getter(name="selectedExports")
    def selected_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "selected_exports")

    @selected_exports.setter
    def selected_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_exports", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="serviceVersion")
    def service_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_version")

    @service_version.setter
    def service_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_version", value)

    @property
    @pulumi.getter(name="sftpHost")
    def sftp_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sftp_host")

    @sftp_host.setter
    def sftp_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sftp_host", value)

    @property
    @pulumi.getter(name="sftpIsKeyPair")
    def sftp_is_key_pair(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sftp_is_key_pair")

    @sftp_is_key_pair.setter
    def sftp_is_key_pair(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sftp_is_key_pair", value)

    @property
    @pulumi.getter(name="sftpPassword")
    def sftp_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sftp_password")

    @sftp_password.setter
    def sftp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sftp_password", value)

    @property
    @pulumi.getter(name="sftpPort")
    def sftp_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sftp_port")

    @sftp_port.setter
    def sftp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sftp_port", value)

    @property
    @pulumi.getter(name="sftpUser")
    def sftp_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sftp_user")

    @sftp_user.setter
    def sftp_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sftp_user", value)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter
    def shop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shop")

    @shop.setter
    def shop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shop", value)

    @property
    @pulumi.getter
    def sid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sid")

    @sid.setter
    def sid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sid", value)

    @property
    @pulumi.getter(name="siteUrls")
    def site_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "site_urls")

    @site_urls.setter
    def site_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "site_urls", value)

    @property
    @pulumi.getter(name="skipAfter")
    def skip_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_after")

    @skip_after.setter
    def skip_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_after", value)

    @property
    @pulumi.getter(name="skipBefore")
    def skip_before(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skip_before")

    @skip_before.setter
    def skip_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_before", value)

    @property
    @pulumi.getter(name="soapUri")
    def soap_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "soap_uri")

    @soap_uri.setter
    def soap_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soap_uri", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_domain")

    @sub_domain.setter
    def sub_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_domain", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="swipeAttributionWindow")
    def swipe_attribution_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "swipe_attribution_window")

    @swipe_attribution_window.setter
    def swipe_attribution_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "swipe_attribution_window", value)

    @property
    @pulumi.getter(name="syncDataLocker")
    def sync_data_locker(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_data_locker")

    @sync_data_locker.setter
    def sync_data_locker(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_data_locker", value)

    @property
    @pulumi.getter(name="syncFormat")
    def sync_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_format")

    @sync_format.setter
    def sync_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_format", value)

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_mode", value)

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_type")

    @sync_type.setter
    def sync_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_type", value)

    @property
    @pulumi.getter(name="technicalAccountId")
    def technical_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "technical_account_id")

    @technical_account_id.setter
    def technical_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "technical_account_id", value)

    @property
    @pulumi.getter(name="testTableName")
    def test_table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "test_table_name")

    @test_table_name.setter
    def test_table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "test_table_name", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="timeframeMonths")
    def timeframe_months(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe_months")

    @timeframe_months.setter
    def timeframe_months(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe_months", value)

    @property
    @pulumi.getter(name="tokenKey")
    def token_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_key")

    @token_key.setter
    def token_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_key", value)

    @property
    @pulumi.getter(name="tokenSecret")
    def token_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_secret")

    @token_secret.setter
    def token_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_secret", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_id")

    @unique_id.setter
    def unique_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_id", value)

    @property
    @pulumi.getter(name="updateConfigOnEachSync")
    def update_config_on_each_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_config_on_each_sync")

    @update_config_on_each_sync.setter
    def update_config_on_each_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_config_on_each_sync", value)

    @property
    @pulumi.getter(name="updateMethod")
    def update_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_method")

    @update_method.setter
    def update_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_method", value)

    @property
    @pulumi.getter(name="useApiKeys")
    def use_api_keys(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_api_keys")

    @use_api_keys.setter
    def use_api_keys(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_api_keys", value)

    @property
    @pulumi.getter(name="useWebhooks")
    def use_webhooks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_webhooks")

    @use_webhooks.setter
    def use_webhooks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_webhooks", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userKey")
    def user_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_key")

    @user_key.setter
    def user_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_key", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="userProfiles")
    def user_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_profiles")

    @user_profiles.setter
    def user_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_profiles", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="viewAttributionWindow")
    def view_attribution_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view_attribution_window")

    @view_attribution_window.setter
    def view_attribution_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_attribution_window", value)

    @property
    @pulumi.getter(name="viewThroughAttributionWindowSize")
    def view_through_attribution_window_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view_through_attribution_window_size")

    @view_through_attribution_window_size.setter
    def view_through_attribution_window_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_through_attribution_window_size", value)


@pulumi.input_type
class ConnectorConfigAdobeAnalyticsConfigurationArgs:
    def __init__(__self__, *,
                 calculated_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 elements: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 report_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 segments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None):
        if calculated_metrics is not None:
            pulumi.set(__self__, "calculated_metrics", calculated_metrics)
        if elements is not None:
            pulumi.set(__self__, "elements", elements)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if report_suites is not None:
            pulumi.set(__self__, "report_suites", report_suites)
        if segments is not None:
            pulumi.set(__self__, "segments", segments)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)

    @property
    @pulumi.getter(name="calculatedMetrics")
    def calculated_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "calculated_metrics")

    @calculated_metrics.setter
    def calculated_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "calculated_metrics", value)

    @property
    @pulumi.getter
    def elements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="reportSuites")
    def report_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "report_suites")

    @report_suites.setter
    def report_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "report_suites", value)

    @property
    @pulumi.getter
    def segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "segments")

    @segments.setter
    def segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "segments", value)

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_mode", value)


@pulumi.input_type
class ConnectorConfigCustomTableArgs:
    def __init__(__self__, *,
                 action_breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 action_report_time: Optional[pulumi.Input[str]] = None,
                 aggregation: Optional[pulumi.Input[str]] = None,
                 breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 click_attribution_window: Optional[pulumi.Input[str]] = None,
                 config_type: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prebuilt_report_name: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 view_attribution_window: Optional[pulumi.Input[str]] = None):
        if action_breakdowns is not None:
            pulumi.set(__self__, "action_breakdowns", action_breakdowns)
        if action_report_time is not None:
            pulumi.set(__self__, "action_report_time", action_report_time)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if breakdowns is not None:
            pulumi.set(__self__, "breakdowns", breakdowns)
        if click_attribution_window is not None:
            pulumi.set(__self__, "click_attribution_window", click_attribution_window)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if prebuilt_report_name is not None:
            pulumi.set(__self__, "prebuilt_report_name", prebuilt_report_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if view_attribution_window is not None:
            pulumi.set(__self__, "view_attribution_window", view_attribution_window)

    @property
    @pulumi.getter(name="actionBreakdowns")
    def action_breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "action_breakdowns")

    @action_breakdowns.setter
    def action_breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "action_breakdowns", value)

    @property
    @pulumi.getter(name="actionReportTime")
    def action_report_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_report_time")

    @action_report_time.setter
    def action_report_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_report_time", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "breakdowns")

    @breakdowns.setter
    def breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "breakdowns", value)

    @property
    @pulumi.getter(name="clickAttributionWindow")
    def click_attribution_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "click_attribution_window")

    @click_attribution_window.setter
    def click_attribution_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "click_attribution_window", value)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_type", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="prebuiltReportName")
    def prebuilt_report_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prebuilt_report_name")

    @prebuilt_report_name.setter
    def prebuilt_report_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prebuilt_report_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="viewAttributionWindow")
    def view_attribution_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view_attribution_window")

    @view_attribution_window.setter
    def view_attribution_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_attribution_window", value)


@pulumi.input_type
class ConnectorConfigProjectCredentialArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ConnectorConfigReportArgs:
    def __init__(__self__, *,
                 config_type: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prebuilt_report: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 segments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 table: Optional[pulumi.Input[str]] = None):
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if prebuilt_report is not None:
            pulumi.set(__self__, "prebuilt_report", prebuilt_report)
        if report_type is not None:
            pulumi.set(__self__, "report_type", report_type)
        if segments is not None:
            pulumi.set(__self__, "segments", segments)
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_type", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="prebuiltReport")
    def prebuilt_report(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prebuilt_report")

    @prebuilt_report.setter
    def prebuilt_report(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prebuilt_report", value)

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_type")

    @report_type.setter
    def report_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_type", value)

    @property
    @pulumi.getter
    def segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "segments")

    @segments.setter
    def segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "segments", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table", value)


@pulumi.input_type
class ConnectorDestinationSchemaArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 table: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table", value)


@pulumi.input_type
class ConnectorSchemaConfigSchemaArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[str]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaTableArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaTableArgs']]]]:
        return pulumi.get(self, "tables")

    @tables.setter
    def tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaTableArgs']]]]):
        pulumi.set(self, "tables", value)


@pulumi.input_type
class ConnectorSchemaConfigSchemaTableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaTableColumnArgs']]]] = None,
                 enabled: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaTableColumnArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorSchemaConfigSchemaTableColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ConnectorSchemaConfigSchemaTableColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[str]] = None,
                 hashed: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hashed is not None:
            pulumi.set(__self__, "hashed", hashed)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hashed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hashed")

    @hashed.setter
    def hashed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hashed", value)


@pulumi.input_type
class ConnectorStatusArgs:
    def __init__(__self__, *,
                 is_historical_sync: Optional[pulumi.Input[str]] = None,
                 setup_state: Optional[pulumi.Input[str]] = None,
                 sync_state: Optional[pulumi.Input[str]] = None,
                 tasks: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusTaskArgs']]]] = None,
                 update_state: Optional[pulumi.Input[str]] = None,
                 warnings: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusWarningArgs']]]] = None):
        if is_historical_sync is not None:
            pulumi.set(__self__, "is_historical_sync", is_historical_sync)
        if setup_state is not None:
            pulumi.set(__self__, "setup_state", setup_state)
        if sync_state is not None:
            pulumi.set(__self__, "sync_state", sync_state)
        if tasks is not None:
            pulumi.set(__self__, "tasks", tasks)
        if update_state is not None:
            pulumi.set(__self__, "update_state", update_state)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter(name="isHistoricalSync")
    def is_historical_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_historical_sync")

    @is_historical_sync.setter
    def is_historical_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_historical_sync", value)

    @property
    @pulumi.getter(name="setupState")
    def setup_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "setup_state")

    @setup_state.setter
    def setup_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_state", value)

    @property
    @pulumi.getter(name="syncState")
    def sync_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_state")

    @sync_state.setter
    def sync_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_state", value)

    @property
    @pulumi.getter
    def tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusTaskArgs']]]]:
        return pulumi.get(self, "tasks")

    @tasks.setter
    def tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusTaskArgs']]]]):
        pulumi.set(self, "tasks", value)

    @property
    @pulumi.getter(name="updateState")
    def update_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "update_state")

    @update_state.setter
    def update_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_state", value)

    @property
    @pulumi.getter
    def warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusWarningArgs']]]]:
        return pulumi.get(self, "warnings")

    @warnings.setter
    def warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectorStatusWarningArgs']]]]):
        pulumi.set(self, "warnings", value)


@pulumi.input_type
class ConnectorStatusTaskArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class ConnectorStatusWarningArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class DestinationConfigArgs:
    def __init__(__self__, *,
                 auth: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_region: Optional[pulumi.Input[str]] = None,
                 connection_type: Optional[pulumi.Input[str]] = None,
                 create_external_tables: Optional[pulumi.Input[str]] = None,
                 data_set_location: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 external_location: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 http_path: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 personal_access_token: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 server_host_name: Optional[pulumi.Input[str]] = None,
                 tunnel_host: Optional[pulumi.Input[str]] = None,
                 tunnel_port: Optional[pulumi.Input[str]] = None,
                 tunnel_user: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_region is not None:
            pulumi.set(__self__, "cluster_region", cluster_region)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if create_external_tables is not None:
            pulumi.set(__self__, "create_external_tables", create_external_tables)
        if data_set_location is not None:
            pulumi.set(__self__, "data_set_location", data_set_location)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if external_location is not None:
            pulumi.set(__self__, "external_location", external_location)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_path is not None:
            pulumi.set(__self__, "http_path", http_path)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if personal_access_token is not None:
            pulumi.set(__self__, "personal_access_token", personal_access_token)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if server_host_name is not None:
            pulumi.set(__self__, "server_host_name", server_host_name)
        if tunnel_host is not None:
            pulumi.set(__self__, "tunnel_host", tunnel_host)
        if tunnel_port is not None:
            pulumi.set(__self__, "tunnel_port", tunnel_port)
        if tunnel_user is not None:
            pulumi.set(__self__, "tunnel_user", tunnel_user)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterRegion")
    def cluster_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_region")

    @cluster_region.setter
    def cluster_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_region", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter(name="createExternalTables")
    def create_external_tables(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_external_tables")

    @create_external_tables.setter
    def create_external_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_external_tables", value)

    @property
    @pulumi.getter(name="dataSetLocation")
    def data_set_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_set_location")

    @data_set_location.setter
    def data_set_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_location", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="externalLocation")
    def external_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_location")

    @external_location.setter
    def external_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_location", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_path")

    @http_path.setter
    def http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_path", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "personal_access_token")

    @personal_access_token.setter
    def personal_access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "personal_access_token", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="serverHostName")
    def server_host_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_host_name")

    @server_host_name.setter
    def server_host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_host_name", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class GroupUsersUserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 role: pulumi.Input[str]):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)


