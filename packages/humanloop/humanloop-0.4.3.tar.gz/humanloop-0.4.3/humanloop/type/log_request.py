# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python SDK.  To install the official Python SDK, run the following command:  ```bash pip install humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://humanloop.gitbook.io/humanloop-docs/).

    The version of the OpenAPI document: 4.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal

from humanloop.type.agent_config_request import AgentConfigRequest
from humanloop.type.chat_message import ChatMessage
from humanloop.type.feedback import Feedback
from humanloop.type.generic_config_request import GenericConfigRequest
from humanloop.type.tool_config_request import ToolConfigRequest
from humanloop.type.trace_model_config_request import TraceModelConfigRequest

class RequiredLogRequest(TypedDict):
    # Generated output from your model for the provided inputs.
    output: str

class OptionalLogRequest(TypedDict, total=False):
    # Unique function name. If no function exists with this name, a new function will be created.
    project: str

    # ID of the session to associate the datapoint.
    session_id: str

    # ID associated to the parent datapoint in a session.
    parent_id: str

    # Unique ID of an experiment trial to associate to the log.
    trial_id: str

    # The inputs passed to the prompt template.
    inputs: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # The messages passed to the to provider chat endpoint.
    messages: typing.List[ChatMessage]

    # Identifies where the model was called from.
    source: str

    # The model config used for this generation. Required unless `trial_id` is provided.
    config: typing.Union[TraceModelConfigRequest, ToolConfigRequest, GenericConfigRequest, AgentConfigRequest]

    # Any additional metadata to record.
    metadata: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Optional parameter to provide feedback with your logged datapoint.
    feedback: typing.Union[Feedback, typing.List[Feedback]]

    # User defined timestamp for when the log was created. 
    created_at: datetime

    # Error message if the log is an error.
    error: str

    # Duration of the logged event in seconds.
    duration: typing.Union[int, float]

class LogRequest(RequiredLogRequest, OptionalLogRequest):
    pass
