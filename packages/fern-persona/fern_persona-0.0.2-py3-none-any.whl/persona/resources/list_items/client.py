# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PersonaEnvironment
from ...errors.bad_request_error import BadRequestError
from ...types.archive_a_browser_fingerprint_list_item_response import ArchiveABrowserFingerprintListItemResponse
from ...types.archive_a_geolocation_list_item_response import ArchiveAGeolocationListItemResponse
from ...types.archive_a_government_id_number_list_item_response import ArchiveAGovernmentIdNumberListItemResponse
from ...types.archive_a_name_list_item_response import ArchiveANameListItemResponse
from ...types.archive_an_email_address_list_item_response import ArchiveAnEmailAddressListItemResponse
from ...types.create_a_county_list_item_request_data import CreateACountyListItemRequestData
from ...types.create_a_face_list_item_request_data import CreateAFaceListItemRequestData
from ...types.create_a_geolocation_list_item_request_data import CreateAGeolocationListItemRequestData
from ...types.create_a_geolocation_list_item_response import CreateAGeolocationListItemResponse
from ...types.create_a_government_id_number_list_item_request_data import CreateAGovernmentIdNumberListItemRequestData
from ...types.create_a_government_id_number_list_item_response import CreateAGovernmentIdNumberListItemResponse
from ...types.create_a_name_list_item_request_data import CreateANameListItemRequestData
from ...types.create_a_name_list_item_response import CreateANameListItemResponse
from ...types.create_a_phone_number_list_item_request_data import CreateAPhoneNumberListItemRequestData
from ...types.create_an_email_address_list_item_request_data import CreateAnEmailAddressListItemRequestData
from ...types.create_an_email_address_list_item_response import CreateAnEmailAddressListItemResponse
from ...types.create_an_ip_address_list_item_request_data import CreateAnIpAddressListItemRequestData

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ListItemsClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def create_a_county_list_item(
        self,
        *,
        data: typing.Optional[CreateACountyListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/countries"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_an_email_address_list_item(
        self,
        *,
        data: typing.Optional[CreateAnEmailAddressListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateAnEmailAddressListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/email-addresses"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnEmailAddressListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_geolocation_list_item(
        self,
        *,
        data: typing.Optional[CreateAGeolocationListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateAGeolocationListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/geolocations"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAGeolocationListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_an_ip_address_list_item(
        self,
        *,
        data: typing.Optional[CreateAnIpAddressListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/ip-addresses"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_government_id_number_list_item(
        self,
        *,
        data: typing.Optional[CreateAGovernmentIdNumberListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateAGovernmentIdNumberListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/government-id-numbers"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAGovernmentIdNumberListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_name_list_item(
        self,
        *,
        data: typing.Optional[CreateANameListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateANameListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/names"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateANameListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_phone_number_list_item(
        self,
        *,
        data: typing.Optional[CreateAPhoneNumberListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/phone-numbers"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_browser_fingerprint_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveABrowserFingerprintListItemResponse:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/browser-fingerprints/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveABrowserFingerprintListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_country_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/countries/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_an_email_address_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveAnEmailAddressListItemResponse:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/email-addresses/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveAnEmailAddressListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_geolocation_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveAGeolocationListItemResponse:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/geolocations/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveAGeolocationListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_government_id_number_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveAGovernmentIdNumberListItemResponse:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/government-id-numbers/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveAGovernmentIdNumberListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_an_ip_address_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/ip-addresses/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_name_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveANameListItemResponse:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/names/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveANameListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_phone_number_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/phone-numbers/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_face_list_item(
        self,
        *,
        data: typing.Optional[CreateAFaceListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/faces"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_face_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/faces/{list_item_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "idempotence-key": idempotence_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncListItemsClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def create_a_county_list_item(
        self,
        *,
        data: typing.Optional[CreateACountyListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/countries"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_an_email_address_list_item(
        self,
        *,
        data: typing.Optional[CreateAnEmailAddressListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateAnEmailAddressListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/email-addresses"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnEmailAddressListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_geolocation_list_item(
        self,
        *,
        data: typing.Optional[CreateAGeolocationListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateAGeolocationListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/geolocations"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAGeolocationListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_an_ip_address_list_item(
        self,
        *,
        data: typing.Optional[CreateAnIpAddressListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/ip-addresses"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_government_id_number_list_item(
        self,
        *,
        data: typing.Optional[CreateAGovernmentIdNumberListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateAGovernmentIdNumberListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/government-id-numbers"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAGovernmentIdNumberListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_name_list_item(
        self,
        *,
        data: typing.Optional[CreateANameListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateANameListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/names"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateANameListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_phone_number_list_item(
        self,
        *,
        data: typing.Optional[CreateAPhoneNumberListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/phone-numbers"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_browser_fingerprint_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveABrowserFingerprintListItemResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/browser-fingerprints/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveABrowserFingerprintListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_country_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/countries/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_an_email_address_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveAnEmailAddressListItemResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/email-addresses/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveAnEmailAddressListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_geolocation_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveAGeolocationListItemResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/geolocations/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveAGeolocationListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_government_id_number_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveAGovernmentIdNumberListItemResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/government-id-numbers/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveAGovernmentIdNumberListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_an_ip_address_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/ip-addresses/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_name_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> ArchiveANameListItemResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/names/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveANameListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_phone_number_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/phone-numbers/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_face_list_item(
        self,
        *,
        data: typing.Optional[CreateAFaceListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/faces"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_face_list_item(
        self,
        list_item_id: str,
        *,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"list-item/faces/{list_item_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
