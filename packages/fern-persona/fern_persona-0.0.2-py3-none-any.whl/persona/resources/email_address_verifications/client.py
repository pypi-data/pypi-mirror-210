# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PersonaEnvironment
from ...errors.bad_request_error import BadRequestError
from ...types.confirm_a_phone_number_verification_1_request_data import ConfirmAPhoneNumberVerification1RequestData
from ...types.confirm_a_phone_number_verification_1_response import ConfirmAPhoneNumberVerification1Response
from ...types.create_an_email_address_verification_request_data import CreateAnEmailAddressVerificationRequestData
from ...types.create_an_email_address_verification_response import CreateAnEmailAddressVerificationResponse
from ...types.retrieve_a_email_address_verification_response import RetrieveAEmailAddressVerificationResponse
from ...types.send_an_email_request_data import SendAnEmailRequestData
from ...types.send_an_email_response import SendAnEmailResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EmailAddressVerificationsClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def create_an_email_address_verification(
        self,
        *,
        data: CreateAnEmailAddressVerificationRequestData,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAnEmailAddressVerificationResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "verification/email-addresses"),
            json=jsonable_encoder({"data": data}),
            headers=remove_none_from_headers(
                {"Key-Inflection": key_inflection, "Idempotency-Key": idempotency_key, "Authorization": self.api_key}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnEmailAddressVerificationResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send_an_email(
        self, verification_id: str, *, data: typing.Optional[SendAnEmailRequestData] = OMIT
    ) -> SendAnEmailResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._environment.value}/", f"verification/email-addresses/{verification_id}/send-confirmation-code"
            ),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"Authorization": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SendAnEmailResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def confirm_a_phone_number_verification_1(
        self, verification_id: str, *, data: ConfirmAPhoneNumberVerification1RequestData
    ) -> ConfirmAPhoneNumberVerification1Response:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(
                f"{self._environment.value}/", f"verification/email-addresses/{verification_id}/confirm"
            ),
            json=jsonable_encoder({"data": data}),
            headers=remove_none_from_headers({"Authorization": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConfirmAPhoneNumberVerification1Response, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_a_email_address_verification(
        self, verification_id: str, *, key_inflection: typing.Optional[str] = None
    ) -> RetrieveAEmailAddressVerificationResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"verification/email-address/{verification_id}"),
            headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RetrieveAEmailAddressVerificationResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEmailAddressVerificationsClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def create_an_email_address_verification(
        self,
        *,
        data: CreateAnEmailAddressVerificationRequestData,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAnEmailAddressVerificationResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "verification/email-addresses"),
                json=jsonable_encoder({"data": data}),
                headers=remove_none_from_headers(
                    {
                        "Key-Inflection": key_inflection,
                        "Idempotency-Key": idempotency_key,
                        "Authorization": self.api_key,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnEmailAddressVerificationResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send_an_email(
        self, verification_id: str, *, data: typing.Optional[SendAnEmailRequestData] = OMIT
    ) -> SendAnEmailResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(
                    f"{self._environment.value}/",
                    f"verification/email-addresses/{verification_id}/send-confirmation-code",
                ),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"Authorization": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SendAnEmailResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def confirm_a_phone_number_verification_1(
        self, verification_id: str, *, data: ConfirmAPhoneNumberVerification1RequestData
    ) -> ConfirmAPhoneNumberVerification1Response:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(
                    f"{self._environment.value}/", f"verification/email-addresses/{verification_id}/confirm"
                ),
                json=jsonable_encoder({"data": data}),
                headers=remove_none_from_headers({"Authorization": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ConfirmAPhoneNumberVerification1Response, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_a_email_address_verification(
        self, verification_id: str, *, key_inflection: typing.Optional[str] = None
    ) -> RetrieveAEmailAddressVerificationResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"verification/email-address/{verification_id}"),
                headers=remove_none_from_headers({"Key-Inflection": key_inflection, "Authorization": self.api_key}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RetrieveAEmailAddressVerificationResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
