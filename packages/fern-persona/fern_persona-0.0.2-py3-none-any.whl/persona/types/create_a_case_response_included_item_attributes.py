# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .create_a_case_response_included_item_attributes_fields import CreateACaseResponseIncludedItemAttributesFields


class CreateACaseResponseIncludedItemAttributes(pydantic.BaseModel):
    status: typing.Optional[str]
    reference_id: typing.Optional[typing.Any] = pydantic.Field(alias="reference-id")
    note: typing.Optional[typing.Any]
    tags: typing.Optional[typing.List[typing.Any]]
    creator: typing.Optional[typing.Any]
    reviewer: typing.Optional[str]
    reviewer_type: typing.Optional[str] = pydantic.Field(alias="reviewer-type")
    reviewer_comment: typing.Optional[typing.Any] = pydantic.Field(alias="reviewer-comment")
    created_at: typing.Optional[str] = pydantic.Field(alias="created-at")
    started_at: typing.Optional[str] = pydantic.Field(alias="started-at")
    completed_at: typing.Optional[str] = pydantic.Field(alias="completed-at")
    failed_at: typing.Optional[typing.Any] = pydantic.Field(alias="failed-at")
    decisioned_at: typing.Optional[typing.Any] = pydantic.Field(alias="decisioned-at")
    expired_at: typing.Optional[typing.Any] = pydantic.Field(alias="expired-at")
    fields: typing.Optional[CreateACaseResponseIncludedItemAttributesFields]
    subject: typing.Optional[typing.Any]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
