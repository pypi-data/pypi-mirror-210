# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .create_an_inquiry_request_data_attributes_fields import CreateAnInquiryRequestDataAttributesFields


class CreateAnInquiryRequestDataAttributes(pydantic.BaseModel):
    template_id: typing.Optional[str] = pydantic.Field(
        alias="template-id",
        description=(
            "Template ID for flow requirements (use this field if your template ID starts with `tmpl_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*\n"
        ),
    )
    inquiry_template_id: typing.Optional[str] = pydantic.Field(
        alias="inquiry-template-id",
        description=(
            "Template ID for flow requirements (use this field if your template ID starts with `itmpl_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*\n"
        ),
    )
    inquiry_template_version_id: typing.Optional[str] = pydantic.Field(
        alias="inquiry-template-version-id",
        description=(
            "Template Version ID for flow requirements (begins with `itmplv_`). *You must pass in either template-id OR inquiry-template-id OR inquiry-template-version-id*\n"
        ),
    )
    theme_id: typing.Optional[str] = pydantic.Field(alias="theme-id", description=("Theme ID for styling\n"))
    account_id: typing.Optional[str] = pydantic.Field(
        alias="account-id", description=("Account ID for re-verifications or secure storage\n")
    )
    reference_id: typing.Optional[str] = pydantic.Field(
        alias="reference-id", description=("Reference ID on Account, refers to an entity in your user model\n")
    )
    redirect_uri: typing.Optional[str] = pydantic.Field(
        alias="redirect-uri", description=("If using the Hosted flow, redirect to this URL after completion\n")
    )
    note: typing.Optional[str] = pydantic.Field(description=("Unstructured field for your custom use\n"))
    country_code: typing.Optional[str] = pydantic.Field(
        alias="country-code", description=("Country code of residence for verification, in ISO 3166 Alpha-2 format.\n")
    )
    fields: typing.Optional[CreateAnInquiryRequestDataAttributesFields] = pydantic.Field(
        description=(
            "JSON key-value pairs of field name to field value. <br><br>Common fields include <ul><li>`name-first`</li><li>`name-last`</li><li>`birthdate`</li><li>`address-street-1`</li><li>`address-city`</li><li>`address-subdivision`</li><li>`address-postal-code`</li><li>`address-country-code`</li><li>`phone-number`</li><li>`email-address`</li></ul>\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
