# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class CreateAWorkflowRunRequestDataAttributes(pydantic.BaseModel):
    """
    Matches the trigger payload schema defined by the workflow version
    """

    example_field_1: typing.Optional[str] = pydantic.Field(
        alias="example-field-1",
        description=(
            "This is just an example field name. The actual name will depend on the trigger schema defined for the workflow version.\n"
        ),
    )
    example_field_2: typing.Optional[int] = pydantic.Field(
        alias="example-field-2",
        description=(
            "This is just an example field name. The actual name will depend on the trigger schema defined for the workflow version.\n"
        ),
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
