# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .generate_a_one_time_link_response_data_attributes_behaviors import (
    GenerateAOneTimeLinkResponseDataAttributesBehaviors,
)
from .generate_a_one_time_link_response_data_attributes_fields import GenerateAOneTimeLinkResponseDataAttributesFields


class GenerateAOneTimeLinkResponseDataAttributes(pydantic.BaseModel):
    status: typing.Optional[str]
    reference_id: typing.Optional[typing.Any] = pydantic.Field(alias="reference-id")
    note: typing.Optional[typing.Any]
    behaviors: typing.Optional[GenerateAOneTimeLinkResponseDataAttributesBehaviors]
    tags: typing.Optional[typing.List[typing.Any]]
    creator: typing.Optional[str]
    reviewer_comment: typing.Optional[typing.Any] = pydantic.Field(alias="reviewer-comment")
    created_at: typing.Optional[str] = pydantic.Field(alias="created-at")
    started_at: typing.Optional[str] = pydantic.Field(alias="started-at")
    completed_at: typing.Optional[typing.Any] = pydantic.Field(alias="completed-at")
    failed_at: typing.Optional[typing.Any] = pydantic.Field(alias="failed-at")
    marked_for_review_at: typing.Optional[typing.Any] = pydantic.Field(alias="marked-for-review-at")
    decisioned_at: typing.Optional[typing.Any] = pydantic.Field(alias="decisioned-at")
    expired_at: typing.Optional[typing.Any] = pydantic.Field(alias="expired-at")
    redacted_at: typing.Optional[typing.Any] = pydantic.Field(alias="redacted-at")
    previous_step_name: typing.Optional[str] = pydantic.Field(alias="previous-step-name")
    next_step_name: typing.Optional[str] = pydantic.Field(alias="next-step-name")
    name_first: typing.Optional[typing.Any] = pydantic.Field(alias="name-first")
    name_middle: typing.Optional[typing.Any] = pydantic.Field(alias="name-middle")
    name_last: typing.Optional[typing.Any] = pydantic.Field(alias="name-last")
    birthdate: typing.Optional[typing.Any]
    address_street_1: typing.Optional[typing.Any] = pydantic.Field(alias="address-street-1")
    address_street_2: typing.Optional[typing.Any] = pydantic.Field(alias="address-street-2")
    address_city: typing.Optional[typing.Any] = pydantic.Field(alias="address-city")
    address_subdivision: typing.Optional[typing.Any] = pydantic.Field(alias="address-subdivision")
    address_subdivision_abbr: typing.Optional[typing.Any] = pydantic.Field(alias="address-subdivision-abbr")
    address_postal_code: typing.Optional[typing.Any] = pydantic.Field(alias="address-postal-code")
    address_postal_code_abbr: typing.Optional[typing.Any] = pydantic.Field(alias="address-postal-code-abbr")
    social_security_number: typing.Optional[typing.Any] = pydantic.Field(alias="social-security-number")
    identification_number: typing.Optional[typing.Any] = pydantic.Field(alias="identification-number")
    email_address: typing.Optional[typing.Any] = pydantic.Field(alias="email-address")
    phone_number: typing.Optional[typing.Any] = pydantic.Field(alias="phone-number")
    fields: typing.Optional[GenerateAOneTimeLinkResponseDataAttributesFields]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
