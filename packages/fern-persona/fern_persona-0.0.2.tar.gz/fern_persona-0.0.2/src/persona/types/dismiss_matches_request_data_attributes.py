# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .dismiss_matches_request_data_attributes_dismiss_type import DismissMatchesRequestDataAttributesDismissType


class DismissMatchesRequestDataAttributes(pydantic.BaseModel):
    reason: typing.Optional[str] = pydantic.Field(description=("required\n"))
    dismiss_type: typing.Optional[DismissMatchesRequestDataAttributesDismissType] = pydantic.Field(
        alias="dismiss-type",
        description=(
            'required in case of Adverse Media and Business Adverse Media. "entity" - refers to one of several individuals or businesses found by the report. "media" - refers to specific article about that "entity"\n'
        ),
    )
    entity_id: typing.Optional[str] = pydantic.Field(
        alias="entity-id",
        description=(
            'required in case of Adverse Media and Business Adverse Media. refers to id of the "entity" or the "media".\n'
        ),
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
