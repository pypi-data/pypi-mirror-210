# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PersonaEnvironment
from ...errors.bad_request_error import BadRequestError
from ...types.add_persona_objects_request_meta import AddPersonaObjectsRequestMeta
from ...types.add_persona_objects_response import AddPersonaObjectsResponse
from ...types.assign_a_case_request_meta import AssignACaseRequestMeta
from ...types.assign_a_case_response import AssignACaseResponse
from ...types.create_a_case_request_data import CreateACaseRequestData
from ...types.create_a_case_request_meta import CreateACaseRequestMeta
from ...types.create_a_case_response import CreateACaseResponse
from ...types.list_all_cases_response import ListAllCasesResponse
from ...types.retrieve_case_response import RetrieveCaseResponse
from ...types.set_status_for_a_case_request_meta import SetStatusForACaseRequestMeta
from ...types.set_status_for_a_case_response import SetStatusForACaseResponse
from ...types.update_a_case_request_data import UpdateACaseRequestData
from ...types.update_a_case_response import UpdateACaseResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CasesClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def list_all_cases(
        self,
        *,
        page_after: typing.Optional[str] = None,
        page_before: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        filter_status: typing.Optional[str] = None,
        filter_resolution: typing.Optional[str] = None,
        filter_case_template_id: typing.Optional[str] = None,
        filter_account_id: typing.Optional[str] = None,
        filter_inquiry_id: typing.Optional[str] = None,
        filter_report_id: typing.Optional[str] = None,
        key_inflection: typing.Optional[str] = None,
    ) -> ListAllCasesResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "cases"),
            params={
                "page[after]": page_after,
                "page[before]": page_before,
                "page[size]": page_size,
                "filter[status]": filter_status,
                "filter[resolution]": filter_resolution,
                "filter[case-template-id]": filter_case_template_id,
                "filter[account-id]": filter_account_id,
                "filter[inquiry-id]": filter_inquiry_id,
                "filter[report-id]": filter_report_id,
            },
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListAllCasesResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_case(
        self, *, data: CreateACaseRequestData, meta: typing.Optional[CreateACaseRequestMeta] = OMIT
    ) -> CreateACaseResponse:
        _request: typing.Dict[str, typing.Any] = {"data": data}
        if meta is not OMIT:
            _request["meta"] = meta
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "cases"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateACaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_case(self, case_id: str, *, key_inflection: typing.Optional[str] = None) -> RetrieveCaseResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RetrieveCaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_a_case(
        self, case_id: str, *, data: typing.Optional[UpdateACaseRequestData] = OMIT
    ) -> UpdateACaseResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UpdateACaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_persona_objects(
        self, case_id: str, *, meta: typing.Optional[AddPersonaObjectsRequestMeta] = OMIT
    ) -> AddPersonaObjectsResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}/add-objects"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AddPersonaObjectsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def assign_a_case(self, case_id: str, *, meta: AssignACaseRequestMeta) -> AssignACaseResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}/assign"),
            json=jsonable_encoder({"meta": meta}),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AssignACaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def set_status_for_a_case(
        self, case_id: str, *, meta: typing.Optional[SetStatusForACaseRequestMeta] = OMIT
    ) -> SetStatusForACaseResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}/set-status"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SetStatusForACaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCasesClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def list_all_cases(
        self,
        *,
        page_after: typing.Optional[str] = None,
        page_before: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        filter_status: typing.Optional[str] = None,
        filter_resolution: typing.Optional[str] = None,
        filter_case_template_id: typing.Optional[str] = None,
        filter_account_id: typing.Optional[str] = None,
        filter_inquiry_id: typing.Optional[str] = None,
        filter_report_id: typing.Optional[str] = None,
        key_inflection: typing.Optional[str] = None,
    ) -> ListAllCasesResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "cases"),
                params={
                    "page[after]": page_after,
                    "page[before]": page_before,
                    "page[size]": page_size,
                    "filter[status]": filter_status,
                    "filter[resolution]": filter_resolution,
                    "filter[case-template-id]": filter_case_template_id,
                    "filter[account-id]": filter_account_id,
                    "filter[inquiry-id]": filter_inquiry_id,
                    "filter[report-id]": filter_report_id,
                },
                headers=remove_none_from_headers(
                    {"key-inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListAllCasesResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_case(
        self, *, data: CreateACaseRequestData, meta: typing.Optional[CreateACaseRequestMeta] = OMIT
    ) -> CreateACaseResponse:
        _request: typing.Dict[str, typing.Any] = {"data": data}
        if meta is not OMIT:
            _request["meta"] = meta
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "cases"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateACaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_case(self, case_id: str, *, key_inflection: typing.Optional[str] = None) -> RetrieveCaseResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}"),
                headers=remove_none_from_headers(
                    {"key-inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RetrieveCaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_a_case(
        self, case_id: str, *, data: typing.Optional[UpdateACaseRequestData] = OMIT
    ) -> UpdateACaseResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "PATCH",
                urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UpdateACaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_persona_objects(
        self, case_id: str, *, meta: typing.Optional[AddPersonaObjectsRequestMeta] = OMIT
    ) -> AddPersonaObjectsResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}/add-objects"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AddPersonaObjectsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def assign_a_case(self, case_id: str, *, meta: AssignACaseRequestMeta) -> AssignACaseResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}/assign"),
                json=jsonable_encoder({"meta": meta}),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AssignACaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def set_status_for_a_case(
        self, case_id: str, *, meta: typing.Optional[SetStatusForACaseRequestMeta] = OMIT
    ) -> SetStatusForACaseResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"cases/{case_id}/set-status"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SetStatusForACaseResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
