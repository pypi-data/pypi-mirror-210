# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PersonaEnvironment
from ...errors.bad_request_error import BadRequestError
from ...types.archive_a_list_response import ArchiveAListResponse
from ...types.create_a_browser_fingerprint_list_item_request_data import CreateABrowserFingerprintListItemRequestData
from ...types.create_a_browser_fingerprint_list_item_response import CreateABrowserFingerprintListItemResponse
from ...types.create_a_browser_fingerprint_list_request_data import CreateABrowserFingerprintListRequestData
from ...types.create_a_browser_fingerprint_list_response import CreateABrowserFingerprintListResponse
from ...types.create_a_country_list_request_data import CreateACountryListRequestData
from ...types.create_a_country_list_response import CreateACountryListResponse
from ...types.create_a_face_list_request_data import CreateAFaceListRequestData
from ...types.create_a_face_list_response import CreateAFaceListResponse
from ...types.create_a_geolocation_list_request_data import CreateAGeolocationListRequestData
from ...types.create_a_geolocation_list_response import CreateAGeolocationListResponse
from ...types.create_a_government_id_number_list_request_data import CreateAGovernmentIdNumberListRequestData
from ...types.create_a_government_id_number_list_response import CreateAGovernmentIdNumberListResponse
from ...types.create_a_name_list_request_data import CreateANameListRequestData
from ...types.create_a_name_list_response import CreateANameListResponse
from ...types.create_a_phone_number_list_request_data import CreateAPhoneNumberListRequestData
from ...types.create_a_phone_number_list_response import CreateAPhoneNumberListResponse
from ...types.create_an_email_address_list_request_data import CreateAnEmailAddressListRequestData
from ...types.create_an_email_address_list_response import CreateAnEmailAddressListResponse
from ...types.create_an_ip_address_list_request_data import CreateAnIpAddressListRequestData
from ...types.create_an_ip_address_list_response import CreateAnIpAddressListResponse
from ...types.list_all_lists_response import ListAllListsResponse
from ...types.retrieve_a_list_response import RetrieveAListResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ListsClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def list_all_lists(
        self,
        *,
        page_before: typing.Optional[str] = None,
        page_after: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        filter_status: typing.Optional[str] = None,
        key_inflection: typing.Optional[str] = None,
    ) -> ListAllListsResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "lists"),
            params={
                "page[before]": page_before,
                "page[after]": page_after,
                "page[size]": page_size,
                "filter[status]": filter_status,
            },
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListAllListsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_a_list(self, list_id: str, *, key_inflection: typing.Optional[str] = None) -> RetrieveAListResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"lists/{list_id}"),
            headers=remove_none_from_headers(
                {"key-inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RetrieveAListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def archive_a_list(
        self, list_id: str, *, key_inflection: typing.Optional[str] = None, idempotency_key: typing.Optional[str] = None
    ) -> ArchiveAListResponse:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"lists/{list_id}"),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveAListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_browser_fingerprint_list(
        self,
        *,
        data: typing.Optional[CreateABrowserFingerprintListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateABrowserFingerprintListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/browser-fingerprints"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateABrowserFingerprintListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_country_list(
        self,
        *,
        data: typing.Optional[CreateACountryListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateACountryListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/countries"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateACountryListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_an_email_address_list(
        self,
        *,
        data: typing.Optional[CreateAnEmailAddressListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAnEmailAddressListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/email-addresses"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnEmailAddressListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_geolocation_list(
        self,
        *,
        data: typing.Optional[CreateAGeolocationListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAGeolocationListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/geolocations"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAGeolocationListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_government_id_number_list(
        self,
        *,
        data: typing.Optional[CreateAGovernmentIdNumberListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAGovernmentIdNumberListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/government-id-numbers"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAGovernmentIdNumberListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_an_ip_address_list(
        self,
        *,
        data: typing.Optional[CreateAnIpAddressListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAnIpAddressListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/ip-addresses"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnIpAddressListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_name_list(
        self,
        *,
        data: typing.Optional[CreateANameListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateANameListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/names"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateANameListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_phone_number_list(
        self,
        *,
        data: typing.Optional[CreateAPhoneNumberListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAPhoneNumberListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/phone-numbers"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAPhoneNumberListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_browser_fingerprint_list_item(
        self,
        *,
        data: typing.Optional[CreateABrowserFingerprintListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateABrowserFingerprintListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list-item/browser-fingerprints"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotence-key": idempotence_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateABrowserFingerprintListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_a_face_list(
        self,
        *,
        data: typing.Optional[CreateAFaceListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAFaceListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "list/faces"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "key-inflection": key_inflection,
                    "idempotency-key": idempotency_key,
                    "Authorization": f"Bearer  {self.api_key}",
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAFaceListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncListsClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def list_all_lists(
        self,
        *,
        page_before: typing.Optional[str] = None,
        page_after: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        filter_status: typing.Optional[str] = None,
        key_inflection: typing.Optional[str] = None,
    ) -> ListAllListsResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "lists"),
                params={
                    "page[before]": page_before,
                    "page[after]": page_after,
                    "page[size]": page_size,
                    "filter[status]": filter_status,
                },
                headers=remove_none_from_headers(
                    {"key-inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListAllListsResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_a_list(
        self, list_id: str, *, key_inflection: typing.Optional[str] = None
    ) -> RetrieveAListResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"lists/{list_id}"),
                headers=remove_none_from_headers(
                    {"key-inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RetrieveAListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def archive_a_list(
        self, list_id: str, *, key_inflection: typing.Optional[str] = None, idempotency_key: typing.Optional[str] = None
    ) -> ArchiveAListResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "DELETE",
                urllib.parse.urljoin(f"{self._environment.value}/", f"lists/{list_id}"),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ArchiveAListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_browser_fingerprint_list(
        self,
        *,
        data: typing.Optional[CreateABrowserFingerprintListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateABrowserFingerprintListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/browser-fingerprints"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateABrowserFingerprintListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_country_list(
        self,
        *,
        data: typing.Optional[CreateACountryListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateACountryListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/countries"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateACountryListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_an_email_address_list(
        self,
        *,
        data: typing.Optional[CreateAnEmailAddressListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAnEmailAddressListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/email-addresses"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnEmailAddressListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_geolocation_list(
        self,
        *,
        data: typing.Optional[CreateAGeolocationListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAGeolocationListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/geolocations"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAGeolocationListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_government_id_number_list(
        self,
        *,
        data: typing.Optional[CreateAGovernmentIdNumberListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAGovernmentIdNumberListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/government-id-numbers"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAGovernmentIdNumberListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_an_ip_address_list(
        self,
        *,
        data: typing.Optional[CreateAnIpAddressListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAnIpAddressListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/ip-addresses"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnIpAddressListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_name_list(
        self,
        *,
        data: typing.Optional[CreateANameListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateANameListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/names"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateANameListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_phone_number_list(
        self,
        *,
        data: typing.Optional[CreateAPhoneNumberListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAPhoneNumberListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/phone-numbers"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAPhoneNumberListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_browser_fingerprint_list_item(
        self,
        *,
        data: typing.Optional[CreateABrowserFingerprintListItemRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotence_key: typing.Optional[str] = None,
    ) -> CreateABrowserFingerprintListItemResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list-item/browser-fingerprints"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotence-key": idempotence_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateABrowserFingerprintListItemResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_a_face_list(
        self,
        *,
        data: typing.Optional[CreateAFaceListRequestData] = OMIT,
        key_inflection: typing.Optional[str] = None,
        idempotency_key: typing.Optional[str] = None,
    ) -> CreateAFaceListResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "list/faces"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "key-inflection": key_inflection,
                        "idempotency-key": idempotency_key,
                        "Authorization": f"Bearer  {self.api_key}",
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAFaceListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
