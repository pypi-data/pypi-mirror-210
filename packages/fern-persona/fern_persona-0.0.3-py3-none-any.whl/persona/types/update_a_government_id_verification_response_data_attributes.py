# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class UpdateAGovernmentIdVerificationResponseDataAttributes(pydantic.BaseModel):
    status: typing.Optional[str]
    created_at: typing.Optional[str] = pydantic.Field(alias="created-at")
    created_at_ts: typing.Optional[int] = pydantic.Field(alias="created-at-ts")
    submitted_at: typing.Optional[typing.Any] = pydantic.Field(alias="submitted-at")
    submitted_at_ts: typing.Optional[typing.Any] = pydantic.Field(alias="submitted-at-ts")
    completed_at: typing.Optional[typing.Any] = pydantic.Field(alias="completed-at")
    completed_at_ts: typing.Optional[typing.Any] = pydantic.Field(alias="completed-at-ts")
    country_code: typing.Optional[str] = pydantic.Field(alias="country-code")
    entity_confidence_score: typing.Optional[typing.Any] = pydantic.Field(alias="entity-confidence-score")
    entity_confidence_reasons: typing.Optional[typing.Any] = pydantic.Field(alias="entity-confidence-reasons")
    front_photo_url: typing.Optional[typing.Any] = pydantic.Field(alias="front-photo-url")
    back_photo_url: typing.Optional[typing.Any] = pydantic.Field(alias="back-photo-url")
    photo_urls: typing.Optional[typing.Any] = pydantic.Field(alias="photo-urls")
    selfie_photo_url: typing.Optional[typing.Any] = pydantic.Field(alias="selfie-photo-url")
    id_class: typing.Optional[typing.Any] = pydantic.Field(alias="id-class")
    capture_method: typing.Optional[typing.Any] = pydantic.Field(alias="capture-method")
    name_middle: typing.Optional[typing.Any] = pydantic.Field(alias="name-middle")
    name_last: typing.Optional[typing.Any] = pydantic.Field(alias="name-last")
    birthdate: typing.Optional[typing.Any]
    address_street_1: typing.Optional[typing.Any] = pydantic.Field(alias="address-street-1")
    address_street_2: typing.Optional[typing.Any] = pydantic.Field(alias="address-street-2")
    address_city: typing.Optional[typing.Any] = pydantic.Field(alias="address-city")
    address_subdivision: typing.Optional[typing.Any] = pydantic.Field(alias="address-subdivision")
    address_postal_code: typing.Optional[typing.Any] = pydantic.Field(alias="address-postal-code")
    endorsements: typing.Optional[typing.Any]
    restrictions: typing.Optional[typing.Any]
    vehicle_class: typing.Optional[typing.Any] = pydantic.Field(alias="vehicle-class")
    checks: typing.Optional[typing.List[typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
