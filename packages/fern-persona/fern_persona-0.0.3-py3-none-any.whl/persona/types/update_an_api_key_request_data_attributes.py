# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class UpdateAnApiKeyRequestDataAttributes(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(description=("Human-readable name of the API key\n"))
    note: typing.Optional[str] = pydantic.Field(description=("Human readable context about the use of the API key\n"))
    api_version: typing.Optional[str] = pydantic.Field(alias="api-version", description=("Server API version\n"))
    api_key_inflection: typing.Optional[str] = pydantic.Field(
        alias="api-key-inflection", description=("Default API response key inflection\n")
    )
    permissions: typing.Optional[typing.List[str]] = pydantic.Field(
        description=("Abilities permitted to the API key\n")
    )
    api_attributes_allowlist: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="api-attributes-allowlist", description=("Attributes returned from API responses\n")
    )
    ip_address_allowlist: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="ip-address-allowlist", description=("IP addresses permitted for use by the API key\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
