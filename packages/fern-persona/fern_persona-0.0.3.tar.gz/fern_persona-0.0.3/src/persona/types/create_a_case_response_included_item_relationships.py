# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .create_a_case_response_included_item_relationships_account import (
    CreateACaseResponseIncludedItemRelationshipsAccount,
)
from .create_a_case_response_included_item_relationships_documents import (
    CreateACaseResponseIncludedItemRelationshipsDocuments,
)
from .create_a_case_response_included_item_relationships_inquiry_template_version import (
    CreateACaseResponseIncludedItemRelationshipsInquiryTemplateVersion,
)
from .create_a_case_response_included_item_relationships_reports import (
    CreateACaseResponseIncludedItemRelationshipsReports,
)
from .create_a_case_response_included_item_relationships_selfies import (
    CreateACaseResponseIncludedItemRelationshipsSelfies,
)
from .create_a_case_response_included_item_relationships_sessions import (
    CreateACaseResponseIncludedItemRelationshipsSessions,
)
from .create_a_case_response_included_item_relationships_template import (
    CreateACaseResponseIncludedItemRelationshipsTemplate,
)
from .create_a_case_response_included_item_relationships_verifications import (
    CreateACaseResponseIncludedItemRelationshipsVerifications,
)


class CreateACaseResponseIncludedItemRelationships(pydantic.BaseModel):
    account: typing.Optional[CreateACaseResponseIncludedItemRelationshipsAccount]
    template: typing.Optional[CreateACaseResponseIncludedItemRelationshipsTemplate]
    inquiry_template_version: typing.Optional[
        CreateACaseResponseIncludedItemRelationshipsInquiryTemplateVersion
    ] = pydantic.Field(alias="inquiry-template-version")
    reports: typing.Optional[CreateACaseResponseIncludedItemRelationshipsReports]
    verifications: typing.Optional[CreateACaseResponseIncludedItemRelationshipsVerifications]
    sessions: typing.Optional[CreateACaseResponseIncludedItemRelationshipsSessions]
    documents: typing.Optional[CreateACaseResponseIncludedItemRelationshipsDocuments]
    selfies: typing.Optional[CreateACaseResponseIncludedItemRelationshipsSelfies]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
