# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .update_an_account_request_data_attributes_selfie_photo import UpdateAnAccountRequestDataAttributesSelfiePhoto


class UpdateAnAccountRequestDataAttributes(pydantic.BaseModel):
    reference_id: typing.Optional[str] = pydantic.Field(
        alias="reference-id", description=("Reference ID on Account, refers to an entity in your user model.\n")
    )
    name_first: typing.Optional[str] = pydantic.Field(alias="name-first", description=("Given or first name.\n"))
    name_middle: typing.Optional[str] = pydantic.Field(alias="name-middle", description=("Middle name.\n"))
    name_last: typing.Optional[str] = pydantic.Field(alias="name-last", description=("Family or last name.\n"))
    birthdate: typing.Optional[str] = pydantic.Field(description=('Birthdate, must be in the format "YYYY-MM-DD".\n'))
    address_street_1: typing.Optional[str] = pydantic.Field(
        alias="address-street-1", description=("Street name of residence address.\n")
    )
    address_street_2: typing.Optional[str] = pydantic.Field(
        alias="address-street-2", description=("Extension of residence address, usually apartment or suite number.\n")
    )
    address_city: typing.Optional[str] = pydantic.Field(
        alias="address-city",
        description=("City of residence address. Not all international addresses use this attribute.\n"),
    )
    address_subdivision: typing.Optional[str] = pydantic.Field(
        alias="address-subdivision",
        description=(
            "State or subdivision of residence address. In the US, this should be the unabbreviated name. Not all international addresses use this attribute.\n"
        ),
    )
    address_postal_code: typing.Optional[str] = pydantic.Field(
        alias="address-postal-code",
        description=("ZIP or postal code of residence address. Not all international addresses use this attribute.\n"),
    )
    country_code: typing.Optional[str] = pydantic.Field(
        alias="country-code",
        description=(
            "ISO 3166-1 alpha 2 country code of the government ID to be verified. This is generally their country of residence as well.\n"
        ),
    )
    email_address: typing.Optional[str] = pydantic.Field(alias="email-address", description=("Email address.\n"))
    phone_number: typing.Optional[str] = pydantic.Field(alias="phone-number", description=("Phone number.\n"))
    social_security_number: typing.Optional[str] = pydantic.Field(
        alias="social-security-number", description=("Social security number.\n")
    )
    tags: typing.Optional[typing.List[str]] = pydantic.Field(
        description=("A list of tag names that are associated to an Account.\n")
    )
    selfie_photo: typing.Optional[UpdateAnAccountRequestDataAttributesSelfiePhoto] = pydantic.Field(
        alias="selfie-photo", description=("Selfie photo.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
