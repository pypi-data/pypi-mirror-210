# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PersonaEnvironment
from ...errors.bad_request_error import BadRequestError
from ...types.create_an_api_key_request_data import CreateAnApiKeyRequestData
from ...types.create_an_api_key_response import CreateAnApiKeyResponse
from ...types.expire_an_api_key_request_meta import ExpireAnApiKeyRequestMeta
from ...types.expire_an_api_key_response import ExpireAnApiKeyResponse
from ...types.list_all_api_keys_response import ListAllApiKeysResponse
from ...types.retrieve_an_api_key_response import RetrieveAnApiKeyResponse
from ...types.update_an_api_key_request_data import UpdateAnApiKeyRequestData
from ...types.update_an_api_key_response import UpdateAnApiKeyResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ApiKeysClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def list_all_api_keys(
        self,
        *,
        page_after: typing.Optional[str] = None,
        page_before: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        filter_name: typing.Optional[str] = None,
        key_inflection: typing.Optional[str] = None,
    ) -> ListAllApiKeysResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api-keys"),
            params={
                "page[after]": page_after,
                "page[before]": page_before,
                "page[size]": page_size,
                "filter[name]": filter_name,
            },
            headers=remove_none_from_headers(
                {"Key-Inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListAllApiKeysResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_an_api_key(self, *, data: typing.Optional[CreateAnApiKeyRequestData] = OMIT) -> CreateAnApiKeyResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api-keys"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnApiKeyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def expire_an_api_key(
        self, api_key_id: str, *, meta: typing.Optional[ExpireAnApiKeyRequestMeta] = OMIT
    ) -> ExpireAnApiKeyResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api-keys/{api_key_id}/expire"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ExpireAnApiKeyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_an_api_key(self, api_key_id: str) -> RetrieveAnApiKeyResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api-keys/{api_key_id}"),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RetrieveAnApiKeyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_an_api_key(
        self, api_key_id: str, *, data: typing.Optional[UpdateAnApiKeyRequestData] = OMIT
    ) -> UpdateAnApiKeyResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        _response = httpx.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api-keys/{api_key_id}"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UpdateAnApiKeyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncApiKeysClient:
    def __init__(self, *, environment: PersonaEnvironment = PersonaEnvironment.DEFAULT, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def list_all_api_keys(
        self,
        *,
        page_after: typing.Optional[str] = None,
        page_before: typing.Optional[str] = None,
        page_size: typing.Optional[str] = None,
        filter_name: typing.Optional[str] = None,
        key_inflection: typing.Optional[str] = None,
    ) -> ListAllApiKeysResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "api-keys"),
                params={
                    "page[after]": page_after,
                    "page[before]": page_before,
                    "page[size]": page_size,
                    "filter[name]": filter_name,
                },
                headers=remove_none_from_headers(
                    {"Key-Inflection": key_inflection, "Authorization": f"Bearer  {self.api_key}"}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListAllApiKeysResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_an_api_key(
        self, *, data: typing.Optional[CreateAnApiKeyRequestData] = OMIT
    ) -> CreateAnApiKeyResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "api-keys"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAnApiKeyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def expire_an_api_key(
        self, api_key_id: str, *, meta: typing.Optional[ExpireAnApiKeyRequestMeta] = OMIT
    ) -> ExpireAnApiKeyResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if meta is not OMIT:
            _request["meta"] = meta
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"api-keys/{api_key_id}/expire"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ExpireAnApiKeyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_an_api_key(self, api_key_id: str) -> RetrieveAnApiKeyResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"api-keys/{api_key_id}"),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RetrieveAnApiKeyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_an_api_key(
        self, api_key_id: str, *, data: typing.Optional[UpdateAnApiKeyRequestData] = OMIT
    ) -> UpdateAnApiKeyResponse:
        _request: typing.Dict[str, typing.Any] = {}
        if data is not OMIT:
            _request["data"] = data
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "PATCH",
                urllib.parse.urljoin(f"{self._environment.value}/", f"api-keys/{api_key_id}"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers({"Authorization": f"Bearer  {self.api_key}"}),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(UpdateAnApiKeyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
