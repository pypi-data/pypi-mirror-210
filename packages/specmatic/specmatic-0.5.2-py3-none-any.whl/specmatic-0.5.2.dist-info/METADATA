Metadata-Version: 2.1
Name: specmatic
Version: 0.5.2
Summary: A Python module for using the Specmatic Library.
Home-page: https://github.com/znsio/specmatic-python-extensions
Author: Specmatic Builders
Author-email: info@core.in
Description-Content-Type: text/markdown
Requires-Dist: blinker (==1.6.2)
Requires-Dist: certifi (==2023.5.7)
Requires-Dist: charset-normalizer (==3.1.0)
Requires-Dist: click (==8.1.3)
Requires-Dist: idna (==3.4)
Requires-Dist: iniconfig (==2.0.0)
Requires-Dist: itsdangerous (==2.1.2)
Requires-Dist: MarkupSafe (==2.1.2)
Requires-Dist: packaging (==23.1)
Requires-Dist: pluggy (==1.0.0)
Requires-Dist: pytest (==7.3.1)
Requires-Dist: requests (==2.30.0)
Requires-Dist: urllib3 (==2.0.2)
Requires-Dist: Werkzeug (==2.3.3)
Requires-Dist: uvicorn (==0.22.0)

This is a Python library to run [Specmatic](https://specmatic.in).  
Specmatic is a contract driven development tool that allows us to turn OpenAPI contracts into executable specifications.


- The specmatic python library is geared towards integrating Specmatic capabilities in PyTest tests.  
  It provides three main functions:
  - The ability to start and stop a python web app like flask/sanic.
  - The ability to run specmatic in test mode against a local contract/spec file, or against a spec defined in a Central Contract Repository (as defined in specmatic.json).
  - The ability to stub out an api dependency using the specmatic stub feature.


-  To run Specmatic against a wsgi app like flask:

``````
class TestContract:
    pass


stub = None
app_server = None

try:
    stub = Specmatic.start_stub(stub_host, stub_port, contract_file_path=stub_contract_file)
    stub.set_expectations([expectation_json_file])

    app_server = Specmatic.start_wsgi_app(app, app_host, app_port)

    Specmatic.test(TestContract, app_host, app_port, contract_file_path=service_contract_file)
except Exception as e:
    print(f"Error: {e}")
    raise e
finally:
    if app_server is not None:
        app_server.stop()
    if stub is not None:
        stub.stop()

if __name__ == '__main__':
    pytest.main()
``````  

- Specify absolute paths to the 'contract_file_path' parameter to point to the respective open api specification file.
- Run this test class either from your IDE or from command line:   
   ``````pytest test -v -s``````  
- NOTE: Please ensure that you set the '-v' and '-s' flags while running pytest as otherwise pytest may swallow up the console output.
- [Check out this repo](https://github.com/znsio/specmatic-order-bff-python/) to see more examples of how to use specmatic with a Flask app.  
- [Click here](https://specmatic.in/documentation/contract_tests.html) to learn more about Specmatic tests.  

-  To run Specmatic against an awsgi app like sanic, just replace the 'app_server' creation code above with:  
``````
app_server = Specmatic.start_asgi_app(app, app_host, app_port)
``````



  
