# coding: utf-8

"""
    Developer API - DataGalaxy

    # Overview  The DataGalaxy API gives you access to CRUD actions on your metamodel, users and licenses.  Our API is organized around REST. It accepts and returns JSON-encoded data, and uses standard HTTP response codes, verbs and authentication with access tokens.  To get the full picture of DataGalaxy, please feel free to consult our <a href='https://datagalaxy.freshdesk.com/solution/articles/35000131583--basics-datagalaxy-s-main-concepts-/en' target='_new'>online documentation.</a><br/> Have a look at our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>step by step guide</a> for a quick start on how to use our API.  ## Response Status Codes  | Status Code  | Description       | Notes | | ------------ | ----------------- | ----- | | 200          | OK                | The request was successful | | 400          | Bad Request       | Incoming request contains parameters that might not be valid | | 401          | Unauthorized      | The supplied credentials, if any, are not sufficient to access the resource | | 404          | Not Found         | The requested resource is not found | | 429          | Too Many Requests | Too many requests have been (Rate limiting) | | 500          | Server Error      | The server could not return the representation due to an internal server error | | 501          | Not Implemented   | The requested operation is not supported (e.g. supports GET but not POST etc.) |  ## Rate Limits  The DataGalaxy API has 2 kinds of limitations: rate limiting and throttling.  <b>Pro tip:</b> You can track your rate limiting status with the response header `X-RateLimit-Remaining`. It will display how many requests you can send until the next reset.  | Method        | Rate                 | Note | | ------------- | -------------------- | ---- | | Rate limiting | 7200 requests / hour | When exceeded, your IP will be blocked for 15 minutes. | | Throttling    | 2 requests / second  | When exceeded, each request will be delayed by 500ms. | | Payload size  | 100 MB               | When exceeded, request will be rejected. |  ## Pagination  All routes returning lists share the same pagination format. These routes take two optional parameters as querystrings: <code>limit</code> and <code>page</code>.<br>  | QueryString | Definition | |------------ | ---------- | | limit       | Integer ranging from 1 to 5000. It sets the maximum amount of objects per page. Default value is 20. | | page        | Integer starting at 1. It determines the page returned by the request. Default value is 1. |  The response payload contains 5 properties:  | Property  | Definition | | --------- | ---------- | | pages     | Total number of pages. | | total     | Number of objects returned. | | total_sum | Sum of all existing objects. | | next_page | URL of the next page. <i>Value will be null if there is none.</i> | | results   | List of objects. |  # Authentication  The DataGalaxy API uses <b>Bearer Authentication</b> to authenticate requests. Every request must contain an <code>Authorization</code> header with, either an <i>AccessToken</i> or an <i>IntegrationToken</i>.  ## AccessToken  Here is a quick example using CURL:  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>AccessToken</i>\"</code></pre>  The first steps of our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>quick start guide</a> will give you instructions to obtain your <code>accesstoken</code>.  ## IntegrationToken  An integration token can be generated from the \"Integration\" page on the DataGalaxy Administration space.  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>IntegrationToken</i>\"</code></pre>  # Changelog  The DataGalaxy Developer API is updated frequently with new features, improvements and fixes.  All these changes will be documented in our <button><a href='/v2/documentation/changelog' target='_blank'><b>changelog</b></a></button>.  # Documentation layout  We provide two API documentation layouts:  - [Default layout](/v2/documentation)<br> This layout displays informations in a modern way and contains more informations about requests parameters - [Swagger layout](/v2/documentation/old)<br> This is our legacy layout. It's main perk is the \"Try it\" feature which let's you send requests directly from the documentation.  # noqa: E501

    OpenAPI spec version: 2.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Technology(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'technology_code': 'str',
        'modules': 'list[TechnologyModule]',
        'description': 'str',
        'image_hash': 'str',
        'thumbnail_hash': 'str',
        'svg_image_hash': 'str',
        'creation_time': 'str',
        'creation_user_id': 'Uuid',
        'last_modification_time': 'str',
        'last_modification_user_id': 'Uuid',
        'last_usage_time': 'str',
        'last_usage_user_id': 'Uuid'
    }

    attribute_map = {
        'display_name': 'displayName',
        'technology_code': 'technologyCode',
        'modules': 'modules',
        'description': 'description',
        'image_hash': 'imageHash',
        'thumbnail_hash': 'thumbnailHash',
        'svg_image_hash': 'svgImageHash',
        'creation_time': 'creationTime',
        'creation_user_id': 'creationUserId',
        'last_modification_time': 'lastModificationTime',
        'last_modification_user_id': 'lastModificationUserId',
        'last_usage_time': 'lastUsageTime',
        'last_usage_user_id': 'lastUsageUserId'
    }

    def __init__(self, display_name=None, technology_code=None, modules=None, description=None, image_hash=None, thumbnail_hash=None, svg_image_hash=None, creation_time=None, creation_user_id=None, last_modification_time=None, last_modification_user_id=None, last_usage_time=None, last_usage_user_id=None):  # noqa: E501
        """Technology - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._technology_code = None
        self._modules = None
        self._description = None
        self._image_hash = None
        self._thumbnail_hash = None
        self._svg_image_hash = None
        self._creation_time = None
        self._creation_user_id = None
        self._last_modification_time = None
        self._last_modification_user_id = None
        self._last_usage_time = None
        self._last_usage_user_id = None
        self.discriminator = None
        self.display_name = display_name
        self.technology_code = technology_code
        self.modules = modules
        self.description = description
        self.image_hash = image_hash
        self.thumbnail_hash = thumbnail_hash
        self.svg_image_hash = svg_image_hash
        self.creation_time = creation_time
        self.creation_user_id = creation_user_id
        if last_modification_time is not None:
            self.last_modification_time = last_modification_time
        if last_modification_user_id is not None:
            self.last_modification_user_id = last_modification_user_id
        if last_usage_time is not None:
            self.last_usage_time = last_usage_time
        if last_usage_user_id is not None:
            self.last_usage_user_id = last_usage_user_id

    @property
    def display_name(self):
        """Gets the display_name of this Technology.  # noqa: E501


        :return: The display_name of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Technology.


        :param display_name: The display_name of this Technology.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def technology_code(self):
        """Gets the technology_code of this Technology.  # noqa: E501

        This code is the technology's identifier  # noqa: E501

        :return: The technology_code of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._technology_code

    @technology_code.setter
    def technology_code(self, technology_code):
        """Sets the technology_code of this Technology.

        This code is the technology's identifier  # noqa: E501

        :param technology_code: The technology_code of this Technology.  # noqa: E501
        :type: str
        """
        if technology_code is None:
            raise ValueError("Invalid value for `technology_code`, must not be `None`")  # noqa: E501

        self._technology_code = technology_code

    @property
    def modules(self):
        """Gets the modules of this Technology.  # noqa: E501

        Modules where technology is available  # noqa: E501

        :return: The modules of this Technology.  # noqa: E501
        :rtype: list[TechnologyModule]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this Technology.

        Modules where technology is available  # noqa: E501

        :param modules: The modules of this Technology.  # noqa: E501
        :type: list[TechnologyModule]
        """
        if modules is None:
            raise ValueError("Invalid value for `modules`, must not be `None`")  # noqa: E501

        self._modules = modules

    @property
    def description(self):
        """Gets the description of this Technology.  # noqa: E501

        Technology description  # noqa: E501

        :return: The description of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Technology.

        Technology description  # noqa: E501

        :param description: The description of this Technology.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def image_hash(self):
        """Gets the image_hash of this Technology.  # noqa: E501

        Use this hash to fetch the technology's image with the `GET /image?hash={hash}` endpoint  # noqa: E501

        :return: The image_hash of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._image_hash

    @image_hash.setter
    def image_hash(self, image_hash):
        """Sets the image_hash of this Technology.

        Use this hash to fetch the technology's image with the `GET /image?hash={hash}` endpoint  # noqa: E501

        :param image_hash: The image_hash of this Technology.  # noqa: E501
        :type: str
        """
        if image_hash is None:
            raise ValueError("Invalid value for `image_hash`, must not be `None`")  # noqa: E501

        self._image_hash = image_hash

    @property
    def thumbnail_hash(self):
        """Gets the thumbnail_hash of this Technology.  # noqa: E501

        Use this hash to fetch the technology's thumbnail with the `GET /image?hash={hash}` endpoint  # noqa: E501

        :return: The thumbnail_hash of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_hash

    @thumbnail_hash.setter
    def thumbnail_hash(self, thumbnail_hash):
        """Sets the thumbnail_hash of this Technology.

        Use this hash to fetch the technology's thumbnail with the `GET /image?hash={hash}` endpoint  # noqa: E501

        :param thumbnail_hash: The thumbnail_hash of this Technology.  # noqa: E501
        :type: str
        """
        if thumbnail_hash is None:
            raise ValueError("Invalid value for `thumbnail_hash`, must not be `None`")  # noqa: E501

        self._thumbnail_hash = thumbnail_hash

    @property
    def svg_image_hash(self):
        """Gets the svg_image_hash of this Technology.  # noqa: E501

        Use this hash to fetch the technology's svg with the `GET /image?hash={hash}` endpoint  # noqa: E501

        :return: The svg_image_hash of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._svg_image_hash

    @svg_image_hash.setter
    def svg_image_hash(self, svg_image_hash):
        """Sets the svg_image_hash of this Technology.

        Use this hash to fetch the technology's svg with the `GET /image?hash={hash}` endpoint  # noqa: E501

        :param svg_image_hash: The svg_image_hash of this Technology.  # noqa: E501
        :type: str
        """
        if svg_image_hash is None:
            raise ValueError("Invalid value for `svg_image_hash`, must not be `None`")  # noqa: E501

        self._svg_image_hash = svg_image_hash

    @property
    def creation_time(self):
        """Gets the creation_time of this Technology.  # noqa: E501


        :return: The creation_time of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Technology.


        :param creation_time: The creation_time of this Technology.  # noqa: E501
        :type: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def creation_user_id(self):
        """Gets the creation_user_id of this Technology.  # noqa: E501


        :return: The creation_user_id of this Technology.  # noqa: E501
        :rtype: Uuid
        """
        return self._creation_user_id

    @creation_user_id.setter
    def creation_user_id(self, creation_user_id):
        """Sets the creation_user_id of this Technology.


        :param creation_user_id: The creation_user_id of this Technology.  # noqa: E501
        :type: Uuid
        """
        if creation_user_id is None:
            raise ValueError("Invalid value for `creation_user_id`, must not be `None`")  # noqa: E501

        self._creation_user_id = creation_user_id

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this Technology.  # noqa: E501


        :return: The last_modification_time of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this Technology.


        :param last_modification_time: The last_modification_time of this Technology.  # noqa: E501
        :type: str
        """

        self._last_modification_time = last_modification_time

    @property
    def last_modification_user_id(self):
        """Gets the last_modification_user_id of this Technology.  # noqa: E501


        :return: The last_modification_user_id of this Technology.  # noqa: E501
        :rtype: Uuid
        """
        return self._last_modification_user_id

    @last_modification_user_id.setter
    def last_modification_user_id(self, last_modification_user_id):
        """Sets the last_modification_user_id of this Technology.


        :param last_modification_user_id: The last_modification_user_id of this Technology.  # noqa: E501
        :type: Uuid
        """

        self._last_modification_user_id = last_modification_user_id

    @property
    def last_usage_time(self):
        """Gets the last_usage_time of this Technology.  # noqa: E501


        :return: The last_usage_time of this Technology.  # noqa: E501
        :rtype: str
        """
        return self._last_usage_time

    @last_usage_time.setter
    def last_usage_time(self, last_usage_time):
        """Sets the last_usage_time of this Technology.


        :param last_usage_time: The last_usage_time of this Technology.  # noqa: E501
        :type: str
        """

        self._last_usage_time = last_usage_time

    @property
    def last_usage_user_id(self):
        """Gets the last_usage_user_id of this Technology.  # noqa: E501


        :return: The last_usage_user_id of this Technology.  # noqa: E501
        :rtype: Uuid
        """
        return self._last_usage_user_id

    @last_usage_user_id.setter
    def last_usage_user_id(self, last_usage_user_id):
        """Sets the last_usage_user_id of this Technology.


        :param last_usage_user_id: The last_usage_user_id of this Technology.  # noqa: E501
        :type: Uuid
        """

        self._last_usage_user_id = last_usage_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Technology, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Technology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
