# coding: utf-8

"""
    Developer API - DataGalaxy

    # Overview  The DataGalaxy API gives you access to CRUD actions on your metamodel, users and licenses.  Our API is organized around REST. It accepts and returns JSON-encoded data, and uses standard HTTP response codes, verbs and authentication with access tokens.  To get the full picture of DataGalaxy, please feel free to consult our <a href='https://datagalaxy.freshdesk.com/solution/articles/35000131583--basics-datagalaxy-s-main-concepts-/en' target='_new'>online documentation.</a><br/> Have a look at our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>step by step guide</a> for a quick start on how to use our API.  ## Response Status Codes  | Status Code  | Description       | Notes | | ------------ | ----------------- | ----- | | 200          | OK                | The request was successful | | 400          | Bad Request       | Incoming request contains parameters that might not be valid | | 401          | Unauthorized      | The supplied credentials, if any, are not sufficient to access the resource | | 404          | Not Found         | The requested resource is not found | | 429          | Too Many Requests | Too many requests have been (Rate limiting) | | 500          | Server Error      | The server could not return the representation due to an internal server error | | 501          | Not Implemented   | The requested operation is not supported (e.g. supports GET but not POST etc.) |  ## Rate Limits  The DataGalaxy API has 2 kinds of limitations: rate limiting and throttling.  <b>Pro tip:</b> You can track your rate limiting status with the response header `X-RateLimit-Remaining`. It will display how many requests you can send until the next reset.  | Method        | Rate                 | Note | | ------------- | -------------------- | ---- | | Rate limiting | 7200 requests / hour | When exceeded, your IP will be blocked for 15 minutes. | | Throttling    | 2 requests / second  | When exceeded, each request will be delayed by 500ms. | | Payload size  | 100 MB               | When exceeded, request will be rejected. |  ## Pagination  All routes returning lists share the same pagination format. These routes take two optional parameters as querystrings: <code>limit</code> and <code>page</code>.<br>  | QueryString | Definition | |------------ | ---------- | | limit       | Integer ranging from 1 to 5000. It sets the maximum amount of objects per page. Default value is 20. | | page        | Integer starting at 1. It determines the page returned by the request. Default value is 1. |  The response payload contains 5 properties:  | Property  | Definition | | --------- | ---------- | | pages     | Total number of pages. | | total     | Number of objects returned. | | total_sum | Sum of all existing objects. | | next_page | URL of the next page. <i>Value will be null if there is none.</i> | | results   | List of objects. |  # Authentication  The DataGalaxy API uses <b>Bearer Authentication</b> to authenticate requests. Every request must contain an <code>Authorization</code> header with, either an <i>AccessToken</i> or an <i>IntegrationToken</i>.  ## AccessToken  Here is a quick example using CURL:  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>AccessToken</i>\"</code></pre>  The first steps of our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>quick start guide</a> will give you instructions to obtain your <code>accesstoken</code>.  ## IntegrationToken  An integration token can be generated from the \"Integration\" page on the DataGalaxy Administration space.  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>IntegrationToken</i>\"</code></pre>  # Changelog  The DataGalaxy Developer API is updated frequently with new features, improvements and fixes.  All these changes will be documented in our <button><a href='/v2/documentation/changelog' target='_blank'><b>changelog</b></a></button>.  # Documentation layout  We provide two API documentation layouts:  - [Default layout](/v2/documentation)<br> This layout displays informations in a modern way and contains more informations about requests parameters - [Swagger layout](/v2/documentation/old)<br> This is our legacy layout. It's main perk is the \"Try it\" feature which let's you send requests directly from the documentation.  # noqa: E501

    OpenAPI spec version: 2.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GlossaryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_local_synonym(self, body, version_id, property_id, **kwargs):  # noqa: E501
        """Create a local synonym  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_local_synonym(body, version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LocalSynonymCreationBody body: Contains the name and description of your local synonym (required)
        :param VersionId version_id: (required)
        :param DoubleUuid property_id: (required)
        :return: LocalSynonym
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_local_synonym_with_http_info(body, version_id, property_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_local_synonym_with_http_info(body, version_id, property_id, **kwargs)  # noqa: E501
            return data

    def create_local_synonym_with_http_info(self, body, version_id, property_id, **kwargs):  # noqa: E501
        """Create a local synonym  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_local_synonym_with_http_info(body, version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LocalSynonymCreationBody body: Contains the name and description of your local synonym (required)
        :param VersionId version_id: (required)
        :param DoubleUuid property_id: (required)
        :return: LocalSynonym
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version_id', 'property_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_local_synonym" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_local_synonym`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `create_local_synonym`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `create_local_synonym`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'property_id' in params:
            path_params['propertyId'] = params['property_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/localSynonyms/{versionId}/{propertyId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocalSynonym',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_properties_bulk_tree(self, body, version_id, **kwargs):  # noqa: E501
        """Bulk upsert a property tree  # noqa: E501

        This route creates or update multiple properties and all their children up to a total of 250 000 entities.<br> This route uses the Upsert method. Existing entities are updated and non-existing ones are created.<br> Read our <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151776-mass-entity-creation-with-bulktree-routes\" target='_new'>article on bulktree</a> for more informations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_properties_bulk_tree(body, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PropertiesBulkTreeCreationRequest] body: (required)
        :param VersionId version_id: (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_properties_bulk_tree_with_http_info(body, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_properties_bulk_tree_with_http_info(body, version_id, **kwargs)  # noqa: E501
            return data

    def create_properties_bulk_tree_with_http_info(self, body, version_id, **kwargs):  # noqa: E501
        """Bulk upsert a property tree  # noqa: E501

        This route creates or update multiple properties and all their children up to a total of 250 000 entities.<br> This route uses the Upsert method. Existing entities are updated and non-existing ones are created.<br> Read our <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151776-mass-entity-creation-with-bulktree-routes\" target='_new'>article on bulktree</a> for more informations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_properties_bulk_tree_with_http_info(body, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PropertiesBulkTreeCreationRequest] body: (required)
        :param VersionId version_id: (required)
        :return: BulkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_properties_bulk_tree" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_properties_bulk_tree`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `create_properties_bulk_tree`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/bulktree/{versionId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_property(self, body, version_id, parent_id, **kwargs):  # noqa: E501
        """Create a property.  # noqa: E501

        Create a <b>property</b> in the specified <b>parent</b> (workspace or compatible property). <br>Available property types can be found thanks to the <code>GET /types</code> endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_property(body, version_id, parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, AdditionalCustomAttribute) body: (required)
        :param VersionId version_id: (required)
        :param DoubleUuid parent_id: (required)
        :return: EntityLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_property_with_http_info(body, version_id, parent_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_property_with_http_info(body, version_id, parent_id, **kwargs)  # noqa: E501
            return data

    def create_property_with_http_info(self, body, version_id, parent_id, **kwargs):  # noqa: E501
        """Create a property.  # noqa: E501

        Create a <b>property</b> in the specified <b>parent</b> (workspace or compatible property). <br>Available property types can be found thanks to the <code>GET /types</code> endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_property_with_http_info(body, version_id, parent_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, AdditionalCustomAttribute) body: (required)
        :param VersionId version_id: (required)
        :param DoubleUuid parent_id: (required)
        :return: EntityLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version_id', 'parent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_property`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `create_property`")  # noqa: E501
        # verify the required parameter 'parent_id' is set
        if ('parent_id' not in params or
                params['parent_id'] is None):
            raise ValueError("Missing the required parameter `parent_id` when calling `create_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'parent_id' in params:
            path_params['parentId'] = params['parent_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/{versionId}/{parentId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_bulk_property(self, body, version_id, **kwargs):  # noqa: E501
        """Bulk delete properties  # noqa: E501

        Deletes a list of **properties** referenced by their id. <br><br> **Warning: deleting a property will delete its children objects in the process** <br> Deleted children objects will be included in the total count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_bulk_property(body, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DoubleUuid] body: List of ids referencing properties (required)
        :param VersionId version_id: (required)
        :return: BulkDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_bulk_property_with_http_info(body, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_bulk_property_with_http_info(body, version_id, **kwargs)  # noqa: E501
            return data

    def delete_bulk_property_with_http_info(self, body, version_id, **kwargs):  # noqa: E501
        """Bulk delete properties  # noqa: E501

        Deletes a list of **properties** referenced by their id. <br><br> **Warning: deleting a property will delete its children objects in the process** <br> Deleted children objects will be included in the total count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_bulk_property_with_http_info(body, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DoubleUuid] body: List of ids referencing properties (required)
        :param VersionId version_id: (required)
        :return: BulkDeleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bulk_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_bulk_property`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `delete_bulk_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/bulk/{versionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkDeleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_local_synonym(self, version_id, local_synonym_id, **kwargs):  # noqa: E501
        """Delete a local synonym  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_local_synonym(version_id, local_synonym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param DoubleUuid local_synonym_id: (required)
        :return: LocalSynonym
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_local_synonym_with_http_info(version_id, local_synonym_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_local_synonym_with_http_info(version_id, local_synonym_id, **kwargs)  # noqa: E501
            return data

    def delete_local_synonym_with_http_info(self, version_id, local_synonym_id, **kwargs):  # noqa: E501
        """Delete a local synonym  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_local_synonym_with_http_info(version_id, local_synonym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param DoubleUuid local_synonym_id: (required)
        :return: LocalSynonym
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'local_synonym_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_local_synonym" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `delete_local_synonym`")  # noqa: E501
        # verify the required parameter 'local_synonym_id' is set
        if ('local_synonym_id' not in params or
                params['local_synonym_id'] is None):
            raise ValueError("Missing the required parameter `local_synonym_id` when calling `delete_local_synonym`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'local_synonym_id' in params:
            path_params['localSynonymId'] = params['local_synonym_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/localSynonyms/{versionId}/{localSynonymId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocalSynonym',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_property(self, version_id, property_id, **kwargs):  # noqa: E501
        """Delete a property.  # noqa: E501

        Deletes the specified <b>property</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_property(version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param DoubleUuid property_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_property_with_http_info(version_id, property_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_property_with_http_info(version_id, property_id, **kwargs)  # noqa: E501
            return data

    def delete_property_with_http_info(self, version_id, property_id, **kwargs):  # noqa: E501
        """Delete a property.  # noqa: E501

        Deletes the specified <b>property</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_property_with_http_info(version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param DoubleUuid property_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'property_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `delete_property`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `delete_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'property_id' in params:
            path_params['propertyId'] = params['property_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/{versionId}/{propertyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_local_synonyms(self, version_id, property_id, **kwargs):  # noqa: E501
        """Get local synonyms  # noqa: E501

        Fetches the list of synonyms on a property.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_local_synonyms(version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param DoubleUuid property_id: (required)
        :return: list[LocalSynonym]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_local_synonyms_with_http_info(version_id, property_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_local_synonyms_with_http_info(version_id, property_id, **kwargs)  # noqa: E501
            return data

    def get_local_synonyms_with_http_info(self, version_id, property_id, **kwargs):  # noqa: E501
        """Get local synonyms  # noqa: E501

        Fetches the list of synonyms on a property.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_local_synonyms_with_http_info(version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param DoubleUuid property_id: (required)
        :return: list[LocalSynonym]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'property_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_local_synonyms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_local_synonyms`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `get_local_synonyms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'property_id' in params:
            path_params['propertyId'] = params['property_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/localSynonyms/{versionId}/{propertyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LocalSynonym]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_properties_list(self, version_id, **kwargs):  # noqa: E501
        """Return a list of properties.  # noqa: E501

        Return a list of all <b>properties</b> contained in the specified <b>workspace</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_properties_list(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param Uuid parent_id:
        :param str name:
        :param PropertyType type:
        :param IncludeAccessData include_access_data:
        :param IncludeAttributes include_attributes:
        :param IncludeLinks include_links:
        :param float limit:
        :param float page:
        :param MaxDepth max_depth:
        :return: PaginatedResponseEntitySummary_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_properties_list_with_http_info(version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_properties_list_with_http_info(version_id, **kwargs)  # noqa: E501
            return data

    def get_properties_list_with_http_info(self, version_id, **kwargs):  # noqa: E501
        """Return a list of properties.  # noqa: E501

        Return a list of all <b>properties</b> contained in the specified <b>workspace</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_properties_list_with_http_info(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param Uuid parent_id:
        :param str name:
        :param PropertyType type:
        :param IncludeAccessData include_access_data:
        :param IncludeAttributes include_attributes:
        :param IncludeLinks include_links:
        :param float limit:
        :param float page:
        :param MaxDepth max_depth:
        :return: PaginatedResponseEntitySummary_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'parent_id', 'name', 'type', 'include_access_data', 'include_attributes', 'include_links', 'limit', 'page', 'max_depth']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_properties_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_properties_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'version_id' in params:
            query_params.append(('versionId', params['version_id']))  # noqa: E501
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'include_access_data' in params:
            query_params.append(('includeAccessData', params['include_access_data']))  # noqa: E501
        if 'include_attributes' in params:
            query_params.append(('includeAttributes', params['include_attributes']))  # noqa: E501
        if 'include_links' in params:
            query_params.append(('includeLinks', params['include_links']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'max_depth' in params:
            query_params.append(('maxDepth', params['max_depth']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResponseEntitySummary_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_property(self, version_id, property_id, **kwargs):  # noqa: E501
        """Return a property.  # noqa: E501

        Return the <b>details</b> of the specified <b>property</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property(version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param Uuid property_id: (required)
        :return: Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_property_with_http_info(version_id, property_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_property_with_http_info(version_id, property_id, **kwargs)  # noqa: E501
            return data

    def get_property_with_http_info(self, version_id, property_id, **kwargs):  # noqa: E501
        """Return a property.  # noqa: E501

        Return the <b>details</b> of the specified <b>property</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property_with_http_info(version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param Uuid property_id: (required)
        :return: Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'property_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_property`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `get_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'property_id' in params:
            path_params['propertyId'] = params['property_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/{versionId}/{propertyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_types(self, **kwargs):  # noqa: E501
        """List the property types.  # noqa: E501

        Return the list of <b>properties types</b> and their compatible <b>entity types</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CompatibilityDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_types_with_http_info(self, **kwargs):  # noqa: E501
        """List the property types.  # noqa: E501

        Return the list of <b>properties types</b> and their compatible <b>entity types</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CompatibilityDefinition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CompatibilityDefinition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def udpate_local_synonym(self, body, version_id, local_synonym_id, **kwargs):  # noqa: E501
        """Update a local synonym  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.udpate_local_synonym(body, version_id, local_synonym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LocalSynonymUpdateBody body: (required)
        :param VersionId version_id: (required)
        :param DoubleUuid local_synonym_id: (required)
        :return: LocalSynonym
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.udpate_local_synonym_with_http_info(body, version_id, local_synonym_id, **kwargs)  # noqa: E501
        else:
            (data) = self.udpate_local_synonym_with_http_info(body, version_id, local_synonym_id, **kwargs)  # noqa: E501
            return data

    def udpate_local_synonym_with_http_info(self, body, version_id, local_synonym_id, **kwargs):  # noqa: E501
        """Update a local synonym  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.udpate_local_synonym_with_http_info(body, version_id, local_synonym_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LocalSynonymUpdateBody body: (required)
        :param VersionId version_id: (required)
        :param DoubleUuid local_synonym_id: (required)
        :return: LocalSynonym
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version_id', 'local_synonym_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method udpate_local_synonym" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `udpate_local_synonym`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `udpate_local_synonym`")  # noqa: E501
        # verify the required parameter 'local_synonym_id' is set
        if ('local_synonym_id' not in params or
                params['local_synonym_id'] is None):
            raise ValueError("Missing the required parameter `local_synonym_id` when calling `udpate_local_synonym`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'local_synonym_id' in params:
            path_params['localSynonymId'] = params['local_synonym_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/localSynonyms/{versionId}/{localSynonymId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocalSynonym',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_property(self, body, version_id, property_id, **kwargs):  # noqa: E501
        """Edit a property.  # noqa: E501

        Modifies one or more attributes of the specified <b>property</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_property(body, version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, AdditionalCustomAttribute) body: (required)
        :param VersionId version_id: (required)
        :param DoubleUuid property_id: (required)
        :return: EntityLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_property_with_http_info(body, version_id, property_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_property_with_http_info(body, version_id, property_id, **kwargs)  # noqa: E501
            return data

    def update_property_with_http_info(self, body, version_id, property_id, **kwargs):  # noqa: E501
        """Edit a property.  # noqa: E501

        Modifies one or more attributes of the specified <b>property</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_property_with_http_info(body, version_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, AdditionalCustomAttribute) body: (required)
        :param VersionId version_id: (required)
        :param DoubleUuid property_id: (required)
        :return: EntityLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version_id', 'property_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_property`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `update_property`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `update_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501
        if 'property_id' in params:
            path_params['propertyId'] = params['property_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/properties/{versionId}/{propertyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
