# coding: utf-8

"""
    Developer API - DataGalaxy

    # Overview  The DataGalaxy API gives you access to CRUD actions on your metamodel, users and licenses.  Our API is organized around REST. It accepts and returns JSON-encoded data, and uses standard HTTP response codes, verbs and authentication with access tokens.  To get the full picture of DataGalaxy, please feel free to consult our <a href='https://datagalaxy.freshdesk.com/solution/articles/35000131583--basics-datagalaxy-s-main-concepts-/en' target='_new'>online documentation.</a><br/> Have a look at our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>step by step guide</a> for a quick start on how to use our API.  ## Response Status Codes  | Status Code  | Description       | Notes | | ------------ | ----------------- | ----- | | 200          | OK                | The request was successful | | 400          | Bad Request       | Incoming request contains parameters that might not be valid | | 401          | Unauthorized      | The supplied credentials, if any, are not sufficient to access the resource | | 404          | Not Found         | The requested resource is not found | | 429          | Too Many Requests | Too many requests have been (Rate limiting) | | 500          | Server Error      | The server could not return the representation due to an internal server error | | 501          | Not Implemented   | The requested operation is not supported (e.g. supports GET but not POST etc.) |  ## Rate Limits  The DataGalaxy API has 2 kinds of limitations: rate limiting and throttling.  <b>Pro tip:</b> You can track your rate limiting status with the response header `X-RateLimit-Remaining`. It will display how many requests you can send until the next reset.  | Method        | Rate                 | Note | | ------------- | -------------------- | ---- | | Rate limiting | 7200 requests / hour | When exceeded, your IP will be blocked for 15 minutes. | | Throttling    | 2 requests / second  | When exceeded, each request will be delayed by 500ms. | | Payload size  | 100 MB               | When exceeded, request will be rejected. |  ## Pagination  All routes returning lists share the same pagination format. These routes take two optional parameters as querystrings: <code>limit</code> and <code>page</code>.<br>  | QueryString | Definition | |------------ | ---------- | | limit       | Integer ranging from 1 to 5000. It sets the maximum amount of objects per page. Default value is 20. | | page        | Integer starting at 1. It determines the page returned by the request. Default value is 1. |  The response payload contains 5 properties:  | Property  | Definition | | --------- | ---------- | | pages     | Total number of pages. | | total     | Number of objects returned. | | total_sum | Sum of all existing objects. | | next_page | URL of the next page. <i>Value will be null if there is none.</i> | | results   | List of objects. |  # Authentication  The DataGalaxy API uses <b>Bearer Authentication</b> to authenticate requests. Every request must contain an <code>Authorization</code> header with, either an <i>AccessToken</i> or an <i>IntegrationToken</i>.  ## AccessToken  Here is a quick example using CURL:  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>AccessToken</i>\"</code></pre>  The first steps of our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>quick start guide</a> will give you instructions to obtain your <code>accesstoken</code>.  ## IntegrationToken  An integration token can be generated from the \"Integration\" page on the DataGalaxy Administration space.  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>IntegrationToken</i>\"</code></pre>  # Changelog  The DataGalaxy Developer API is updated frequently with new features, improvements and fixes.  All these changes will be documented in our <button><a href='/v2/documentation/changelog' target='_blank'><b>changelog</b></a></button>.  # Documentation layout  We provide two API documentation layouts:  - [Default layout](/v2/documentation)<br> This layout displays informations in a modern way and contains more informations about requests parameters - [Swagger layout](/v2/documentation/old)<br> This is our legacy layout. It's main perk is the \"Try it\" feature which let's you send requests directly from the documentation.  # noqa: E501

    OpenAPI spec version: 2.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttributeBulkCreationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'format': 'AttributeFormats',
        'description': 'str',
        'default_value': 'AnyOfAttributeBulkCreationBodyDefaultValue',
        'enforce_uniqueness': 'bool',
        'time_series_frequency': 'TimeSeriesFrequency',
        'time_series_color_rule': 'TimeSeriesColorRule',
        'data_type': 'ModuleNames'
    }

    attribute_map = {
        'name': 'name',
        'format': 'format',
        'description': 'description',
        'default_value': 'defaultValue',
        'enforce_uniqueness': 'enforceUniqueness',
        'time_series_frequency': 'timeSeriesFrequency',
        'time_series_color_rule': 'timeSeriesColorRule',
        'data_type': 'dataType'
    }

    def __init__(self, name=None, format=None, description=None, default_value=None, enforce_uniqueness=False, time_series_frequency=None, time_series_color_rule=None, data_type=None):  # noqa: E501
        """AttributeBulkCreationBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._format = None
        self._description = None
        self._default_value = None
        self._enforce_uniqueness = None
        self._time_series_frequency = None
        self._time_series_color_rule = None
        self._data_type = None
        self.discriminator = None
        self.name = name
        self.format = format
        if description is not None:
            self.description = description
        if default_value is not None:
            self.default_value = default_value
        if enforce_uniqueness is not None:
            self.enforce_uniqueness = enforce_uniqueness
        if time_series_frequency is not None:
            self.time_series_frequency = time_series_frequency
        if time_series_color_rule is not None:
            self.time_series_color_rule = time_series_color_rule
        self.data_type = data_type

    @property
    def name(self):
        """Gets the name of this AttributeBulkCreationBody.  # noqa: E501


        :return: The name of this AttributeBulkCreationBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeBulkCreationBody.


        :param name: The name of this AttributeBulkCreationBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def format(self):
        """Gets the format of this AttributeBulkCreationBody.  # noqa: E501


        :return: The format of this AttributeBulkCreationBody.  # noqa: E501
        :rtype: AttributeFormats
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this AttributeBulkCreationBody.


        :param format: The format of this AttributeBulkCreationBody.  # noqa: E501
        :type: AttributeFormats
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def description(self):
        """Gets the description of this AttributeBulkCreationBody.  # noqa: E501


        :return: The description of this AttributeBulkCreationBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttributeBulkCreationBody.


        :param description: The description of this AttributeBulkCreationBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_value(self):
        """Gets the default_value of this AttributeBulkCreationBody.  # noqa: E501


        :return: The default_value of this AttributeBulkCreationBody.  # noqa: E501
        :rtype: AnyOfAttributeBulkCreationBodyDefaultValue
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this AttributeBulkCreationBody.


        :param default_value: The default_value of this AttributeBulkCreationBody.  # noqa: E501
        :type: AnyOfAttributeBulkCreationBodyDefaultValue
        """

        self._default_value = default_value

    @property
    def enforce_uniqueness(self):
        """Gets the enforce_uniqueness of this AttributeBulkCreationBody.  # noqa: E501

        When set to true, duplicate creations will throw an error  # noqa: E501

        :return: The enforce_uniqueness of this AttributeBulkCreationBody.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_uniqueness

    @enforce_uniqueness.setter
    def enforce_uniqueness(self, enforce_uniqueness):
        """Sets the enforce_uniqueness of this AttributeBulkCreationBody.

        When set to true, duplicate creations will throw an error  # noqa: E501

        :param enforce_uniqueness: The enforce_uniqueness of this AttributeBulkCreationBody.  # noqa: E501
        :type: bool
        """

        self._enforce_uniqueness = enforce_uniqueness

    @property
    def time_series_frequency(self):
        """Gets the time_series_frequency of this AttributeBulkCreationBody.  # noqa: E501


        :return: The time_series_frequency of this AttributeBulkCreationBody.  # noqa: E501
        :rtype: TimeSeriesFrequency
        """
        return self._time_series_frequency

    @time_series_frequency.setter
    def time_series_frequency(self, time_series_frequency):
        """Sets the time_series_frequency of this AttributeBulkCreationBody.


        :param time_series_frequency: The time_series_frequency of this AttributeBulkCreationBody.  # noqa: E501
        :type: TimeSeriesFrequency
        """

        self._time_series_frequency = time_series_frequency

    @property
    def time_series_color_rule(self):
        """Gets the time_series_color_rule of this AttributeBulkCreationBody.  # noqa: E501


        :return: The time_series_color_rule of this AttributeBulkCreationBody.  # noqa: E501
        :rtype: TimeSeriesColorRule
        """
        return self._time_series_color_rule

    @time_series_color_rule.setter
    def time_series_color_rule(self, time_series_color_rule):
        """Sets the time_series_color_rule of this AttributeBulkCreationBody.


        :param time_series_color_rule: The time_series_color_rule of this AttributeBulkCreationBody.  # noqa: E501
        :type: TimeSeriesColorRule
        """

        self._time_series_color_rule = time_series_color_rule

    @property
    def data_type(self):
        """Gets the data_type of this AttributeBulkCreationBody.  # noqa: E501


        :return: The data_type of this AttributeBulkCreationBody.  # noqa: E501
        :rtype: ModuleNames
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this AttributeBulkCreationBody.


        :param data_type: The data_type of this AttributeBulkCreationBody.  # noqa: E501
        :type: ModuleNames
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttributeBulkCreationBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributeBulkCreationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
