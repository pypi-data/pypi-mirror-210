# coding: utf-8

"""
    Developer API - DataGalaxy

    # Overview  The DataGalaxy API gives you access to CRUD actions on your metamodel, users and licenses.  Our API is organized around REST. It accepts and returns JSON-encoded data, and uses standard HTTP response codes, verbs and authentication with access tokens.  To get the full picture of DataGalaxy, please feel free to consult our <a href='https://datagalaxy.freshdesk.com/solution/articles/35000131583--basics-datagalaxy-s-main-concepts-/en' target='_new'>online documentation.</a><br/> Have a look at our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>step by step guide</a> for a quick start on how to use our API.  ## Response Status Codes  | Status Code  | Description       | Notes | | ------------ | ----------------- | ----- | | 200          | OK                | The request was successful | | 400          | Bad Request       | Incoming request contains parameters that might not be valid | | 401          | Unauthorized      | The supplied credentials, if any, are not sufficient to access the resource | | 404          | Not Found         | The requested resource is not found | | 429          | Too Many Requests | Too many requests have been (Rate limiting) | | 500          | Server Error      | The server could not return the representation due to an internal server error | | 501          | Not Implemented   | The requested operation is not supported (e.g. supports GET but not POST etc.) |  ## Rate Limits  The DataGalaxy API has 2 kinds of limitations: rate limiting and throttling.  <b>Pro tip:</b> You can track your rate limiting status with the response header `X-RateLimit-Remaining`. It will display how many requests you can send until the next reset.  | Method        | Rate                 | Note | | ------------- | -------------------- | ---- | | Rate limiting | 7200 requests / hour | When exceeded, your IP will be blocked for 15 minutes. | | Throttling    | 2 requests / second  | When exceeded, each request will be delayed by 500ms. | | Payload size  | 100 MB               | When exceeded, request will be rejected. |  ## Pagination  All routes returning lists share the same pagination format. These routes take two optional parameters as querystrings: <code>limit</code> and <code>page</code>.<br>  | QueryString | Definition | |------------ | ---------- | | limit       | Integer ranging from 1 to 5000. It sets the maximum amount of objects per page. Default value is 20. | | page        | Integer starting at 1. It determines the page returned by the request. Default value is 1. |  The response payload contains 5 properties:  | Property  | Definition | | --------- | ---------- | | pages     | Total number of pages. | | total     | Number of objects returned. | | total_sum | Sum of all existing objects. | | next_page | URL of the next page. <i>Value will be null if there is none.</i> | | results   | List of objects. |  # Authentication  The DataGalaxy API uses <b>Bearer Authentication</b> to authenticate requests. Every request must contain an <code>Authorization</code> header with, either an <i>AccessToken</i> or an <i>IntegrationToken</i>.  ## AccessToken  Here is a quick example using CURL:  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>AccessToken</i>\"</code></pre>  The first steps of our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>quick start guide</a> will give you instructions to obtain your <code>accesstoken</code>.  ## IntegrationToken  An integration token can be generated from the \"Integration\" page on the DataGalaxy Administration space.  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>IntegrationToken</i>\"</code></pre>  # Changelog  The DataGalaxy Developer API is updated frequently with new features, improvements and fixes.  All these changes will be documented in our <button><a href='/v2/documentation/changelog' target='_blank'><b>changelog</b></a></button>.  # Documentation layout  We provide two API documentation layouts:  - [Default layout](/v2/documentation)<br> This layout displays informations in a modern way and contains more informations about requests parameters - [Swagger layout](/v2/documentation/old)<br> This is our legacy layout. It's main perk is the \"Try it\" feature which let's you send requests directly from the documentation.  # noqa: E501

    OpenAPI spec version: 2.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'SearchQuery',
        'version_id': 'str',
        'limit': 'object',
        'included_attributes': 'list[str]',
        'include_access_data': 'bool',
        'filters': 'list[SearchFilter]',
        'save_search_payload': 'object'
    }

    attribute_map = {
        'query': 'query',
        'version_id': 'versionId',
        'limit': 'limit',
        'included_attributes': 'includedAttributes',
        'include_access_data': 'includeAccessData',
        'filters': 'filters',
        'save_search_payload': 'saveSearchPayload'
    }

    def __init__(self, query=None, version_id=None, limit=None, included_attributes=None, include_access_data=None, filters=None, save_search_payload=None):  # noqa: E501
        """SearchBody - a model defined in Swagger"""  # noqa: E501
        self._query = None
        self._version_id = None
        self._limit = None
        self._included_attributes = None
        self._include_access_data = None
        self._filters = None
        self._save_search_payload = None
        self.discriminator = None
        if query is not None:
            self.query = query
        if version_id is not None:
            self.version_id = version_id
        if limit is not None:
            self.limit = limit
        if included_attributes is not None:
            self.included_attributes = included_attributes
        if include_access_data is not None:
            self.include_access_data = include_access_data
        if filters is not None:
            self.filters = filters
        if save_search_payload is not None:
            self.save_search_payload = save_search_payload

    @property
    def query(self):
        """Gets the query of this SearchBody.  # noqa: E501


        :return: The query of this SearchBody.  # noqa: E501
        :rtype: SearchQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchBody.


        :param query: The query of this SearchBody.  # noqa: E501
        :type: SearchQuery
        """

        self._query = query

    @property
    def version_id(self):
        """Gets the version_id of this SearchBody.  # noqa: E501

        Version to search in. <br>  If `versionId` is not provided, the search scope will be extended to all the workspaces you have access to.  # noqa: E501

        :return: The version_id of this SearchBody.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this SearchBody.

        Version to search in. <br>  If `versionId` is not provided, the search scope will be extended to all the workspaces you have access to.  # noqa: E501

        :param version_id: The version_id of this SearchBody.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def limit(self):
        """Gets the limit of this SearchBody.  # noqa: E501

        Maximum number of objects returned  # noqa: E501

        :return: The limit of this SearchBody.  # noqa: E501
        :rtype: object
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchBody.

        Maximum number of objects returned  # noqa: E501

        :param limit: The limit of this SearchBody.  # noqa: E501
        :type: object
        """

        self._limit = limit

    @property
    def included_attributes(self):
        """Gets the included_attributes of this SearchBody.  # noqa: E501

        List of attributes, identified by their <code>attributeKey</code> or <code>attributePath</code>, to be returned in the search result  In case of an attribute linked to a dataType, <code>attributePath</code> should be used  # noqa: E501

        :return: The included_attributes of this SearchBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._included_attributes

    @included_attributes.setter
    def included_attributes(self, included_attributes):
        """Sets the included_attributes of this SearchBody.

        List of attributes, identified by their <code>attributeKey</code> or <code>attributePath</code>, to be returned in the search result  In case of an attribute linked to a dataType, <code>attributePath</code> should be used  # noqa: E501

        :param included_attributes: The included_attributes of this SearchBody.  # noqa: E501
        :type: list[str]
        """

        self._included_attributes = included_attributes

    @property
    def include_access_data(self):
        """Gets the include_access_data of this SearchBody.  # noqa: E501

        If set to <code>true</code>, returns access rights the current token has on each item  # noqa: E501

        :return: The include_access_data of this SearchBody.  # noqa: E501
        :rtype: bool
        """
        return self._include_access_data

    @include_access_data.setter
    def include_access_data(self, include_access_data):
        """Sets the include_access_data of this SearchBody.

        If set to <code>true</code>, returns access rights the current token has on each item  # noqa: E501

        :param include_access_data: The include_access_data of this SearchBody.  # noqa: E501
        :type: bool
        """

        self._include_access_data = include_access_data

    @property
    def filters(self):
        """Gets the filters of this SearchBody.  # noqa: E501

        Use filters to refines your search result  # noqa: E501

        :return: The filters of this SearchBody.  # noqa: E501
        :rtype: list[SearchFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SearchBody.

        Use filters to refines your search result  # noqa: E501

        :param filters: The filters of this SearchBody.  # noqa: E501
        :type: list[SearchFilter]
        """

        self._filters = filters

    @property
    def save_search_payload(self):
        """Gets the save_search_payload of this SearchBody.  # noqa: E501

        If set to <code>true</code>, the search payload will be saved in the <b>queries history</b>.\\ Request the <code>GET /history/search/queries</code> to retrieve it.  # noqa: E501

        :return: The save_search_payload of this SearchBody.  # noqa: E501
        :rtype: object
        """
        return self._save_search_payload

    @save_search_payload.setter
    def save_search_payload(self, save_search_payload):
        """Sets the save_search_payload of this SearchBody.

        If set to <code>true</code>, the search payload will be saved in the <b>queries history</b>.\\ Request the <code>GET /history/search/queries</code> to retrieve it.  # noqa: E501

        :param save_search_payload: The save_search_payload of this SearchBody.  # noqa: E501
        :type: object
        """

        self._save_search_payload = save_search_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
