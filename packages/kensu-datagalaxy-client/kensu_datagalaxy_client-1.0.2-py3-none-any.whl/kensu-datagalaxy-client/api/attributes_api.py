# coding: utf-8

"""
    Developer API - DataGalaxy

    # Overview  The DataGalaxy API gives you access to CRUD actions on your metamodel, users and licenses.  Our API is organized around REST. It accepts and returns JSON-encoded data, and uses standard HTTP response codes, verbs and authentication with access tokens.  To get the full picture of DataGalaxy, please feel free to consult our <a href='https://datagalaxy.freshdesk.com/solution/articles/35000131583--basics-datagalaxy-s-main-concepts-/en' target='_new'>online documentation.</a><br/> Have a look at our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>step by step guide</a> for a quick start on how to use our API.  ## Response Status Codes  | Status Code  | Description       | Notes | | ------------ | ----------------- | ----- | | 200          | OK                | The request was successful | | 400          | Bad Request       | Incoming request contains parameters that might not be valid | | 401          | Unauthorized      | The supplied credentials, if any, are not sufficient to access the resource | | 404          | Not Found         | The requested resource is not found | | 429          | Too Many Requests | Too many requests have been (Rate limiting) | | 500          | Server Error      | The server could not return the representation due to an internal server error | | 501          | Not Implemented   | The requested operation is not supported (e.g. supports GET but not POST etc.) |  ## Rate Limits  The DataGalaxy API has 2 kinds of limitations: rate limiting and throttling.  <b>Pro tip:</b> You can track your rate limiting status with the response header `X-RateLimit-Remaining`. It will display how many requests you can send until the next reset.  | Method        | Rate                 | Note | | ------------- | -------------------- | ---- | | Rate limiting | 7200 requests / hour | When exceeded, your IP will be blocked for 15 minutes. | | Throttling    | 2 requests / second  | When exceeded, each request will be delayed by 500ms. | | Payload size  | 100 MB               | When exceeded, request will be rejected. |  ## Pagination  All routes returning lists share the same pagination format. These routes take two optional parameters as querystrings: <code>limit</code> and <code>page</code>.<br>  | QueryString | Definition | |------------ | ---------- | | limit       | Integer ranging from 1 to 5000. It sets the maximum amount of objects per page. Default value is 20. | | page        | Integer starting at 1. It determines the page returned by the request. Default value is 1. |  The response payload contains 5 properties:  | Property  | Definition | | --------- | ---------- | | pages     | Total number of pages. | | total     | Number of objects returned. | | total_sum | Sum of all existing objects. | | next_page | URL of the next page. <i>Value will be null if there is none.</i> | | results   | List of objects. |  # Authentication  The DataGalaxy API uses <b>Bearer Authentication</b> to authenticate requests. Every request must contain an <code>Authorization</code> header with, either an <i>AccessToken</i> or an <i>IntegrationToken</i>.  ## AccessToken  Here is a quick example using CURL:  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>AccessToken</i>\"</code></pre>  The first steps of our <a href='https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000151096--quick-start-datagalaxy-public-api-v2' target='_new'>quick start guide</a> will give you instructions to obtain your <code>accesstoken</code>.  ## IntegrationToken  An integration token can be generated from the \"Integration\" page on the DataGalaxy Administration space.  <pre><code>curl -X GET \"https://api.datagalaxy.com/v2/workspaces\" -H \"Authorization: Bearer <i>IntegrationToken</i>\"</code></pre>  # Changelog  The DataGalaxy Developer API is updated frequently with new features, improvements and fixes.  All these changes will be documented in our <button><a href='/v2/documentation/changelog' target='_blank'><b>changelog</b></a></button>.  # Documentation layout  We provide two API documentation layouts:  - [Default layout](/v2/documentation)<br> This layout displays informations in a modern way and contains more informations about requests parameters - [Swagger layout](/v2/documentation/old)<br> This is our legacy layout. It's main perk is the \"Try it\" feature which let's you send requests directly from the documentation.  # noqa: E501

    OpenAPI spec version: 2.12.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from kensu_datagalaxy_client.api_client import ApiClient


class AttributesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_create_attribute(self, body, **kwargs):  # noqa: E501
        """Bulk create attributes  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  Create up to 50 attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_attribute(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AttributeBulkCreationBody] body: (required)
        :return: list[Attribute]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_create_attribute_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_create_attribute_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bulk_create_attribute_with_http_info(self, body, **kwargs):  # noqa: E501
        """Bulk create attributes  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  Create up to 50 attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_attribute_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AttributeBulkCreationBody] body: (required)
        :return: list[Attribute]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_create_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_create_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Attribute]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_update_attribute(self, body, **kwargs):  # noqa: E501
        """Bulk edit attributes  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  Update up to 50 attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_attribute(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AttributeBulkUpdateBody] body: (required)
        :return: list[Attribute]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_update_attribute_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_update_attribute_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bulk_update_attribute_with_http_info(self, body, **kwargs):  # noqa: E501
        """Bulk edit attributes  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  Update up to 50 attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_attribute_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AttributeBulkUpdateBody] body: (required)
        :return: list[Attribute]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_update_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes/bulk', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Attribute]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_attribute(self, body, data_type, **kwargs):  # noqa: E501
        """Create a custom attribute  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_attribute(body, data_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeCreationBody body: (required)
        :param AttributeDataTypeEnum data_type: Specifies the <code>dataType</code> this attribute will be associated with (required)
        :return: Attribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_attribute_with_http_info(body, data_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_attribute_with_http_info(body, data_type, **kwargs)  # noqa: E501
            return data

    def create_attribute_with_http_info(self, body, data_type, **kwargs):  # noqa: E501
        """Create a custom attribute  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_attribute_with_http_info(body, data_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeCreationBody body: (required)
        :param AttributeDataTypeEnum data_type: Specifies the <code>dataType</code> this attribute will be associated with (required)
        :return: Attribute
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_attribute`")  # noqa: E501
        # verify the required parameter 'data_type' is set
        if ('data_type' not in params or
                params['data_type'] is None):
            raise ValueError("Missing the required parameter `data_type` when calling `create_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_type' in params:
            path_params['dataType'] = params['data_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes/{dataType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Attribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_attribute_values(self, body, data_type, attribute_key, **kwargs):  # noqa: E501
        """Add attribute values  # noqa: E501

        This route adds up to 100 values to attributes with format:  - `ValueList`, - `Hierarchy`, - `MultiValueList`, - `ManagedTag`, - or `ClientTag`.  Attributes with format `ValueList` expect a list of string values.<br> Attributes with format `Hierarchy`, `MultiValueList`, `ManagedTag` and `ClientTag` expect a request body with `TagsBody` schema.  Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_attribute_values(body, data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributesValuesBody1 body: (required)
        :param AttributeDataTypeEnum data_type: (required)
        :param AttributeKey attribute_key: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_attribute_values_with_http_info(body, data_type, attribute_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_attribute_values_with_http_info(body, data_type, attribute_key, **kwargs)  # noqa: E501
            return data

    def create_attribute_values_with_http_info(self, body, data_type, attribute_key, **kwargs):  # noqa: E501
        """Add attribute values  # noqa: E501

        This route adds up to 100 values to attributes with format:  - `ValueList`, - `Hierarchy`, - `MultiValueList`, - `ManagedTag`, - or `ClientTag`.  Attributes with format `ValueList` expect a list of string values.<br> Attributes with format `Hierarchy`, `MultiValueList`, `ManagedTag` and `ClientTag` expect a request body with `TagsBody` schema.  Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_attribute_values_with_http_info(body, data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributesValuesBody1 body: (required)
        :param AttributeDataTypeEnum data_type: (required)
        :param AttributeKey attribute_key: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_type', 'attribute_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_attribute_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_attribute_values`")  # noqa: E501
        # verify the required parameter 'data_type' is set
        if ('data_type' not in params or
                params['data_type'] is None):
            raise ValueError("Missing the required parameter `data_type` when calling `create_attribute_values`")  # noqa: E501
        # verify the required parameter 'attribute_key' is set
        if ('attribute_key' not in params or
                params['attribute_key'] is None):
            raise ValueError("Missing the required parameter `attribute_key` when calling `create_attribute_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_type' in params:
            query_params.append(('dataType', params['data_type']))  # noqa: E501
        if 'attribute_key' in params:
            query_params.append(('attributeKey', params['attribute_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes/values', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_attribute(self, data_type, attribute_key, **kwargs):  # noqa: E501
        """Delete a custom attribute  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_attribute(data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeDataTypeEnum data_type: Specifies the <code>dataType</code> associated with an attribute (required)
        :param AttributeKey attribute_key: Unique attribute identifier. Can be found with GET /attributes or when creating attributes with POST /attributes (required)
        :return: Attribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_attribute_with_http_info(data_type, attribute_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_attribute_with_http_info(data_type, attribute_key, **kwargs)  # noqa: E501
            return data

    def delete_attribute_with_http_info(self, data_type, attribute_key, **kwargs):  # noqa: E501
        """Delete a custom attribute  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_attribute_with_http_info(data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeDataTypeEnum data_type: Specifies the <code>dataType</code> associated with an attribute (required)
        :param AttributeKey attribute_key: Unique attribute identifier. Can be found with GET /attributes or when creating attributes with POST /attributes (required)
        :return: Attribute
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_type', 'attribute_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_type' is set
        if ('data_type' not in params or
                params['data_type'] is None):
            raise ValueError("Missing the required parameter `data_type` when calling `delete_attribute`")  # noqa: E501
        # verify the required parameter 'attribute_key' is set
        if ('attribute_key' not in params or
                params['attribute_key'] is None):
            raise ValueError("Missing the required parameter `attribute_key` when calling `delete_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_type' in params:
            path_params['dataType'] = params['data_type']  # noqa: E501
        if 'attribute_key' in params:
            path_params['attributeKey'] = params['attribute_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes/{dataType}/{attributeKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Attribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attribute_values(self, data_type, attribute_key, **kwargs):  # noqa: E501
        """List attribute values  # noqa: E501

        This route fetches available values for attributes with format:  - `ValueList`, - `Hierarchy`, - `MultiValueList`, - `ManagedTag`, - or `ClientTag`.  Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attribute_values(data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeDataTypeEnum data_type: (required)
        :param AttributeKey attribute_key: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_attribute_values_with_http_info(data_type, attribute_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_attribute_values_with_http_info(data_type, attribute_key, **kwargs)  # noqa: E501
            return data

    def get_attribute_values_with_http_info(self, data_type, attribute_key, **kwargs):  # noqa: E501
        """List attribute values  # noqa: E501

        This route fetches available values for attributes with format:  - `ValueList`, - `Hierarchy`, - `MultiValueList`, - `ManagedTag`, - or `ClientTag`.  Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attribute_values_with_http_info(data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeDataTypeEnum data_type: (required)
        :param AttributeKey attribute_key: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_type', 'attribute_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attribute_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_type' is set
        if ('data_type' not in params or
                params['data_type'] is None):
            raise ValueError("Missing the required parameter `data_type` when calling `get_attribute_values`")  # noqa: E501
        # verify the required parameter 'attribute_key' is set
        if ('attribute_key' not in params or
                params['attribute_key'] is None):
            raise ValueError("Missing the required parameter `attribute_key` when calling `get_attribute_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_type' in params:
            query_params.append(('dataType', params['data_type']))  # noqa: E501
        if 'attribute_key' in params:
            query_params.append(('attributeKey', params['attribute_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attributes(self, data_type, **kwargs):  # noqa: E501
        """Return a list of attributes  # noqa: E501

        Return a list of attributes available for a given <code>dataType</code>.<br> Note: <code>Common</code> attributes are not bound to one dataType and can therefore be used on any dataType.  Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attributes(data_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeDataTypeEnum data_type: (required)
        :return: list[Attribute]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_attributes_with_http_info(data_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_attributes_with_http_info(data_type, **kwargs)  # noqa: E501
            return data

    def get_attributes_with_http_info(self, data_type, **kwargs):  # noqa: E501
        """Return a list of attributes  # noqa: E501

        Return a list of attributes available for a given <code>dataType</code>.<br> Note: <code>Common</code> attributes are not bound to one dataType and can therefore be used on any dataType.  Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attributes_with_http_info(data_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeDataTypeEnum data_type: (required)
        :return: list[Attribute]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_type' is set
        if ('data_type' not in params or
                params['data_type'] is None):
            raise ValueError("Missing the required parameter `data_type` when calling `get_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_type' in params:
            query_params.append(('dataType', params['data_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Attribute]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supported_attributes(self, version_id, **kwargs):  # noqa: E501
        """List of available attributes  # noqa: E501

        <b><i>Deprecation warning: <br> This route is no longer maintained and is replaced by <code>GET /attributes</code>. </i></b>  Return a list of <b>attributes</b> available for the specified <b>dataType</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supported_attributes(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param str module_name:
        :param float limit:
        :param float page:
        :return: PaginatedResponseAttributesResponseBody_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supported_attributes_with_http_info(version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_supported_attributes_with_http_info(version_id, **kwargs)  # noqa: E501
            return data

    def get_supported_attributes_with_http_info(self, version_id, **kwargs):  # noqa: E501
        """List of available attributes  # noqa: E501

        <b><i>Deprecation warning: <br> This route is no longer maintained and is replaced by <code>GET /attributes</code>. </i></b>  Return a list of <b>attributes</b> available for the specified <b>dataType</b>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supported_attributes_with_http_info(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VersionId version_id: (required)
        :param str module_name:
        :param float limit:
        :param float page:
        :return: PaginatedResponseAttributesResponseBody_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'module_name', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supported_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_supported_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []
        if 'module_name' in params:
            query_params.append(('moduleName', params['module_name']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/supportedAttributes/{versionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResponseAttributesResponseBody_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tags(self, **kwargs):  # noqa: E501
        """List available tags  # noqa: E501

        <b><i>Deprecation warning: <br> This route is no longer maintained and is replaced by <code>GET /attributes/values</code>.<br> In order to reproduce this route's behavior, request <code>GET /attributes/values?dataType=common&attributeKey=Domains</code>. </i></b>  Return the list of all <b>tags</b> available.<br> Tags can be added to the <code>tag</code> field of an object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float limit:
        :param float page:
        :param str color:
        :param bool is_native:
        :param bool is_active:
        :param bool is_user_suggestion_enabled:
        :return: PaginatedResponseTagsResponseBody_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tags_with_http_info(self, **kwargs):  # noqa: E501
        """List available tags  # noqa: E501

        <b><i>Deprecation warning: <br> This route is no longer maintained and is replaced by <code>GET /attributes/values</code>.<br> In order to reproduce this route's behavior, request <code>GET /attributes/values?dataType=common&attributeKey=Domains</code>. </i></b>  Return the list of all <b>tags</b> available.<br> Tags can be added to the <code>tag</code> field of an object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float limit:
        :param float page:
        :param str color:
        :param bool is_native:
        :param bool is_active:
        :param bool is_user_suggestion_enabled:
        :return: PaginatedResponseTagsResponseBody_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'page', 'color', 'is_native', 'is_active', 'is_user_suggestion_enabled']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501
        if 'is_native' in params:
            query_params.append(('isNative', params['is_native']))  # noqa: E501
        if 'is_active' in params:
            query_params.append(('isActive', params['is_active']))  # noqa: E501
        if 'is_user_suggestion_enabled' in params:
            query_params.append(('isUserSuggestionEnabled', params['is_user_suggestion_enabled']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResponseTagsResponseBody_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tags(self, body, **kwargs):  # noqa: E501
        """Create tag  # noqa: E501

        <b><i>Deprecation warning: <br> This route is no longer maintained and is replaced by <code>POST /attributes/values</code>.<br> In order to reproduce this route's behavior, request <code>POST /attributes/values?dataType=common&attributeKey=Domains</code> and send the same request body. </i></b>  This route can creates up to 5 000 tags. <b>color</b> can be one of the values enumerated below, or an hexadecimal value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tags(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[TagsBody] body: (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tags_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_tags_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_tags_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create tag  # noqa: E501

        <b><i>Deprecation warning: <br> This route is no longer maintained and is replaced by <code>POST /attributes/values</code>.<br> In order to reproduce this route's behavior, request <code>POST /attributes/values?dataType=common&attributeKey=Domains</code> and send the same request body. </i></b>  This route can creates up to 5 000 tags. <b>color</b> can be one of the values enumerated below, or an hexadecimal value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tags_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[TagsBody] body: (required)
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_attribute(self, body, data_type, attribute_key, **kwargs):  # noqa: E501
        """Update an attribute  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_attribute(body, data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeUpdateBody body: (required)
        :param AttributeDataTypeEnum data_type: Specifies the <code>dataType</code> associated with an attribute (required)
        :param str attribute_key: Unique attribute identifier. Can be found with GET /attributes or when creating attributes with POST /attributes (required)
        :return: Attribute
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_attribute_with_http_info(body, data_type, attribute_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_attribute_with_http_info(body, data_type, attribute_key, **kwargs)  # noqa: E501
            return data

    def update_attribute_with_http_info(self, body, data_type, attribute_key, **kwargs):  # noqa: E501
        """Update an attribute  # noqa: E501

        Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_attribute_with_http_info(body, data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributeUpdateBody body: (required)
        :param AttributeDataTypeEnum data_type: Specifies the <code>dataType</code> associated with an attribute (required)
        :param str attribute_key: Unique attribute identifier. Can be found with GET /attributes or when creating attributes with POST /attributes (required)
        :return: Attribute
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_type', 'attribute_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_attribute" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_attribute`")  # noqa: E501
        # verify the required parameter 'data_type' is set
        if ('data_type' not in params or
                params['data_type'] is None):
            raise ValueError("Missing the required parameter `data_type` when calling `update_attribute`")  # noqa: E501
        # verify the required parameter 'attribute_key' is set
        if ('attribute_key' not in params or
                params['attribute_key'] is None):
            raise ValueError("Missing the required parameter `attribute_key` when calling `update_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_type' in params:
            path_params['dataType'] = params['data_type']  # noqa: E501
        if 'attribute_key' in params:
            path_params['attributeKey'] = params['attribute_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes/{dataType}/{attributeKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Attribute',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_attribute_values(self, body, data_type, attribute_key, **kwargs):  # noqa: E501
        """Update attribute values  # noqa: E501

        This route updates up to 100 attribute values for attributes with format:  - `ValueList`, - `Hierarchy`, - `MultiValueList`, - `ManagedTag`, - or `ClientTag`. <br><br>  Attributes with format `ValueList` expect a request body with `AttributeValue` schema.<br> Attributes with format `Hierarchy`, `MultiValueList`, `ManagedTag` and `ClientTag` expect a request body with `TagsBody` schema.  Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_attribute_values(body, data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributesValuesBody body: (required)
        :param AttributeDataTypeEnum data_type: (required)
        :param AttributeKey attribute_key: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_attribute_values_with_http_info(body, data_type, attribute_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_attribute_values_with_http_info(body, data_type, attribute_key, **kwargs)  # noqa: E501
            return data

    def update_attribute_values_with_http_info(self, body, data_type, attribute_key, **kwargs):  # noqa: E501
        """Update attribute values  # noqa: E501

        This route updates up to 100 attribute values for attributes with format:  - `ValueList`, - `Hierarchy`, - `MultiValueList`, - `ManagedTag`, - or `ClientTag`. <br><br>  Attributes with format `ValueList` expect a request body with `AttributeValue` schema.<br> Attributes with format `Hierarchy`, `MultiValueList`, `ManagedTag` and `ClientTag` expect a request body with `TagsBody` schema.  Learn more about attributes with <a href=\"https://datagalaxy.freshdesk.com/en/support/solutions/articles/35000132213--basics-presentation-of-attributes\" target=\"_blank\">this article</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_attribute_values_with_http_info(body, data_type, attribute_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributesValuesBody body: (required)
        :param AttributeDataTypeEnum data_type: (required)
        :param AttributeKey attribute_key: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'data_type', 'attribute_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_attribute_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_attribute_values`")  # noqa: E501
        # verify the required parameter 'data_type' is set
        if ('data_type' not in params or
                params['data_type'] is None):
            raise ValueError("Missing the required parameter `data_type` when calling `update_attribute_values`")  # noqa: E501
        # verify the required parameter 'attribute_key' is set
        if ('attribute_key' not in params or
                params['attribute_key'] is None):
            raise ValueError("Missing the required parameter `attribute_key` when calling `update_attribute_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data_type' in params:
            query_params.append(('dataType', params['data_type']))  # noqa: E501
        if 'attribute_key' in params:
            query_params.append(('attributeKey', params['attribute_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AccessToken', 'IntegrationToken']  # noqa: E501

        return self.api_client.call_api(
            '/attributes/values', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
