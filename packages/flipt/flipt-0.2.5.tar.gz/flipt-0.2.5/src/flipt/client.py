# This file was auto-generated by Fern from our API Definition.

import typing

from backports.cached_property import cached_property

from .environment import FliptApiEnvironment
from .resources.auth.client import AsyncAuthClient, AuthClient
from .resources.auth_method_k_8_s.client import AsyncAuthMethodK8SClient, AuthMethodK8SClient
from .resources.auth_method_oidc.client import AsyncAuthMethodOidcClient, AuthMethodOidcClient
from .resources.auth_method_token.client import AsyncAuthMethodTokenClient, AuthMethodTokenClient
from .resources.constraints.client import AsyncConstraintsClient, ConstraintsClient
from .resources.distributions.client import AsyncDistributionsClient, DistributionsClient
from .resources.evaluate.client import AsyncEvaluateClient, EvaluateClient
from .resources.flags.client import AsyncFlagsClient, FlagsClient
from .resources.namespaces.client import AsyncNamespacesClient, NamespacesClient
from .resources.rules.client import AsyncRulesClient, RulesClient
from .resources.segments.client import AsyncSegmentsClient, SegmentsClient
from .resources.variants.client import AsyncVariantsClient, VariantsClient


class FliptApi:
    def __init__(
        self, *, environment: FliptApiEnvironment = FliptApiEnvironment.PRODUCTION, token: typing.Optional[str] = None
    ):
        self._environment = environment
        self._token = token

    @cached_property
    def auth_method_k_8_s(self) -> AuthMethodK8SClient:
        return AuthMethodK8SClient(environment=self._environment, token=self._token)

    @cached_property
    def auth_method_oidc(self) -> AuthMethodOidcClient:
        return AuthMethodOidcClient(environment=self._environment, token=self._token)

    @cached_property
    def auth_method_token(self) -> AuthMethodTokenClient:
        return AuthMethodTokenClient(environment=self._environment, token=self._token)

    @cached_property
    def auth(self) -> AuthClient:
        return AuthClient(environment=self._environment, token=self._token)

    @cached_property
    def constraints(self) -> ConstraintsClient:
        return ConstraintsClient(environment=self._environment, token=self._token)

    @cached_property
    def distributions(self) -> DistributionsClient:
        return DistributionsClient(environment=self._environment, token=self._token)

    @cached_property
    def evaluate(self) -> EvaluateClient:
        return EvaluateClient(environment=self._environment, token=self._token)

    @cached_property
    def flags(self) -> FlagsClient:
        return FlagsClient(environment=self._environment, token=self._token)

    @cached_property
    def namespaces(self) -> NamespacesClient:
        return NamespacesClient(environment=self._environment, token=self._token)

    @cached_property
    def rules(self) -> RulesClient:
        return RulesClient(environment=self._environment, token=self._token)

    @cached_property
    def segments(self) -> SegmentsClient:
        return SegmentsClient(environment=self._environment, token=self._token)

    @cached_property
    def variants(self) -> VariantsClient:
        return VariantsClient(environment=self._environment, token=self._token)


class AsyncFliptApi:
    def __init__(
        self, *, environment: FliptApiEnvironment = FliptApiEnvironment.PRODUCTION, token: typing.Optional[str] = None
    ):
        self._environment = environment
        self._token = token

    @cached_property
    def auth_method_k_8_s(self) -> AsyncAuthMethodK8SClient:
        return AsyncAuthMethodK8SClient(environment=self._environment, token=self._token)

    @cached_property
    def auth_method_oidc(self) -> AsyncAuthMethodOidcClient:
        return AsyncAuthMethodOidcClient(environment=self._environment, token=self._token)

    @cached_property
    def auth_method_token(self) -> AsyncAuthMethodTokenClient:
        return AsyncAuthMethodTokenClient(environment=self._environment, token=self._token)

    @cached_property
    def auth(self) -> AsyncAuthClient:
        return AsyncAuthClient(environment=self._environment, token=self._token)

    @cached_property
    def constraints(self) -> AsyncConstraintsClient:
        return AsyncConstraintsClient(environment=self._environment, token=self._token)

    @cached_property
    def distributions(self) -> AsyncDistributionsClient:
        return AsyncDistributionsClient(environment=self._environment, token=self._token)

    @cached_property
    def evaluate(self) -> AsyncEvaluateClient:
        return AsyncEvaluateClient(environment=self._environment, token=self._token)

    @cached_property
    def flags(self) -> AsyncFlagsClient:
        return AsyncFlagsClient(environment=self._environment, token=self._token)

    @cached_property
    def namespaces(self) -> AsyncNamespacesClient:
        return AsyncNamespacesClient(environment=self._environment, token=self._token)

    @cached_property
    def rules(self) -> AsyncRulesClient:
        return AsyncRulesClient(environment=self._environment, token=self._token)

    @cached_property
    def segments(self) -> AsyncSegmentsClient:
        return AsyncSegmentsClient(environment=self._environment, token=self._token)

    @cached_property
    def variants(self) -> AsyncVariantsClient:
        return AsyncVariantsClient(environment=self._environment, token=self._token)
