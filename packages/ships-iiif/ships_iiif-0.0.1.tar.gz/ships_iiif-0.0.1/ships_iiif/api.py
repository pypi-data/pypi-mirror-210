# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api.ipynb.

# %% auto 0
__all__ = ['test', 'ApiClient']

# %% ../nbs/api.ipynb 3
from urllib import request  # urllib.requestモジュールをインポート
from bs4 import BeautifulSoup  # BeautifulSoupクラスをインポート
import requests
from tqdm import tqdm
import json
import os

# %% ../nbs/api.ipynb 4
def test():
    print("boo")

# %% ../nbs/api.ipynb 5
class ApiClient:
    def __init__(self):
        pass

    @staticmethod
    def create_manifest(url, path, limit = -1):
        client = ApiClient()
        # print(url, path)
        client.url = url
        client.path = path

        client.get_infos(limit)
        client._create_manifest()
        client.save()
        

    def get_infos(self, limit):
        response = request.urlopen(self.url)
        soup = BeautifulSoup(response, "html.parser")

        root = str(soup).split("var viewUrlRoot = '")[1].split("'")[0]
        self.root = root

        text = str(soup).split("var jsonUrls = [")[1].split("]")[0]
        items = text.replace("\"", "").split(",")

        infos = []

        if limit > 0:
            items = items[0:limit]
        
        for item in tqdm(items):

            page_url = root + item

            info_url = str(soup).split("var infoUrlRoot = '")[1].split("'")[0]
            url = info_url + item

            df = requests.get(url).json()

            # legacyの場合
            if "data" in df:
                levels = df["data"]["levels"]
                level = levels[-1]
                infos.append({
                    "width": level["width"],
                    "height": level["height"],
                    "url": level["url"]
                })
            else:
                infos.append(df)

        # return infos
        self.infos = infos

    def _create_manifest(self):
        canvases = []

        infos = self.infos

        root = self.root[0:-1]

        for i, info in tqdm(enumerate(infos)):

            resource = {
                # '@id': info['@id'] + "/full/full/0/default.jpg",
                "@type": "dctypes:Image",
                "format": "image/jpeg",
                "height": info['height'],
                "width": info['width'],
                # "service": info,
            }

            if "url" in info:
                resource["@id"] = info["url"]
            else:
                resource["@id"] = info["@id"] + "/full/full/0/default.jpg"
                resource["service"] = info

            canvas = {
                '@id': "%s/canvas/p%d" % (root, i + 1),
                '@type': "sc:Canvas",
                'label': "[%d]" % (i+1),
                'width': info['width'],
                'height': info['height'],
                'images': [{
                    '@id': "%s/canvas/annotation/p%s-image" % (root, str(i+1).zfill(4)),
                    '@type': "oa:Annotation",
                    'motivation': "sc:Painting",
                    'resource': resource,
                    'on': "%s/canvas/p%d" % (root, i + 1),
                    }]

            }

            canvases.append(canvas)

        manifest = {
            '@context': 'http://iiif.io/api/presentation/2/context.json',
            '@id': root + "/manifest.json",
            '@type': 'sc:Manifest',
            'label': self.url,
            'sequences': [
                { 
                    '@id': root + '/sequence/normal',
                    '@type': 'sc:Sequence',
                    'canvases': canvases
                }
            ]
        }
        self.manifest = manifest

    def save(self):
        manifest = self.manifest

        path = self.path

        os.makedirs(os.path.dirname(path), exist_ok=True)

        with open(path, 'w') as f:
            json.dump(manifest, f, ensure_ascii=False, indent=4,
                    sort_keys=True, separators=(',', ': '))
