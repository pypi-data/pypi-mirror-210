Metadata-Version: 2.1
Name: typedb-jupyter
Version: 0.3
Summary: Jupyter connector for TypeDB
Author-email: James Whiteside <james.whiteside@vaticle.com>
License: Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
Project-URL: Repository, https://github.com/typedb-osi/typedb-jupyter
Project-URL: Release notes, https://github.com/typedb-osi/typedb-jupyter/blob/master/RELEASE_NOTES.md
Project-URL: TypeDB, https://github.com/vaticle/typedb
Project-URL: Vaticle, https://vaticle.com/
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Framework :: IPython
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Database
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typedb-client (~=2.17)
Requires-Dist: ipython

# TypeDB Jupyter connector

Runs TypeQL statements against a TypeDB database from a Jupyter notebook using the `%typedb` and `%typeql` IPython magic
commands. Includes:
- Full support for TypeDB Core and Cluster.
- Ability to manage multiple concurrent connections.
- Automatic session and transaction handling.
- JSON-style output for all read queries.
- Variable interpolation from the Jupyter namespace.
- Query reading from supplied filepaths.

## Getting started

Install this module with:

```
pip install typedb-jupyter
```

or your environment equivalent. Load the extension in Jupyter with:

```
%load_ext typedb_jupyter
```

## Connecting to TypeDB

Establish a connection with:

```
%typedb -d <database name> [-a <server address>] [-n <connection alias>]
```

for example:

```
In [1]: %typedb -a 111.111.111.111:1729 -d database_1

Out[1]: Opened connection: database_1@111.111.111.111:1729
```


```
In [2]: %typedb -a 222.222.222.222:1729 -d database_2 -n test_connection

Out[2]: Opened connection: test_connection (database_2@222.222.222.222:1729)
```


```
In [3]: %typedb -d database_local

Out[3]: Opened connection: database_local@localhost:1729
```

If no address is provided, the default `localhost:1729` will be used. If no custom alias is provided, the connection
will be assigned a default alias of the format `<database name>@<server address>`. Custom aliases can only include
alphanumeric characters, hyphens, and underscores. If a connection with the server is established but no database with
the name provided exists, a new database will be created with that name by default. Only one connection can be opened to
each database at a time.

For connecting to TypeDB Cluster, use:

```
%typedb -d <database name> -a <server address> -u <username> -p <password> -c <certificate path> [-n <connection alias>]
```

List established connections with:

```
In [4]: %typedb -l

Out[4]: Open connections:
   ...:    database_1@111.111.111.111:1729
   ...:    test_connection (database_2@222.222.222.222:1729)
   ...:  * database_local@localhost:1729
```

An asterisk appears next to the currently selected connection, which is the last one opened by default. To change the
selected connection, use:

```
%typedb -n <connection alias>
```

for example:

```
In [5]: %typedb -n database_1@111.111.111.111:1729

Out[5]: Selected connection: database_1@111.111.111.111:1729
```

```
In [6]: %typedb -n test_connection

Out[6]: Selected connection: test_connection
```

Close a connection with:

```
%typedb -k <connection name>
```

for example:

```
In [7]: %typedb -c database_2@222.222.222.222:1729

Out[7]: Closed connection: database_2@222.222.222.222:1729
```

If the currently selected connection is closed, a new one must be manually selected before queries can be executed.
Using `-x` instead of `-k` will also delete the database.

## Executing a query

Run a query against a database using the selected connection with:

```
%typeql <typeql string>
```

or

```
%%typeql <multiline typeql string>
```

For example:

```
In [8]: %typeql match $p isa person;

Out[8]: [{'p': {'type': 'person'}},
   ...:  {'p': {'type': 'person'}}]
```

```
In [9]: %%typeql
   ...: match
   ...:   $p isa person,
   ...:   has name $n,
   ...:   has age $a;

Out[9]: [{'a': {'type': 'age', 'value_type': 'long', 'value': 30},
   ...:   'p': {'type': 'person'},
   ...:   'n': {'type': 'name', 'value_type': 'string', 'value': 'Kevin'}},
   ...:  {'a': {'type': 'age', 'value_type': 'long', 'value': 50},
   ...:   'p': {'type': 'person'},
   ...:   'n': {'type': 'name', 'value_type': 'string', 'value': 'Gavin'}}]
```

Results of read queries are returned in a JSON-like native Python object. The shape of the object is dependent on the
type of query, as described in the following table:

| Query type              | Output object type |
|-------------------------|--------------------|
| `match`                 | `list<dict>`       |
| `match-group`           | `dict<list<dict>>` |
| `match-aggregate`       | `intǀfloat`        |
| `match-group-aggregate` | `dict<intǀfloat>`  |

Queries automatically interpolate variables from the notebook's Python namespace, specified using the syntax
`{<variable name>}`, for example:

```
In [10]: age = 30

In [11]: %typeql match $p isa person, has name $n, has age {age}; count;

Out[11]: 1
```

Similarly, results can be saved to a namespace variable by providing the variable name with:

```
%typeql -r <variable name> <typeql string>
```

for example:

```
In [12]: %typeql -r name_counts match $p isa person, has name $n, has age $a; group $n; count;

In [13]: name_counts

Out[13]: {'Gavin': 1, 'Kevin': 1}
```

To execute a query in a stored TypeQL file, supply the filepath with:

```
%typeql -f <file path>
```

Rule inference is disabled by default. It can be enabled for a query with:

```
%typeql -i True <typeql string>
```

In order to enable rule inference globally, see the [Configuring options](#configuring-options)
section below.

## Information for advanced users

Queries are syntactically analysed to automatically determine schema and transaction types, but these can be overridden
with:

```
%typeql [-s <session type>] [-t <transaction type>] <typeql string>
```

where `<session type>` is either `schema` or `data`, and `<transaction type>` is either `read` or `write`.

When a connection is instantiated, a data session is opened and persisted for the duration of the connection unless a
schema query is issued, at which point the data session is closed and a schema session is opened. After the schema query
has been executed, the schema session is then closed and a new data session opened. Each call of `%typeql` or `%%typeql`
is executed in a new transaction, which is then immediately closed on completion. All clients, sessions, and
transactions are closed automatically when the notebook's kernel is terminated.

It is important to note that TypeDB sessions and transactions cannot be opened under certain conditions, regardless of
the client:

- Only one schema session can be opened at any time.
- Data write transactions cannot be opened while a schema session is open.
- Only one schema write transaction can be opened at any time.

This means that, when a `define` or `undefine` query is executed in a notebook, this will interfere with queries
performed by other users on the same database.

## Configuring options

Certain options can be configured using the `%config` magic with:

```
%config <config argument>`
```

After being set, these options persist for the remainder of the notebook unless
changed again. The following table describes the available arguments:

| Argument                                      | Usage                                                                         | Default |
|-----------------------------------------------|-------------------------------------------------------------------------------|---------|
| `TypeDBMagic`                                 | List config options and current set values for `%typedb`.                     |         |
| `TypeDBMagic.create_database = <boolean>`     | Create database when opening a connection if it does not already exist.       | `True`  |
| `TypeQLMagic`                                 | List config options and current set values for `%typeql`.                     |         |
| `TypeQLMagic.global_inference = <boolean>`    | Enable rule inference for all queries. Can be overridden per query with `-i`. | `False` |
| `TypeQLMagic.show_info = <boolean>`           | Always show full connection information when executing a query.               | `True`  |
| `TypeQLMagic.strict_transactions = <boolean>` | Require session and transaction types to be specified for every transaction.  | `False` |

## Command glossary 

The following tables list the arguments that can be provided to the `%typedb` and `%typeql` magic commands:

| Magic command | Argument                | Usage                                                                       |
|---------------|-------------------------|-----------------------------------------------------------------------------|
| `%typedb`     | `-a <server address>`   | TypeDB server address for new connection.                                   |
| `%typedb`     | `-d <database name>`    | Database name for new connection.                                           |
| `%typedb`     | `-u <username>`         | Username for new Cloud/Cluster connection.                                  |
| `%typedb`     | `-p <password>`         | Password for new Cloud/Cluster connection.                                  |
| `%typedb`     | `-c <certificate path>` | TLS certificate path for new Cloud/Cluster connection.                      |
| `%typedb`     | `-n <connection alias>` | Custom alias for new connection, or alias of existing connection to select. |
| `%typedb`     | `-l`                    | List currently open connections.                                            |
| `%typedb`     | `-k <connection name>`  | Close a connection by name.                                                 |
| `%typedb`     | `-x <connection name>`  | Close a connection by name and delete its database.                         |
| `%typeql`     | `-r <variable name>`    | Assign query result to the named variable instead of printing.              |
| `%typeql`     | `-f <file path>`        | Read in query from a TypeQL file at the specified path.                     |
| `%typeql`     | `-i <inference option>` | Enable (`True`) or disable (`False`) rule inference for query.              |
| `%typeql`     | `-s <session type>`     | Force a particular session type for query, `schema` or `data`.              |
| `%typeql`     | `-t <transaction type>` | Force a particular transaction type for query, `read` or `write`.           |

## Planned features

- Add option to close all connections.
- Add more output formats.

## Acknowledgements

Many thanks to Catherine Devlin and all the contributors to
[ipython-sql](https://github.com/catherinedevlin/ipython-sql), which served as
the basis for this project.
