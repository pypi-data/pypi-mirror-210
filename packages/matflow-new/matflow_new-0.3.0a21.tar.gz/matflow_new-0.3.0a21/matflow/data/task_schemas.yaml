- objective: test_t1_bash
  inputs:
    - parameter: p1
  outputs:
    - parameter: p2
  actions:
    - environments:
        - scope:
            type: any
          environment: null_env
      commands:
        - command: echo "$((<<parameter:p1>> + 100))"
          stdout: <<parameter:p2>>

- objective: test_t1_ps
  inputs:
    - parameter: p1
  outputs:
    - parameter: p2
  actions:
    - environments:
        - scope:
            type: any
          environment: null_env
      commands:
        - command: Write-Host ((<<parameter:p1>> + 100))
          stdout: <<parameter:p2>>

- objective: generate_microstructure_seeds
  method: from_random
  inputs:
    - parameter: ve_size # TODO: fix capitalisation!
    - parameter: num_grains
    - parameter: phase_label
  outputs:
    - parameter: microstructure_seeds
  actions:
    - script: damask/seeds_from_random.py
      environments:
        - scope:
            type: any
          environment: damask_parse_env

- objective: generate_volume_element
  method: from_random_voronoi
  inputs:
    - parameter: microstructure_seeds
    - parameter: ve_grid_size
    - parameter: homog_label
  outputs:
    - parameter: volume_element
  actions:
    - script: damask/generate_volume_element_random_voronoi.py
      environments:
        - scope:
            type: any
          environment: damask_parse_env

- objective: simulate_VE_loading
  inputs:
    - parameter: volume_element
    - parameter: load_case
    - parameter: homogenization
    - parameter: phase
  actions:
    - environments:
        - scope:
            type: processing
          environment: damask_parse_env
        - scope:
            type: main
          environment: damask_env
      input_file_generators:
        - input_file: damask_geom_file
          from_inputs: [volume_element]
          script: damask/write_geom.py
        - input_file: damask_load_file
          from_inputs: [load_case]
          script: damask/write_load.py
        - input_file: damask_material_file
          from_inputs: [volume_element, homogenization, phase]
          script: damask/write_material.py
      commands:
        - command: <<executable:damask_grid>> --load load.yaml --geom geom.vti

# - objective: prepare_atoms_box
#   inputs:
#     - parameter: number_atoms
#   outputs:
#     - parameter: box
#     - parameter: atoms
#   actions:
#     - environments:
#         main: lammps_parse_env
#       commands:
#         - command: doSomething

# - objective: optimise_atoms
#   method: empirical_potential
#   inputs:
#     - parameter: box
#     - parameter: atoms
#     - parameter: empirical_potential
#   outputs:
#     - parameter: optimised_atoms
#   actions:
#     - environments:
#         main: lammps_env
#         processing: lammps_parse_env
#       input_files:
#         lammps_atoms_file:
#           from_inputs: [box, atoms]
#         lammps_input_script:
#           from_inputs: [empirical_potential]
#       outputs:
#         optimised_atoms:
#           from_files: [lammps_dump_files]
#       commands:
#         - command: <<executable:lammps>>
#           stdin: <<lammps_input_script>>

# - objective: generate_microstructure_seeds
#   inputs:
#     - parameter: num_seeds
#   outputs:
#     - parameter: microstructure_seeds
#   actions:
#     - environments:
#         - scope:
#             type: any
#           environment: damask_parse_env
#       commands:
#         - command: <<executable:python>> <<script>> ??

- version: v2
  objective: prepare_atoms_box
  inputs:
    - parameter: number_atoms
  outputs:
    - parameter: box
    - parameter: atoms
  actions:
    - environments:
        - scope:
            type: main
          environment:
            name: lammps_parse_env
            # lammps_version: 1.2 # a specifier
        - scope:
            type: input_file_generator
          environment: lammps_parse_env
        - scope:
            type: output_file_parser
          environment: lammps_parse_env
      commands:
        - command: doSomething <<parameter:number_atoms>>
      output_file_parsers:
        box:
          from_files: [t1_outfile_1]
        atoms:
          from_files: [t1_outfile_1]

# - version: v1
#   objective: prepare_atoms_box
#   inputs:
#     - parameter: number_atoms
#   outputs:
#     - parameter: box
#     - parameter: atoms
#   actions:
#     - environments:
#         - scope:
#             type: main
#           environment: lammps_parse_env
#         - scope:
#             type: input_file_generator
#           environment: lammps_parse_env
#         - scope:
#             type: output_file_parser
#           environment: lammps_parse_env
#       commands:
#         - command: doSomething <<parameter:number_atoms>>
#       output_file_parsers:
#         box:
#           from_files: [t1_outfile_1]
#         atoms:
#           from_files: [t1_outfile_1]

- objective: optimise_atoms
  method: empirical_potential
  inputs:
    - parameter: box
    - parameter: atoms
    - parameter: empirical_potential
  outputs:
    - parameter: optimised_atoms
  actions:
    - environments:
        - scope:
            type: main
          environment:
            name: lammps_env
            # lammps_version: 1.2
        - scope:
            type: processing
          environment: lammps_parse_env
      input_file_generators:
        lammps_atoms_file:
          from_inputs: [box, atoms]
        lammps_input_script:
          from_inputs: [empirical_potential]
      output_file_parsers:
        optimised_atoms:
          from_files: [lammps_dump_files]
      commands:
        - command: <<executable:lammps>>
          stdin: <<lammps_input_script>>
# - objective: simulate_RVE_loading
#   method: CP_FFT
#   inputs:
#     - parameter: material
#     - parameter: load_case
#     - paramater: RVE
#   outputs:
#     - parameter: RVE_response
#   actions:
#     - environments:
#         - scope:
#             type: any
#           environment:
#             name: damask_env
#       input_file_generators:
#         damask_load_file:
#           from_inputs: [load_case]
#         damask_material_file:
#           from_inputs: [material]
#         damask_geom_file:
#           from_inputs: [material, RVE]
#       output_file_parsers:
#         RVE_response:
#           from_files: [damask_hdf5_file, damask_stdout]
#       commands:
#         - command: DAMASK_grid --load <<input_file:damask_load_file>> --geom <<input_file:damask_geom_file>>
