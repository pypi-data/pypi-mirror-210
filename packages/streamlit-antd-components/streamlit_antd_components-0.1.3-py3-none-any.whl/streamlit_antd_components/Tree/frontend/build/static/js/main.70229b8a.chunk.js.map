{"version":3,"sources":["custom.react.js","Tree.tsx","index.tsx"],"names":["strToNode","obj","Array","isArray","map","obj_","obj_copy","JSON","parse","stringify","deepCopy","icon","hasOwnProperty","children","_jsx","className","concat","AlphaColor","varColor","arguments","length","undefined","alpha","sColor","getComputedStyle","document","querySelector","getPropertyValue","toLowerCase","test","sColorNew","i","slice","sColorChange","push","parseInt","join","treeHeight","open_keys","items","item_height","n_arr","item","n","showItem","includes","item_","showItem_","arr","s","sum","withStreamlitConnection","props","treeData","args","dsk","defaultExpandedKey","dek","keys","getKey","key","getCollapseKeys","parentKeys","k","allParentKeys","getParentKey","tree","parentKey","node","some","getParentKey_","getParent","element","j","getParents","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","height","setHeight","useEffect","Streamlit","setFrameHeight","ConfigProvider","theme","components","Tree","colorPrimary","colorPrimaryHover","colorBgContainer","colorText","colorTextDisabled","controlItemBgHover","controlItemBgActive","onSelect","selectedKeys_","info","setComponentValue","onCheck","checkedKeys_","ck","onExpand","e","selectedKeys","checkedKeys","defaultSelectedKeys","defaultCheckedKeys","defaultExpandedKeys","showLine","multiple","checkable","selectable","checkStrictly","switcherIcon","CaretDownFilled","showIcon","style","whiteSpace","overflowX","overflowY","ReactDOM","render","React","StrictMode","AntdTree","getElementById"],"mappings":"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","file":"static/js/main.70229b8a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\n//deep copy object func\r\nconst deepCopy = (obj) => {\r\n    return JSON.parse(JSON.stringify(obj))\r\n}\r\n//recurve str property to react node\r\nconst strToNode = (obj) => {\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(obj_ => strToNode(obj_))\r\n    } else {\r\n        let obj_copy = deepCopy(obj);\r\n        const icon = obj_copy.icon;\r\n        if (obj_copy.hasOwnProperty('children')) {\r\n            obj_copy.children = obj_copy.children.map(obj_ => strToNode(obj_))\r\n        }\r\n        if (icon) {\r\n            obj_copy.icon = <i className={`bi bi-${icon}`}/>\r\n        }\r\n        return obj_copy\r\n    }\r\n}\r\n\r\nconst AlphaColor = (varColor = '--primary-color', alpha = 0.2) => {\r\n    let pc = getComputedStyle(document.querySelector(\":root\")).getPropertyValue(varColor)\r\n    let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n    let sColor = pc.toLowerCase();\r\n    if (sColor && reg.test(sColor)) {\r\n        if (sColor.length === 4) {\r\n            let sColorNew = \"#\";\r\n            for (let i = 1; i < 4; i += 1) {\r\n                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));\r\n            }\r\n            sColor = sColorNew;\r\n        }\r\n        let sColorChange = [];\r\n        for (let i = 1; i < 7; i += 2) {\r\n            sColorChange.push(parseInt(`0x${sColor.slice(i, i + 2)}`));\r\n        }\r\n        return `rgba(${sColorChange.join(\",\")},${alpha})`;\r\n    } else {\r\n        return sColor;\r\n    }\r\n}\r\n\r\n//all parent keys\r\nconst getParents = (keys, obj) => {\r\n    const getParent = (k, obj) => {\r\n        let allParentKeys = []\r\n        //get one parent key\r\n        const getParentKey = (key, tree) => {\r\n            let parentKey;\r\n            for (let i = 0; i < tree.length; i++) {\r\n                const node = tree[i];\r\n                if (node.children) {\r\n                    if (node.children.some((item) => item.key === key)) {\r\n                        parentKey = node.key;\r\n                    } else if (getParentKey(key, node.children)) {\r\n                        parentKey = getParentKey(key, node.children);\r\n                    }\r\n                }\r\n            }\r\n            return parentKey;\r\n        }\r\n        const getParentKey_ = (k, obj) => {\r\n            let key = getParentKey(k, obj)\r\n            if (key) {\r\n                allParentKeys.push(key)\r\n                getParentKey_(key, obj)\r\n            }\r\n        }\r\n        getParentKey_(k, obj)\r\n        return allParentKeys\r\n    }\r\n    let parentKeys = keys.map(k => getParent(k, obj))\r\n    let parentKey = []\r\n    for (let i = 0; i < parentKeys.length; i += 1) {\r\n        let element = parentKeys[i]\r\n        for (let j = 0; j < element.length; j += 1) {\r\n            parentKey.push(element[j])\r\n        }\r\n    }\r\n    return parentKey\r\n}\r\n\r\nconst getCollapseKeys = (items) => {\r\n    let keys = []\r\n\r\n    const getKey = (obj) => {\r\n        if (Array.isArray(obj)) {\r\n            obj.map(obj_ => getKey(obj_))\r\n        } else {\r\n            if (obj.hasOwnProperty('children')) {\r\n                obj.children.map((obj_) => getKey(obj_))\r\n                if (!obj.hasOwnProperty('type')) {\r\n                    keys.push(obj.key)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getKey(items)\r\n    return keys\r\n}\r\n\r\nconst treeHeight = (open_keys, items, item_height = 30) => {\r\n\r\n    const showItem_ = (open_keys, item) => {\r\n        let n = 1\r\n        const showItem = (open_keys, item) => {\r\n            if (item.hasOwnProperty('key') && open_keys) {\r\n                if (item.hasOwnProperty('children')) {\r\n                    if (open_keys.includes(item['key'])) {\r\n                        n += item['children'].length\r\n                        item['children'].map(item_ => showItem(open_keys, item_))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        showItem(open_keys, item)\r\n        return n\r\n    }\r\n\r\n    function sum(arr) {\r\n        let s = 0;\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            s += arr[i];\r\n        }\r\n        return s;\r\n    }\r\n\r\n    let n_arr = items.map(item => showItem_(open_keys, item))\r\n    let n = sum(n_arr)\r\n    return n * item_height\r\n}\r\n\r\nexport {strToNode, AlphaColor, treeHeight, getParents, getCollapseKeys}","import {Streamlit, ComponentProps, withStreamlitConnection} from \"streamlit-component-lib\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport type {TreeProps} from 'antd/es/tree';\r\nimport {Tree, ConfigProvider} from 'antd';\r\nimport {CaretDownFilled} from '@ant-design/icons';\r\nimport {strToNode, AlphaColor, treeHeight, getCollapseKeys, getParents} from \"./custom.react\";\r\nimport './custom.css'\r\n\r\n\r\nconst AntdTree = (props: ComponentProps) => {\r\n    //get data\r\n    const treeData = strToNode(props.args['treeData']);\r\n    const dsk = props.args['defaultSelectedKey']\r\n    const defaultExpandedKey = props.args['defaultExpandedKey']\r\n    const dea = props.args['defaultExpandAll']\r\n    const dek = dea ? getCollapseKeys(treeData) : defaultExpandedKey ? defaultExpandedKey : dsk && getParents(dsk, treeData)\r\n    const icon = props.args['icon']\r\n\r\n    //state\r\n    const [value, setValue] = useState(dsk)\r\n    const [height, setHeight] = useState(treeHeight(dek, treeData))\r\n\r\n    // component height\r\n    useEffect(() => Streamlit.setFrameHeight(height))\r\n\r\n    //callback\r\n    const onExpand: TreeProps['onExpand'] = (e) => {\r\n        //update component height\r\n        setHeight(treeHeight(e, treeData))\r\n    };\r\n    const onSelect: TreeProps['onSelect'] = (selectedKeys_, info) => {\r\n        setValue(selectedKeys_)\r\n        Streamlit.setComponentValue(selectedKeys_);\r\n    };\r\n    const onCheck: TreeProps['onCheck'] = (checkedKeys_, info) => {\r\n        let ck = (Array.isArray(checkedKeys_)) ? checkedKeys_ : checkedKeys_['checked']\r\n        setValue(ck)\r\n        Streamlit.setComponentValue(ck)\r\n    }\r\n\r\n    // antd menu component\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    //custom tree theme\r\n                    Tree: {\r\n                        colorPrimary: 'var(--primary-color)',\r\n                        colorPrimaryHover: 'var(--primary-color)',\r\n                        colorBgContainer: 'var(--background-color)',\r\n                        colorText: 'var(--text-color)',\r\n                        colorTextDisabled: AlphaColor('--text-color', 0.5),\r\n                        controlItemBgHover: AlphaColor('--text-color', 0.2),\r\n                        controlItemBgActive: AlphaColor(),\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n            <div>\r\n                <Tree\r\n                    onSelect={onSelect}\r\n                    onCheck={onCheck}\r\n                    onExpand={onExpand}\r\n                    selectedKeys={value}\r\n                    checkedKeys={value}\r\n                    defaultSelectedKeys={dsk}\r\n                    defaultCheckedKeys={dsk}\r\n                    defaultExpandedKeys={dek}\r\n                    treeData={treeData}\r\n                    showLine={props.args['showLine']}\r\n                    multiple={props.args['multiple']}\r\n                    checkable={props.args['checkable']}\r\n                    selectable={!props.args['checkable']}\r\n                    height={props.args['height']}\r\n                    checkStrictly={props.args['checkStrictly']}\r\n                    switcherIcon={<CaretDownFilled/>}\r\n                    showIcon={true}\r\n                    icon={icon && <i className={`bi bi-${icon}`}/>}\r\n                    style={{whiteSpace: 'nowrap', overflowX: 'auto', overflowY: 'hidden'}}\r\n                />\r\n            </div>\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default withStreamlitConnection(AntdTree)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AntdTree from \"./Tree\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AntdTree />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}