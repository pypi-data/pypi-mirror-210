{"version":3,"sources":["custom.react.js","Tree.tsx","index.tsx"],"names":["strToNode","obj","Array","isArray","map","obj_","obj_copy","JSON","parse","stringify","deepCopy","icon","hasOwnProperty","children","_jsx","className","concat","AlphaColor","varColor","arguments","length","undefined","alpha","colorComponents","color","test","hex","substring","split","char","join","_hex$match$map","match","c","parseInt","_hex$match$map2","_slicedToArray","_match$map","Number","_match$map2","getColorComponents","getComputedStyle","document","documentElement","getPropertyValue","trim","_colorComponents","r","g","b","treeHeight","open_keys","items","item_height","n_arr","item","n","showItem","includes","item_","showItem_","arr","s","i","sum","withStreamlitConnection","props","treeData","args","dsk","defaultExpandedKey","dek","keys","getKey","push","key","getCollapseKeys","parentKeys","k","allParentKeys","getParentKey","tree","parentKey","node","some","getParentKey_","getParent","element","j","getParents","_useState","useState","_useState2","value","setValue","_useState3","_useState4","height","setHeight","useEffect","Streamlit","setFrameHeight","ConfigProvider","theme","components","Tree","colorPrimary","colorPrimaryHover","colorBgContainer","colorText","colorTextDisabled","controlItemBgHover","controlItemBgActive","onSelect","selectedKeys_","info","setComponentValue","onCheck","checkedKeys_","ck","onExpand","e","selectedKeys","checkedKeys","defaultSelectedKeys","defaultCheckedKeys","defaultExpandedKeys","showLine","multiple","checkable","selectable","checkStrictly","switcherIcon","CaretDownFilled","showIcon","style","whiteSpace","overflowX","overflowY","ReactDOM","render","React","StrictMode","AntdTree","getElementById"],"mappings":"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","file":"static/js/main.5803134d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\n//deep copy object func\r\nconst deepCopy = (obj) => {\r\n    return JSON.parse(JSON.stringify(obj))\r\n}\r\n//recurve str property to react node\r\nconst strToNode = (obj) => {\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(obj_ => strToNode(obj_))\r\n    } else {\r\n        let obj_copy = deepCopy(obj);\r\n        const icon = obj_copy.icon;\r\n        if (obj_copy.hasOwnProperty('children')) {\r\n            obj_copy.children = obj_copy.children.map(obj_ => strToNode(obj_))\r\n        }\r\n        if (icon) {\r\n            obj_copy.icon = <i className={`bi bi-${icon}`}/>\r\n        }\r\n        return obj_copy\r\n    }\r\n}\r\n\r\nconst AlphaColor = (varColor = '--primary-color', alpha = 0.2) => {\r\n    const getColorComponents = (color) => {\r\n        // Handle hexadecimal color format\r\n        const hexMatch = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\r\n        if (hexMatch.test(color)) {\r\n            let hex = color.substring(1);\r\n            if (hex.length === 3) {\r\n                hex = hex.split('').map((char) => char + char).join('');\r\n            }\r\n            const [r, g, b] = hex.match(/.{2}/g).map((c) => parseInt(c, 16));\r\n            return [r, g, b];\r\n        }\r\n\r\n        // Handle RGB and RGBA color formats\r\n        const rgbMatch = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)$/;\r\n        const match = color.match(rgbMatch);\r\n        if (match) {\r\n            const [_, r, g, b] = match.map(Number);\r\n            return [r, g, b];\r\n        }\r\n\r\n        // Handle other color formats or invalid colors\r\n        return null;\r\n    };\r\n\r\n    const color = getComputedStyle(document.documentElement).getPropertyValue(varColor).trim();\r\n    const colorComponents = getColorComponents(color);\r\n\r\n    if (colorComponents) {\r\n        const [r, g, b] = colorComponents;\r\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n    } else {\r\n        // Handle invalid colors\r\n        return 'defaultColor';\r\n    }\r\n};\r\n\r\n\r\n//all parent keys\r\nconst getParents = (keys, obj) => {\r\n    const getParent = (k, obj) => {\r\n        let allParentKeys = []\r\n        //get one parent key\r\n        const getParentKey = (key, tree) => {\r\n            let parentKey;\r\n            for (let i = 0; i < tree.length; i++) {\r\n                const node = tree[i];\r\n                if (node.children) {\r\n                    if (node.children.some((item) => item.key === key)) {\r\n                        parentKey = node.key;\r\n                    } else if (getParentKey(key, node.children)) {\r\n                        parentKey = getParentKey(key, node.children);\r\n                    }\r\n                }\r\n            }\r\n            return parentKey;\r\n        }\r\n        const getParentKey_ = (k, obj) => {\r\n            let key = getParentKey(k, obj)\r\n            if (key) {\r\n                allParentKeys.push(key)\r\n                getParentKey_(key, obj)\r\n            }\r\n        }\r\n        getParentKey_(k, obj)\r\n        return allParentKeys\r\n    }\r\n    let parentKeys = keys.map(k => getParent(k, obj))\r\n    let parentKey = []\r\n    for (let i = 0; i < parentKeys.length; i += 1) {\r\n        let element = parentKeys[i]\r\n        for (let j = 0; j < element.length; j += 1) {\r\n            parentKey.push(element[j])\r\n        }\r\n    }\r\n    return parentKey\r\n}\r\n\r\nconst getCollapseKeys = (items) => {\r\n    let keys = []\r\n\r\n    const getKey = (obj) => {\r\n        if (Array.isArray(obj)) {\r\n            obj.map(obj_ => getKey(obj_))\r\n        } else {\r\n            if (obj.hasOwnProperty('children')) {\r\n                obj.children.map((obj_) => getKey(obj_))\r\n                if (!obj.hasOwnProperty('type')) {\r\n                    keys.push(obj.key)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getKey(items)\r\n    return keys\r\n}\r\n\r\nconst treeHeight = (open_keys, items, item_height = 30) => {\r\n\r\n    const showItem_ = (open_keys, item) => {\r\n        let n = 1\r\n        const showItem = (open_keys, item) => {\r\n            if (item.hasOwnProperty('key') && open_keys) {\r\n                if (item.hasOwnProperty('children')) {\r\n                    if (open_keys.includes(item['key'])) {\r\n                        n += item['children'].length\r\n                        item['children'].map(item_ => showItem(open_keys, item_))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        showItem(open_keys, item)\r\n        return n\r\n    }\r\n\r\n    function sum(arr) {\r\n        let s = 0;\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            s += arr[i];\r\n        }\r\n        return s;\r\n    }\r\n\r\n    let n_arr = items.map(item => showItem_(open_keys, item))\r\n    let n = sum(n_arr)\r\n    return n * item_height\r\n}\r\n\r\nexport {strToNode, AlphaColor, treeHeight, getParents, getCollapseKeys}","import {Streamlit, ComponentProps, withStreamlitConnection} from \"streamlit-component-lib\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport type {TreeProps} from 'antd/es/tree';\r\nimport {Tree, ConfigProvider} from 'antd';\r\nimport {CaretDownFilled} from '@ant-design/icons';\r\nimport {strToNode, AlphaColor, treeHeight, getCollapseKeys, getParents} from \"./custom.react\";\r\nimport './custom.css'\r\n\r\n\r\nconst AntdTree = (props: ComponentProps) => {\r\n    //get data\r\n    const treeData = strToNode(props.args['treeData']);\r\n    const dsk = props.args['defaultSelectedKey']\r\n    const defaultExpandedKey = props.args['defaultExpandedKey']\r\n    const dea = props.args['defaultExpandAll']\r\n    const dek = dea ? getCollapseKeys(treeData) : defaultExpandedKey ? defaultExpandedKey : dsk && getParents(dsk, treeData)\r\n    const icon = props.args['icon']\r\n\r\n    //state\r\n    const [value, setValue] = useState(dsk)\r\n    const [height, setHeight] = useState(treeHeight(dek, treeData))\r\n\r\n    // component height\r\n    useEffect(() => Streamlit.setFrameHeight(height))\r\n\r\n    //callback\r\n    const onExpand: TreeProps['onExpand'] = (e) => {\r\n        //update component height\r\n        setHeight(treeHeight(e, treeData))\r\n    };\r\n    const onSelect: TreeProps['onSelect'] = (selectedKeys_, info) => {\r\n        setValue(selectedKeys_)\r\n        Streamlit.setComponentValue(selectedKeys_);\r\n    };\r\n    const onCheck: TreeProps['onCheck'] = (checkedKeys_, info) => {\r\n        let ck = (Array.isArray(checkedKeys_)) ? checkedKeys_ : checkedKeys_['checked']\r\n        setValue(ck)\r\n        Streamlit.setComponentValue(ck)\r\n    }\r\n\r\n    // antd menu component\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    //custom tree theme\r\n                    Tree: {\r\n                        colorPrimary: 'var(--primary-color)',\r\n                        colorPrimaryHover: 'var(--primary-color)',\r\n                        colorBgContainer: 'var(--background-color)',\r\n                        colorText: 'var(--text-color)',\r\n                        colorTextDisabled: AlphaColor('--text-color', 0.5),\r\n                        controlItemBgHover: AlphaColor('--text-color', 0.2),\r\n                        controlItemBgActive: AlphaColor(),\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n            <div>\r\n                <Tree\r\n                    onSelect={onSelect}\r\n                    onCheck={onCheck}\r\n                    onExpand={onExpand}\r\n                    selectedKeys={value}\r\n                    checkedKeys={value}\r\n                    defaultSelectedKeys={dsk}\r\n                    defaultCheckedKeys={dsk}\r\n                    defaultExpandedKeys={dek}\r\n                    treeData={treeData}\r\n                    showLine={props.args['showLine']}\r\n                    multiple={props.args['multiple']}\r\n                    checkable={props.args['checkable']}\r\n                    selectable={!props.args['checkable']}\r\n                    height={props.args['height']}\r\n                    checkStrictly={props.args['checkStrictly']}\r\n                    switcherIcon={<CaretDownFilled/>}\r\n                    showIcon={true}\r\n                    icon={icon && <i className={`bi bi-${icon}`}/>}\r\n                    style={{whiteSpace: 'nowrap', overflowX: 'auto', overflowY: 'hidden'}}\r\n                />\r\n            </div>\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default withStreamlitConnection(AntdTree)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AntdTree from \"./Tree\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AntdTree />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}