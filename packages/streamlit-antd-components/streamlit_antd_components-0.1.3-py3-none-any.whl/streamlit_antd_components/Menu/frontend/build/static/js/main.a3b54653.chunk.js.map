{"version":3,"sources":["custom.react.js","Menu.tsx","index.tsx"],"names":["strToNode","obj","Array","isArray","map","obj_","obj_copy","JSON","parse","stringify","deepCopy","icon","href","hasOwnProperty","children","_jsx","className","concat","label","target","rel","menuHeight","open_keys","items","n_arr","item","h","showItem","includes","length","item_","showItem_","arr","s","i","sum","AlphaColor","varColor","arguments","undefined","alpha","colorComponents","color","test","hex","substring","split","char","join","_hex$match$map","match","c","parseInt","_hex$match$map2","_slicedToArray","_match$map","Number","_match$map2","getColorComponents","getComputedStyle","document","documentElement","getPropertyValue","trim","_colorComponents","r","g","b","withStreamlitConnection","props","args","dsk","defaultOpenKeys","dok","keys","getKey","push","key","getCollapseKeys","k","allParentKeys","getParentKey","tree","parentKey","node","some","getParentKey_","getParent","width","inlineIndent","_useState","useState","_useState2","selectKey","setSelectKey","_useState3","_useState4","height","setHeight","useEffect","Streamlit","setFrameHeight","ConfigProvider","theme","components","Menu","radiusItem","radiusSubMenuItem","colorItemText","colorGroupTitle","colorItemTextDisabled","colorItemTextHover","colorItemTextSelected","colorItemBgHover","colorItemBgSelected","colorSubItemBg","colorItemBg","colorActiveBarWidth","itemMarginInline","colorSplit","onSelect","e","hrefKeys","getHrefKeys","indexOf","setComponentValue","onOpenChange","selectedKeys","style","borderRightWidth","defaultSelectedKeys","mode","ReactDOM","render","React","StrictMode","AntdMenu","getElementById"],"mappings":"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","file":"static/js/main.a3b54653.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\n//deep copy object func\r\nconst deepCopy = (obj) => {\r\n    return JSON.parse(JSON.stringify(obj))\r\n}\r\n//recurve str property to react node\r\nconst strToNode = (obj) => {\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(obj_ => strToNode(obj_))\r\n    } else {\r\n        let obj_copy = deepCopy(obj);\r\n        const icon = obj_copy.icon;\r\n        const href = obj_copy.href;\r\n        if (obj_copy.hasOwnProperty('children')) {\r\n            obj_copy.children = obj_copy.children.map(obj_ => strToNode(obj_))\r\n        }\r\n        if (icon) {\r\n            obj_copy.icon = <span><i className={`bi bi-${icon}`}/></span>\r\n        }\r\n        if (href) {\r\n            obj_copy.label = <a href={href} target='_blank' rel='noreferrer'>{obj_copy.label}</a>\r\n        }\r\n        return obj_copy\r\n    }\r\n}\r\n\r\n//all parent keys\r\nconst getParent = (k, obj) => {\r\n    let allParentKeys = []\r\n    //get one parent key\r\n    const getParentKey = (key, tree) => {\r\n        let parentKey;\r\n        for (let i = 0; i < tree.length; i++) {\r\n            const node = tree[i];\r\n            if (node.children) {\r\n                if (node.children.some((item) => item.key === key)) {\r\n                    parentKey = node.key;\r\n                } else if (getParentKey(key, node.children)) {\r\n                    parentKey = getParentKey(key, node.children);\r\n                }\r\n            }\r\n        }\r\n        return parentKey;\r\n    }\r\n    const getParentKey_ = (k, obj) => {\r\n        let key = getParentKey(k, obj)\r\n        if (key) {\r\n            allParentKeys.push(key)\r\n            getParentKey_(key, obj)\r\n        }\r\n    }\r\n    getParentKey_(k, obj)\r\n    return allParentKeys\r\n}\r\n\r\nconst menuHeight = (open_keys, items) => {\r\n\r\n    const showItem_ = (open_keys, item) => {\r\n        let h = 48\r\n        const showItem = (open_keys, item) => {\r\n            if (item.hasOwnProperty('key') && open_keys) {\r\n                if (item.hasOwnProperty('children')) {\r\n                    if (open_keys.includes(item['key']) || item.hasOwnProperty('type')) {\r\n                        h += item['children'].length * 45\r\n                        item['children'].map(item_ => showItem(open_keys, item_))\r\n                    }\r\n                }\r\n            }\r\n            if (item.hasOwnProperty('dashed')) {\r\n                h = 2\r\n            }\r\n        }\r\n        showItem(open_keys, item)\r\n        return h\r\n    }\r\n\r\n    function sum(arr) {\r\n        let s = 0;\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            s += arr[i];\r\n        }\r\n        return s;\r\n    }\r\n\r\n    let n_arr = items.map(item => showItem_(open_keys, item))\r\n    return sum(n_arr)\r\n}\r\n\r\n\r\nconst getHrefKeys = (items) => {\r\n    let keys = []\r\n\r\n    const getKey = (obj) => {\r\n        if (Array.isArray(obj)) {\r\n            obj.map(obj_ => getKey(obj_))\r\n        } else {\r\n            if (obj.hasOwnProperty('children')) {\r\n                obj.children.map((obj_) => getKey(obj_))\r\n            }\r\n            if (obj.href != null) {\r\n                keys.push(obj.key)\r\n            }\r\n        }\r\n    }\r\n    getKey(items)\r\n    return keys\r\n}\r\n\r\nconst getCollapseKeys = (items) => {\r\n    let keys = []\r\n\r\n    const getKey = (obj) => {\r\n        if (Array.isArray(obj)) {\r\n            obj.map(obj_ => getKey(obj_))\r\n        } else {\r\n            if (obj.hasOwnProperty('children')) {\r\n                obj.children.map((obj_) => getKey(obj_))\r\n                if (!obj.hasOwnProperty('type')){\r\n                    keys.push(obj.key)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getKey(items)\r\n    return keys\r\n}\r\n\r\nconst AlphaColor = (varColor = '--primary-color', alpha = 0.1) => {\r\n    const getColorComponents = (color) => {\r\n        // Handle hexadecimal color format\r\n        const hexMatch = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\r\n        if (hexMatch.test(color)) {\r\n            let hex = color.substring(1);\r\n            if (hex.length === 3) {\r\n                hex = hex.split('').map((char) => char + char).join('');\r\n            }\r\n            const [r, g, b] = hex.match(/.{2}/g).map((c) => parseInt(c, 16));\r\n            return [r, g, b];\r\n        }\r\n\r\n        // Handle RGB and RGBA color formats\r\n        const rgbMatch = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)$/;\r\n        const match = color.match(rgbMatch);\r\n        if (match) {\r\n            const [_, r, g, b] = match.map(Number);\r\n            return [r, g, b];\r\n        }\r\n\r\n        // Handle other color formats or invalid colors\r\n        return null;\r\n    };\r\n\r\n    const color = getComputedStyle(document.documentElement).getPropertyValue(varColor).trim();\r\n    const colorComponents = getColorComponents(color);\r\n\r\n    if (colorComponents) {\r\n        const [r, g, b] = colorComponents;\r\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n    } else {\r\n        // Handle invalid colors\r\n        return 'defaultColor';\r\n    }\r\n};\r\n\r\n\r\nexport {strToNode, AlphaColor, getParent, getHrefKeys, getCollapseKeys, menuHeight}","import {Streamlit, ComponentProps, withStreamlitConnection} from \"streamlit-component-lib\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport type {MenuProps} from 'antd';\r\nimport {Menu, ConfigProvider} from 'antd';\r\nimport {strToNode, AlphaColor, getParent, getHrefKeys,getCollapseKeys, menuHeight} from \"./custom.react\";\r\n\r\nconst AntdMenu = (props: ComponentProps) => {\r\n    //get data\r\n    const items = props.args['items']\r\n    const dsk = props.args['defaultSelectedKeys']\r\n    const defaultOpenKeys=props.args['defaultOpenKeys']\r\n    const expandAll=props.args['expandAll']\r\n    const dok = expandAll?getCollapseKeys(items):defaultOpenKeys ? defaultOpenKeys : dsk && getParent(dsk[0], items)\r\n    const width = props.args['width']\r\n    const inlineIndent = props.args['inlineIndent']\r\n\r\n    //state\r\n    const [selectKey, setSelectKey] = useState(dsk)\r\n    const [height, setHeight] = useState(menuHeight(dok, items))\r\n\r\n    //component height\r\n    useEffect(() => Streamlit.setFrameHeight(height))\r\n\r\n    //callback\r\n    const onSelect: MenuProps['onSelect'] = (e) => {\r\n        //only not href item will fire\r\n        let hrefKeys = getHrefKeys(items)\r\n        if (hrefKeys.indexOf(e.key) === -1) {\r\n            setSelectKey(e.key);\r\n            Streamlit.setComponentValue(e.key);\r\n        }\r\n    }\r\n    const onOpenChange: MenuProps['onOpenChange'] = (e) => {\r\n        //update component height\r\n        setHeight(menuHeight(e, items))\r\n    }\r\n\r\n    // antd menu component\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    //custom menu theme\r\n                    Menu: {\r\n                        radiusItem: 0,\r\n                        radiusSubMenuItem: 0,\r\n                        colorItemText: 'var(--text-color)',\r\n                        colorGroupTitle: AlphaColor('--text-color', 0.8),\r\n                        colorItemTextDisabled: AlphaColor('--text-color', 0.5),\r\n                        colorItemTextHover: 'var(--primary-color)',\r\n                        colorItemTextSelected: 'var(--primary-color)',\r\n                        colorItemBgHover: AlphaColor(),\r\n                        colorItemBgSelected: AlphaColor(),\r\n                        colorSubItemBg: 'var(--background-color)',\r\n                        colorItemBg: 'var(--background-color)',\r\n                        colorActiveBarWidth: 4,\r\n                        itemMarginInline: 0,\r\n                        colorSplit: AlphaColor('--text-color', 0.3),\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n            <Menu\r\n                onSelect={onSelect}\r\n                onOpenChange={onOpenChange}\r\n                selectedKeys={selectKey}\r\n                style={{borderRightWidth: 0, width: width}}\r\n                defaultSelectedKeys={[dsk]}\r\n                defaultOpenKeys={dok}\r\n                mode={'inline'}\r\n                items={strToNode(items)}\r\n                inlineIndent={inlineIndent}\r\n            />\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default withStreamlitConnection(AntdMenu)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AntdMenu from \"./Menu\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AntdMenu />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}