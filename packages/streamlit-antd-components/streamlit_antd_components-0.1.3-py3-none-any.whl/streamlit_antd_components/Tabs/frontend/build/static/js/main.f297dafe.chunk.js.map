{"version":3,"sources":["custom.react.js","Tabs.tsx","index.tsx"],"names":["strToNode","obj","map","item","idx","item_","JSON","parse","stringify","deepCopy","_jsxs","children","_jsx","style","marginRight","className","concat","AlphaColor","varColor","arguments","length","undefined","alpha","colorComponents","color","test","hex","substring","split","char","join","_hex$match$map","match","c","parseInt","_hex$match$map2","_slicedToArray","_match$map","Number","_match$map2","getColorComponents","getComputedStyle","document","documentElement","getPropertyValue","trim","_colorComponents","r","g","b","loadStyles","url","id","getElementById","link","createElement","rel","type","href","root","appendChild","withStreamlitConnection","props","items","args","index","align","tabPosition","shape","centered","height","grow","tabsHeight","includes","useEffect","Streamlit","setFrameHeight","ConfigProvider","theme","components","Tabs","colorText","colorTextDisabled","colorPrimary","colorBgContainerDisabled","colorBgContainer","colorPrimaryHover","colorPrimaryActive","fontSize","fontFamily","defaultActiveKey","onTabClick","key","setComponentValue","ReactDOM","render","React","StrictMode","AntdTabs"],"mappings":"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","file":"static/js/main.f297dafe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\n//deep copy object func\r\nconst deepCopy = (obj) => {\r\n    return JSON.parse(JSON.stringify(obj))\r\n}\r\n//recurve str property to react node\r\nconst strToNode = (obj) => {\r\n    return obj.map((item, idx) => {\r\n        let item_ = deepCopy(item)\r\n        item_['key'] = idx\r\n        if (item_['icon'] != null) {\r\n            item_['label'] = <span>\r\n                <span style={{marginRight: 8}}><i className={`bi bi-${item['icon']}`}/></span>\r\n                {item_['label']}\r\n            </span>\r\n        }\r\n        return item_\r\n    })\r\n}\r\n\r\nconst AlphaColor = (varColor = '--primary-color', alpha = 0.2) => {\r\n    const getColorComponents = (color) => {\r\n        // Handle hexadecimal color format\r\n        const hexMatch = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\r\n        if (hexMatch.test(color)) {\r\n            let hex = color.substring(1);\r\n            if (hex.length === 3) {\r\n                hex = hex.split('').map((char) => char + char).join('');\r\n            }\r\n            const [r, g, b] = hex.match(/.{2}/g).map((c) => parseInt(c, 16));\r\n            return [r, g, b];\r\n        }\r\n\r\n        // Handle RGB and RGBA color formats\r\n        const rgbMatch = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*[\\d.]+)?\\)$/;\r\n        const match = color.match(rgbMatch);\r\n        if (match) {\r\n            const [_, r, g, b] = match.map(Number);\r\n            return [r, g, b];\r\n        }\r\n\r\n        // Handle other color formats or invalid colors\r\n        return null;\r\n    };\r\n\r\n    const color = getComputedStyle(document.documentElement).getPropertyValue(varColor).trim();\r\n    const colorComponents = getColorComponents(color);\r\n\r\n    if (colorComponents) {\r\n        const [r, g, b] = colorComponents;\r\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n    } else {\r\n        // Handle invalid colors\r\n        return 'defaultColor';\r\n    }\r\n};\r\nconst loadStyles = (url, id) => {\r\n    let ele = document.getElementById(id);\r\n    if (!ele) {\r\n        let link = document.createElement(\"link\");\r\n        link.rel = \"stylesheet\";\r\n        link.type = \"text/css\";\r\n        link.href = url;\r\n        link.id = id;\r\n        let root = document.getElementById(\"root\");\r\n        root && root.appendChild(link)\r\n    }\r\n}\r\n\r\nexport {strToNode, AlphaColor,loadStyles}","import {Streamlit, ComponentProps, withStreamlitConnection} from \"streamlit-component-lib\";\r\nimport React, {useEffect} from \"react\";\r\nimport {Tabs, ConfigProvider} from 'antd';\r\nimport {strToNode, AlphaColor, loadStyles} from \"./custom.react\";\r\nimport './custom.css'\r\n\r\nconst AntdTabs = (props: ComponentProps) => {\r\n    //get data\r\n    const items = props.args['items']\r\n    const index = props.args['index']\r\n    const align = props.args['align']\r\n    const tabPosition = props.args['tabPosition']\r\n    const shape = props.args['shape']\r\n    const centered = props.args['centered']\r\n    const height = props.args['height']\r\n    const grow = props.args['grow']\r\n\r\n    // load style\r\n    align === 'start' && loadStyles(\"alignStart.css\", \"as\");\r\n    align === 'center' && loadStyles(\"alignCenter.css\", \"ac\");\r\n    align === 'end' && loadStyles(\"alignEnd.css\", \"ae\");\r\n    grow && loadStyles(\"grow.css\", \"grow\");\r\n\r\n    //component height\r\n    let tabsHeight = ['left', 'right'].includes(tabPosition) && height != null ? height : undefined\r\n\r\n    // set component height\r\n    useEffect(() => Streamlit.setFrameHeight(tabsHeight))\r\n\r\n    //callback\r\n    const onClick = (key: string) => {\r\n        Streamlit.setComponentValue(key)\r\n    }\r\n\r\n    // antd menu component\r\n    return (\r\n        <ConfigProvider\r\n            theme={{\r\n                components: {\r\n                    //custom tree theme\r\n                    Tabs: {\r\n                        colorText: 'var(--text-color)',\r\n                        colorTextDisabled: AlphaColor('--text-color', 0.5),\r\n                        colorPrimary: 'var(--primary-color)',\r\n                        colorBgContainerDisabled: 'transform',\r\n                        colorBgContainer: 'var(--background-color)',\r\n                        colorPrimaryHover: 'var(--primary-color)',\r\n                        colorPrimaryActive: 'var(--primary-color)',\r\n                        fontSize: 14,\r\n                        fontFamily: 'var(--font)',\r\n                    },\r\n                },\r\n            }}\r\n        >\r\n            <Tabs\r\n                items={strToNode(items)}\r\n                defaultActiveKey={index}\r\n                onTabClick={onClick}\r\n                type={shape === 'default' ? 'line' : shape}\r\n                tabPosition={tabPosition}\r\n                centered={centered}\r\n                style={{height: tabsHeight}}\r\n            />\r\n        </ConfigProvider>\r\n    );\r\n};\r\n\r\nexport default withStreamlitConnection(AntdTabs)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AntdTabs from \"./Tabs\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AntdTabs />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}