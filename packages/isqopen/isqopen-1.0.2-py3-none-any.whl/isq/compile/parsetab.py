
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ASSIGN CNOT CX CY CZ DEFGATE ELSE EQ FOR GE H ID IF IN KET_ZERO LE M MAIN NE NUMBER PROCEDURE QBIT RX RY RZ S SD T TD X X2M X2P Y Y2M Y2P Zprogram : varDef procedureBody\n               | gateDef varDef procedureBodygateDef : gateDefclause\n               | gateDefclause gateDefgDefID : ID gateDefclause : DEFGATE gDefID '=' '[' matrixContents ']' ';'  matrixContents : CNUMBER\n                       | CNUMBER ',' matrixContents\n                       | CNUMBER ';' matrixContents CNUMBER : NumberExpr\n                | '-' NumberExpr NumberExpr : NUMBER\n                   | NUMBER '+' NUMBER\n                   | NUMBER '-' NUMBER varDef : defclause\n              | varDef defclause defclause : QBIT seen_Qbit id_list ';' seen_Qbit : id_list : ID\n               | id_list ',' ID\n               | ID '[' NUMBER ']'\n               | id_list ',' ID '[' NUMBER ']'  procedureBody : programBlock\n                        | PROCEDURE MAIN '(' ')' '{' programBlock '}'  programStatement : qbitUnitaryStatement\n                     | measureStatement\n                     | foreachStatement\n                     | ifStatement  programBlock : programStatement\n                     | programBlock programStatement  rangeExpr : optionalIntExpr ':' optionalIntExpr\n                  | optionalIntExpr ':' optionalIntExpr ':' optionalIntExpr  optionalIntExpr : intExpr\n                       | emptyStatementsectionExpr : intExpr\n                | sectionExpr ',' intExpr qubitExpr : ID \n                 | ID '[' sectionExpr ']'\n                 | ID '[' rangeExpr ']' qubitListExpr : qubitExpr\n                     | qubitListExpr ',' qubitExpr  intExprAtom : ID \n                    | NUMBER \n                    | ID '[' intExpr ']'\n                    | '(' intExpr ')'   intExprTier1 : intExprAtom \n                     | intExprTier1 '*' intExprAtom \n                     | intExprTier1 '/' intExprAtom\n                     | intExprTier1 '%' intExprAtom  intExprTier2 : intExprTier1 \n                     | intExprTier2 '+' intExprTier1 \n                     | intExprTier2 '-' intExprTier1 \n                     |  intExpr : intExprTier2\n                | '-' intExprTier2 foreachStatement : FOR ID IN rangeExpr '{' programBlock '}'  asso : EQ\n            | GE\n            | LE\n            | NE\n            | '<'\n            | '>'\n     ifStatement : IF '(' intExpr asso intExpr ')' '{' programBlock '}' \n                | IF '(' intExpr asso intExpr ')' '{' programBlock '}' ELSE '{' programBlock '}'  qbitUnitaryStatement : uGate '<' qubitListExpr '>' ';' \n        | uGate '(' qubitListExpr  ')' ';' \n        | rGate '<' intExpr ',' qubitListExpr '>' ';'\n        | rGate '(' intExpr ',' qubitListExpr ')' ';'  rGate : RX\n              | RY\n              | RZ  uGate : H\n              | X\n              | Y\n              | Z\n              | S\n              | T\n              | SD\n              | TD\n              | X2P\n              | X2M\n              | Y2P\n              | Y2M\n              | CZ\n              | CNOT\n              | CX\n              | CY\n              | ID  measureStatement : M '<' qubitExpr '>' ';'\n        | M '(' qubitExpr ')' ';' emptyStatement : "
    
_lr_action_items = {'QBIT':([0,2,3,4,5,9,42,43,79,158,],[6,6,6,-15,-3,-16,6,-4,-17,-6,]),'DEFGATE':([0,5,158,],[7,7,-6,]),'$end':([1,8,10,12,13,14,15,16,47,57,119,124,134,135,163,165,166,167,173,177,],[0,-1,-23,-29,-25,-26,-27,-28,-30,-2,-65,-66,-89,-90,-24,-67,-68,-56,-63,-64,]),'PROCEDURE':([2,4,9,42,79,],[11,-15,-16,11,-17,]),'M':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[19,-15,-16,19,-29,-25,-26,-27,-28,19,-30,-17,19,-65,-66,-89,-90,19,19,19,-67,-68,-56,19,19,-63,19,19,-64,]),'FOR':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[20,-15,-16,20,-29,-25,-26,-27,-28,20,-30,-17,20,-65,-66,-89,-90,20,20,20,-67,-68,-56,20,20,-63,20,20,-64,]),'IF':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[22,-15,-16,22,-29,-25,-26,-27,-28,22,-30,-17,22,-65,-66,-89,-90,22,22,22,-67,-68,-56,22,22,-63,22,22,-64,]),'H':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[23,-15,-16,23,-29,-25,-26,-27,-28,23,-30,-17,23,-65,-66,-89,-90,23,23,23,-67,-68,-56,23,23,-63,23,23,-64,]),'X':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[24,-15,-16,24,-29,-25,-26,-27,-28,24,-30,-17,24,-65,-66,-89,-90,24,24,24,-67,-68,-56,24,24,-63,24,24,-64,]),'Y':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[25,-15,-16,25,-29,-25,-26,-27,-28,25,-30,-17,25,-65,-66,-89,-90,25,25,25,-67,-68,-56,25,25,-63,25,25,-64,]),'Z':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[26,-15,-16,26,-29,-25,-26,-27,-28,26,-30,-17,26,-65,-66,-89,-90,26,26,26,-67,-68,-56,26,26,-63,26,26,-64,]),'S':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[27,-15,-16,27,-29,-25,-26,-27,-28,27,-30,-17,27,-65,-66,-89,-90,27,27,27,-67,-68,-56,27,27,-63,27,27,-64,]),'T':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[28,-15,-16,28,-29,-25,-26,-27,-28,28,-30,-17,28,-65,-66,-89,-90,28,28,28,-67,-68,-56,28,28,-63,28,28,-64,]),'SD':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[29,-15,-16,29,-29,-25,-26,-27,-28,29,-30,-17,29,-65,-66,-89,-90,29,29,29,-67,-68,-56,29,29,-63,29,29,-64,]),'TD':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[30,-15,-16,30,-29,-25,-26,-27,-28,30,-30,-17,30,-65,-66,-89,-90,30,30,30,-67,-68,-56,30,30,-63,30,30,-64,]),'X2P':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[31,-15,-16,31,-29,-25,-26,-27,-28,31,-30,-17,31,-65,-66,-89,-90,31,31,31,-67,-68,-56,31,31,-63,31,31,-64,]),'X2M':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[32,-15,-16,32,-29,-25,-26,-27,-28,32,-30,-17,32,-65,-66,-89,-90,32,32,32,-67,-68,-56,32,32,-63,32,32,-64,]),'Y2P':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[33,-15,-16,33,-29,-25,-26,-27,-28,33,-30,-17,33,-65,-66,-89,-90,33,33,33,-67,-68,-56,33,33,-63,33,33,-64,]),'Y2M':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[34,-15,-16,34,-29,-25,-26,-27,-28,34,-30,-17,34,-65,-66,-89,-90,34,34,34,-67,-68,-56,34,34,-63,34,34,-64,]),'CZ':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[35,-15,-16,35,-29,-25,-26,-27,-28,35,-30,-17,35,-65,-66,-89,-90,35,35,35,-67,-68,-56,35,35,-63,35,35,-64,]),'CNOT':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[36,-15,-16,36,-29,-25,-26,-27,-28,36,-30,-17,36,-65,-66,-89,-90,36,36,36,-67,-68,-56,36,36,-63,36,36,-64,]),'CX':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[37,-15,-16,37,-29,-25,-26,-27,-28,37,-30,-17,37,-65,-66,-89,-90,37,37,37,-67,-68,-56,37,37,-63,37,37,-64,]),'CY':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[38,-15,-16,38,-29,-25,-26,-27,-28,38,-30,-17,38,-65,-66,-89,-90,38,38,38,-67,-68,-56,38,38,-63,38,38,-64,]),'ID':([2,4,6,7,9,10,12,13,14,15,16,20,42,44,47,49,50,51,52,53,54,56,68,73,77,79,80,85,86,88,89,90,92,93,94,95,97,104,105,106,107,108,109,110,118,119,124,134,135,136,137,147,149,154,165,166,167,168,169,172,173,175,176,177,],[21,-15,-18,46,-16,21,-29,-25,-26,-27,-28,55,21,59,-30,64,64,71,71,64,64,71,71,71,71,-17,111,64,71,64,71,71,71,71,71,71,64,71,-57,-58,-59,-60,-61,-62,21,-65,-66,-89,-90,21,71,21,71,21,-67,-68,-56,71,21,21,-63,21,21,-64,]),'RX':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[39,-15,-16,39,-29,-25,-26,-27,-28,39,-30,-17,39,-65,-66,-89,-90,39,39,39,-67,-68,-56,39,39,-63,39,39,-64,]),'RY':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[40,-15,-16,40,-29,-25,-26,-27,-28,40,-30,-17,40,-65,-66,-89,-90,40,40,40,-67,-68,-56,40,40,-63,40,40,-64,]),'RZ':([2,4,9,10,12,13,14,15,16,42,47,79,118,119,124,134,135,136,147,154,165,166,167,169,172,173,175,176,177,],[41,-15,-16,41,-29,-25,-26,-27,-28,41,-30,-17,41,-65,-66,-89,-90,41,41,41,-67,-68,-56,41,41,-63,41,41,-64,]),'MAIN':([11,],[48,]),'}':([12,13,14,15,16,47,119,124,134,135,147,154,165,166,167,172,173,176,177,],[-29,-25,-26,-27,-28,-30,-65,-66,-89,-90,163,167,-67,-68,-56,173,-63,177,-64,]),'<':([17,18,19,21,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,56,67,68,69,70,71,72,78,91,126,127,128,129,130,132,152,],[49,51,53,-88,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-69,-70,-71,-53,-54,-53,-50,-46,-42,-43,109,-55,-51,-52,-47,-48,-49,-45,-44,]),'(':([17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,48,51,52,56,68,73,77,86,89,90,92,93,94,95,104,105,106,107,108,109,110,137,149,168,],[50,52,54,-88,56,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-69,-70,-71,61,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-57,-58,-59,-60,-61,-62,73,73,73,]),'=':([45,46,],[60,-5,]),'-':([51,52,56,67,68,69,70,71,72,73,77,82,86,91,95,104,105,106,107,108,109,110,117,126,127,128,129,130,132,137,142,143,149,152,168,],[68,68,68,90,-53,-50,-46,-42,-43,68,68,116,68,90,68,68,-57,-58,-59,-60,-61,-62,146,-51,-52,-47,-48,-49,-45,68,116,116,68,-44,68,]),'+':([51,52,56,67,68,69,70,71,72,73,77,86,91,95,104,105,106,107,108,109,110,117,126,127,128,129,130,132,137,149,152,168,],[-53,-53,-53,89,-53,-50,-46,-42,-43,-53,-53,-53,89,-53,-53,-57,-58,-59,-60,-61,-62,145,-51,-52,-47,-48,-49,-45,-53,-53,-44,-53,]),',':([51,52,58,59,62,63,64,65,66,67,68,69,70,71,72,74,86,91,111,114,115,117,120,121,123,125,126,127,128,129,130,132,133,140,144,148,149,150,152,161,162,164,170,],[-53,-53,80,-19,85,-40,-37,85,88,-54,-53,-50,-46,-42,-43,97,-53,-55,-20,142,-10,-12,-41,149,-35,85,-51,-52,-47,-48,-49,-45,85,-21,-11,-38,-53,-39,-44,-13,-14,-36,-22,]),'NUMBER':([51,52,56,68,73,77,81,82,86,89,90,92,93,94,95,104,105,106,107,108,109,110,116,137,139,142,143,145,146,149,168,],[72,72,72,72,72,72,112,117,72,72,72,72,72,72,72,72,-57,-58,-59,-60,-61,-62,117,72,157,117,117,161,162,72,72,]),'IN':([55,],[77,]),'EQ':([56,67,68,69,70,71,72,78,91,126,127,128,129,130,132,152,],[-53,-54,-53,-50,-46,-42,-43,105,-55,-51,-52,-47,-48,-49,-45,-44,]),'GE':([56,67,68,69,70,71,72,78,91,126,127,128,129,130,132,152,],[-53,-54,-53,-50,-46,-42,-43,106,-55,-51,-52,-47,-48,-49,-45,-44,]),'LE':([56,67,68,69,70,71,72,78,91,126,127,128,129,130,132,152,],[-53,-54,-53,-50,-46,-42,-43,107,-55,-51,-52,-47,-48,-49,-45,-44,]),'NE':([56,67,68,69,70,71,72,78,91,126,127,128,129,130,132,152,],[-53,-54,-53,-50,-46,-42,-43,108,-55,-51,-52,-47,-48,-49,-45,-44,]),'>':([56,62,63,64,67,68,69,70,71,72,75,78,91,120,125,126,127,128,129,130,132,148,150,152,],[-53,84,-40,-37,-54,-53,-50,-46,-42,-43,98,110,-55,-41,151,-51,-52,-47,-48,-49,-45,-38,-39,-44,]),';':([58,59,84,87,98,99,111,114,115,117,140,141,144,151,153,161,162,170,],[79,-19,119,124,134,135,-20,143,-10,-12,-21,158,-11,165,166,-13,-14,-22,]),'[':([59,60,64,71,111,],[81,82,86,95,139,]),')':([61,63,64,65,67,68,69,70,71,72,73,76,91,96,104,105,106,107,108,109,110,120,126,127,128,129,130,132,133,138,148,150,152,],[83,-40,-37,87,-54,-53,-50,-46,-42,-43,-53,99,-55,132,-53,-57,-58,-59,-60,-61,-62,-41,-51,-52,-47,-48,-49,-45,153,156,-38,-39,-44,]),':':([67,68,69,70,71,72,77,86,91,101,102,103,123,126,127,128,129,130,132,137,152,155,],[-54,-53,-50,-46,-42,-43,-53,-53,-55,137,-33,-34,-33,-51,-52,-47,-48,-49,-45,-53,-44,168,]),']':([67,68,69,70,71,72,86,91,95,102,103,112,113,114,115,117,121,122,123,126,127,128,129,130,131,132,137,144,149,152,155,157,159,160,161,162,164,168,171,],[-54,-53,-50,-46,-42,-43,-53,-55,-53,-33,-34,140,141,-7,-10,-12,148,150,-35,-51,-52,-47,-48,-49,152,-45,-53,-11,-53,-44,-31,170,-8,-9,-13,-14,-36,-53,-32,]),'{':([67,68,69,70,71,72,83,91,100,102,103,126,127,128,129,130,132,137,152,155,156,168,171,174,],[-54,-53,-50,-46,-42,-43,118,-55,136,-33,-34,-51,-52,-47,-48,-49,-45,-53,-44,-31,169,-53,-32,175,]),'*':([69,70,71,72,126,127,128,129,130,132,152,],[92,-46,-42,-43,92,92,-47,-48,-49,-45,-44,]),'/':([69,70,71,72,126,127,128,129,130,132,152,],[93,-46,-42,-43,93,93,-47,-48,-49,-45,-44,]),'%':([69,70,71,72,126,127,128,129,130,132,152,],[94,-46,-42,-43,94,94,-47,-48,-49,-45,-44,]),'ELSE':([173,],[174,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'varDef':([0,3,],[2,42,]),'gateDef':([0,5,],[3,43,]),'defclause':([0,2,3,42,],[4,9,4,9,]),'gateDefclause':([0,5,],[5,5,]),'procedureBody':([2,42,],[8,57,]),'programBlock':([2,42,118,136,169,175,],[10,10,147,154,172,176,]),'programStatement':([2,10,42,118,136,147,154,169,172,175,176,],[12,47,12,12,12,47,47,12,47,12,47,]),'qbitUnitaryStatement':([2,10,42,118,136,147,154,169,172,175,176,],[13,13,13,13,13,13,13,13,13,13,13,]),'measureStatement':([2,10,42,118,136,147,154,169,172,175,176,],[14,14,14,14,14,14,14,14,14,14,14,]),'foreachStatement':([2,10,42,118,136,147,154,169,172,175,176,],[15,15,15,15,15,15,15,15,15,15,15,]),'ifStatement':([2,10,42,118,136,147,154,169,172,175,176,],[16,16,16,16,16,16,16,16,16,16,16,]),'uGate':([2,10,42,118,136,147,154,169,172,175,176,],[17,17,17,17,17,17,17,17,17,17,17,]),'rGate':([2,10,42,118,136,147,154,169,172,175,176,],[18,18,18,18,18,18,18,18,18,18,18,]),'seen_Qbit':([6,],[44,]),'gDefID':([7,],[45,]),'id_list':([44,],[58,]),'qubitListExpr':([49,50,88,97,],[62,65,125,133,]),'qubitExpr':([49,50,53,54,85,88,97,],[63,63,75,76,120,63,63,]),'intExpr':([51,52,56,73,77,86,95,104,137,149,168,],[66,74,78,96,102,123,131,138,102,164,102,]),'intExprTier2':([51,52,56,68,73,77,86,95,104,137,149,168,],[67,67,67,91,67,67,67,67,67,67,67,67,]),'intExprTier1':([51,52,56,68,73,77,86,89,90,95,104,137,149,168,],[69,69,69,69,69,69,69,126,127,69,69,69,69,69,]),'intExprAtom':([51,52,56,68,73,77,86,89,90,92,93,94,95,104,137,149,168,],[70,70,70,70,70,70,70,70,70,128,129,130,70,70,70,70,70,]),'rangeExpr':([77,86,],[100,122,]),'optionalIntExpr':([77,86,137,168,],[101,101,155,171,]),'emptyStatement':([77,86,137,168,],[103,103,103,103,]),'asso':([78,],[104,]),'matrixContents':([82,142,143,],[113,159,160,]),'CNUMBER':([82,142,143,],[114,114,114,]),'NumberExpr':([82,116,142,143,],[115,144,115,115,]),'sectionExpr':([86,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> varDef procedureBody','program',2,'p_program','parser.py',37),
  ('program -> gateDef varDef procedureBody','program',3,'p_program','parser.py',38),
  ('gateDef -> gateDefclause','gateDef',1,'p_gateDef','parser.py',50),
  ('gateDef -> gateDefclause gateDef','gateDef',2,'p_gateDef','parser.py',51),
  ('gDefID -> ID','gDefID',1,'p_gDefID','parser.py',58),
  ('gateDefclause -> DEFGATE gDefID = [ matrixContents ] ;','gateDefclause',7,'p_gateDefclause','parser.py',67),
  ('matrixContents -> CNUMBER','matrixContents',1,'p_matrixContents','parser.py',72),
  ('matrixContents -> CNUMBER , matrixContents','matrixContents',3,'p_matrixContents','parser.py',73),
  ('matrixContents -> CNUMBER ; matrixContents','matrixContents',3,'p_matrixContents','parser.py',74),
  ('CNUMBER -> NumberExpr','CNUMBER',1,'p_CNUMBER','parser.py',81),
  ('CNUMBER -> - NumberExpr','CNUMBER',2,'p_CNUMBER','parser.py',82),
  ('NumberExpr -> NUMBER','NumberExpr',1,'p_NumberExpr','parser.py',89),
  ('NumberExpr -> NUMBER + NUMBER','NumberExpr',3,'p_NumberExpr','parser.py',90),
  ('NumberExpr -> NUMBER - NUMBER','NumberExpr',3,'p_NumberExpr','parser.py',91),
  ('varDef -> defclause','varDef',1,'p_varDef','parser.py',97),
  ('varDef -> varDef defclause','varDef',2,'p_varDef','parser.py',98),
  ('defclause -> QBIT seen_Qbit id_list ;','defclause',4,'p_defclause','parser.py',105),
  ('seen_Qbit -> <empty>','seen_Qbit',0,'p_seen_Qbit','parser.py',112),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',118),
  ('id_list -> id_list , ID','id_list',3,'p_id_list','parser.py',119),
  ('id_list -> ID [ NUMBER ]','id_list',4,'p_id_list','parser.py',120),
  ('id_list -> id_list , ID [ NUMBER ]','id_list',6,'p_id_list','parser.py',121),
  ('procedureBody -> programBlock','procedureBody',1,'p_procedureBody','parser.py',157),
  ('procedureBody -> PROCEDURE MAIN ( ) { programBlock }','procedureBody',7,'p_procedureBody','parser.py',158),
  ('programStatement -> qbitUnitaryStatement','programStatement',1,'p_statement','parser.py',166),
  ('programStatement -> measureStatement','programStatement',1,'p_statement','parser.py',167),
  ('programStatement -> foreachStatement','programStatement',1,'p_statement','parser.py',168),
  ('programStatement -> ifStatement','programStatement',1,'p_statement','parser.py',169),
  ('programBlock -> programStatement','programBlock',1,'p_programBlock','parser.py',172),
  ('programBlock -> programBlock programStatement','programBlock',2,'p_programBlock','parser.py',173),
  ('rangeExpr -> optionalIntExpr : optionalIntExpr','rangeExpr',3,'p_rangeExpr','parser.py',187),
  ('rangeExpr -> optionalIntExpr : optionalIntExpr : optionalIntExpr','rangeExpr',5,'p_rangeExpr','parser.py',188),
  ('optionalIntExpr -> intExpr','optionalIntExpr',1,'p_optionalIntExpr','parser.py',195),
  ('optionalIntExpr -> emptyStatement','optionalIntExpr',1,'p_optionalIntExpr','parser.py',196),
  ('sectionExpr -> intExpr','sectionExpr',1,'p_section','parser.py',206),
  ('sectionExpr -> sectionExpr , intExpr','sectionExpr',3,'p_section','parser.py',207),
  ('qubitExpr -> ID','qubitExpr',1,'p_qubitExpr','parser.py',219),
  ('qubitExpr -> ID [ sectionExpr ]','qubitExpr',4,'p_qubitExpr','parser.py',220),
  ('qubitExpr -> ID [ rangeExpr ]','qubitExpr',4,'p_qubitExpr','parser.py',221),
  ('qubitListExpr -> qubitExpr','qubitListExpr',1,'p_qubitListExpr','parser.py',233),
  ('qubitListExpr -> qubitListExpr , qubitExpr','qubitListExpr',3,'p_qubitListExpr','parser.py',234),
  ('intExprAtom -> ID','intExprAtom',1,'p_intExprAtom','parser.py',253),
  ('intExprAtom -> NUMBER','intExprAtom',1,'p_intExprAtom','parser.py',254),
  ('intExprAtom -> ID [ intExpr ]','intExprAtom',4,'p_intExprAtom','parser.py',255),
  ('intExprAtom -> ( intExpr )','intExprAtom',3,'p_intExprAtom','parser.py',256),
  ('intExprTier1 -> intExprAtom','intExprTier1',1,'p_intTier1Expr','parser.py',297),
  ('intExprTier1 -> intExprTier1 * intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',298),
  ('intExprTier1 -> intExprTier1 / intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',299),
  ('intExprTier1 -> intExprTier1 % intExprAtom','intExprTier1',3,'p_intTier1Expr','parser.py',300),
  ('intExprTier2 -> intExprTier1','intExprTier2',1,'p_intTier2Expr','parser.py',308),
  ('intExprTier2 -> intExprTier2 + intExprTier1','intExprTier2',3,'p_intTier2Expr','parser.py',309),
  ('intExprTier2 -> intExprTier2 - intExprTier1','intExprTier2',3,'p_intTier2Expr','parser.py',310),
  ('intExprTier2 -> <empty>','intExprTier2',0,'p_intTier2Expr','parser.py',311),
  ('intExpr -> intExprTier2','intExpr',1,'p_term','parser.py',319),
  ('intExpr -> - intExprTier2','intExpr',2,'p_term','parser.py',320),
  ('foreachStatement -> FOR ID IN rangeExpr { programBlock }','foreachStatement',7,'p_foreachStatement','parser.py',333),
  ('asso -> EQ','asso',1,'p_asso','parser.py',340),
  ('asso -> GE','asso',1,'p_asso','parser.py',341),
  ('asso -> LE','asso',1,'p_asso','parser.py',342),
  ('asso -> NE','asso',1,'p_asso','parser.py',343),
  ('asso -> <','asso',1,'p_asso','parser.py',344),
  ('asso -> >','asso',1,'p_asso','parser.py',345),
  ('ifStatement -> IF ( intExpr asso intExpr ) { programBlock }','ifStatement',9,'p_ifStatement','parser.py',350),
  ('ifStatement -> IF ( intExpr asso intExpr ) { programBlock } ELSE { programBlock }','ifStatement',13,'p_ifStatement','parser.py',351),
  ('qbitUnitaryStatement -> uGate < qubitListExpr > ;','qbitUnitaryStatement',5,'p_qbitUnitaryStatement','parser.py',358),
  ('qbitUnitaryStatement -> uGate ( qubitListExpr ) ;','qbitUnitaryStatement',5,'p_qbitUnitaryStatement','parser.py',359),
  ('qbitUnitaryStatement -> rGate < intExpr , qubitListExpr > ;','qbitUnitaryStatement',7,'p_qbitUnitaryStatement','parser.py',360),
  ('qbitUnitaryStatement -> rGate ( intExpr , qubitListExpr ) ;','qbitUnitaryStatement',7,'p_qbitUnitaryStatement','parser.py',361),
  ('rGate -> RX','rGate',1,'p_rGate','parser.py',375),
  ('rGate -> RY','rGate',1,'p_rGate','parser.py',376),
  ('rGate -> RZ','rGate',1,'p_rGate','parser.py',377),
  ('uGate -> H','uGate',1,'p_uGate','parser.py',381),
  ('uGate -> X','uGate',1,'p_uGate','parser.py',382),
  ('uGate -> Y','uGate',1,'p_uGate','parser.py',383),
  ('uGate -> Z','uGate',1,'p_uGate','parser.py',384),
  ('uGate -> S','uGate',1,'p_uGate','parser.py',385),
  ('uGate -> T','uGate',1,'p_uGate','parser.py',386),
  ('uGate -> SD','uGate',1,'p_uGate','parser.py',387),
  ('uGate -> TD','uGate',1,'p_uGate','parser.py',388),
  ('uGate -> X2P','uGate',1,'p_uGate','parser.py',389),
  ('uGate -> X2M','uGate',1,'p_uGate','parser.py',390),
  ('uGate -> Y2P','uGate',1,'p_uGate','parser.py',391),
  ('uGate -> Y2M','uGate',1,'p_uGate','parser.py',392),
  ('uGate -> CZ','uGate',1,'p_uGate','parser.py',393),
  ('uGate -> CNOT','uGate',1,'p_uGate','parser.py',394),
  ('uGate -> CX','uGate',1,'p_uGate','parser.py',395),
  ('uGate -> CY','uGate',1,'p_uGate','parser.py',396),
  ('uGate -> ID','uGate',1,'p_uGate','parser.py',397),
  ('measureStatement -> M < qubitExpr > ;','measureStatement',5,'p_measureStatement','parser.py',403),
  ('measureStatement -> M ( qubitExpr ) ;','measureStatement',5,'p_measureStatement','parser.py',404),
  ('emptyStatement -> <empty>','emptyStatement',0,'p_emptyStatement','parser.py',409),
]
