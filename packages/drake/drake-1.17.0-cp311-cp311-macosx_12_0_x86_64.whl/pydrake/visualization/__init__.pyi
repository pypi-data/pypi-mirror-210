from typing import Any, ClassVar

import pydrake.geometry
import pydrake.lcm
import pydrake.multibody.plant
import pydrake.systems.framework
import pydrake.systems.lcm
AddFrameTriadIllustration: function
plot_sublevelset_expression: function
plot_sublevelset_quadratic: function

class ColorizeDepthImage(pydrake.systems.framework.LeafSystem):
    __init__: ClassVar[function] = ...
    _calc_output: ClassVar[function] = ...
    _colorize_depth_array: ClassVar[function] = ...
    _colorize_depth_image: ClassVar[function] = ...
    _invalid_color_pixel: ClassVar[function] = ...

class ColorizeLabelImage(pydrake.systems.framework.LeafSystem):
    __init__: ClassVar[function] = ...
    _background_color_pixel: ClassVar[function] = ...
    _calc_output: ClassVar[function] = ...
    _colorize_label_array: ClassVar[function] = ...
    _colorize_label_image: ClassVar[function] = ...
    def _make_palette(self, *args, **kwargs) -> Any: ...

class ConcatenateImages(pydrake.systems.framework.LeafSystem):
    __init__: ClassVar[function] = ...
    _calc_output: ClassVar[function] = ...
    get_input_port: ClassVar[function] = ...

class Meldis:
    __init__: ClassVar[function] = ...
    _check_for_shutdown: ClassVar[function] = ...
    _invoke_poll: ClassVar[function] = ...
    _invoke_subscriptions: ClassVar[function] = ...
    _poll: ClassVar[function] = ...
    _should_update: ClassVar[function] = ...
    _subscribe: ClassVar[function] = ...
    _subscribe_multichannel: ClassVar[function] = ...
    serve_forever: ClassVar[function] = ...

class ModelVisualizer:
    __init__: ClassVar[function] = ...
    AddModels: ClassVar[function] = ...
    Finalize: ClassVar[function] = ...
    Run: ClassVar[function] = ...
    _add_traffic_cone: ClassVar[function] = ...
    _check_rep: ClassVar[function] = ...
    _get_slider_values: ClassVar[function] = ...
    _raise_if_invalid_positions: ClassVar[function] = ...
    _reload: ClassVar[function] = ...
    _remove_traffic_cone: ClassVar[function] = ...
    _set_slider_values: ClassVar[function] = ...
    meshcat: ClassVar[function] = ...
    package_map: ClassVar[function] = ...
    parser: ClassVar[function] = ...
    RunWithReload: Any
    def _camera_config_to_frustum(self, *args, **kwargs) -> Any: ...
    def _get_constructor_defaults(self, *args, **kwargs) -> Any: ...

class VideoWriter(pydrake.systems.framework.LeafSystem):
    __init__: ClassVar[function] = ...
    ConnectRgbdSensor: ClassVar[function] = ...
    Save: ClassVar[function] = ...
    _publish: ClassVar[function] = ...
    _write_cv2: ClassVar[function] = ...
    _write_pil: ClassVar[function] = ...
    def AddToBuilder(self, *args, **kwargs) -> Any: ...
    def _AddRgbdSensor(self, *args, **kwargs) -> Any: ...

class VisualizationConfig:
    __fields__: ClassVar[tuple] = ...  # read-only
    default_illustration_color: pydrake.geometry.Rgba
    default_proximity_color: pydrake.geometry.Rgba
    delete_on_initialization_event: bool
    enable_alpha_sliders: bool
    enable_meshcat_creation: bool
    lcm_bus: str
    publish_contacts: bool
    publish_illustration: bool
    publish_period: float
    publish_proximity: bool
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> VisualizationConfig: ...
    def __deepcopy__(self, arg0: dict) -> VisualizationConfig: ...

def AddDefaultVisualization(builder: pydrake.systems.framework.DiagramBuilder, meshcat: pydrake.geometry.Meshcat = ...) -> None: ...
def ApplyVisualizationConfig(config: VisualizationConfig, builder: pydrake.systems.framework.DiagramBuilder, lcm_buses: pydrake.systems.lcm.LcmBuses = ..., plant: pydrake.multibody.plant.MultibodyPlant = ..., scene_graph: pydrake.geometry.SceneGraph = ..., meshcat: pydrake.geometry.Meshcat = ..., lcm: pydrake.lcm.DrakeLcmInterface = ...) -> None: ...
