(undo-tree-save-format-version . 1)
"babec2fe79b54dbff429b9ca6603802a812f86ba"
[nil nil nil nil (25672 15396 39833 468000) 0 nil]
([nil nil ((#("class ReceivedOrTimeout(BaseCond):
    def __init__(
        self, agent, expiration=None, timeout=None, check=True, ignore=False, **kwargs
    ):
        if expiration is None:
            if timeout is not None:
                expiration = agent.now + timeout
        self.expiration = expiration
        self.ignore = ignore
        self.check = check
        super().__init__(**kwargs)

    def expired(self, time):
        return self.expiration and self.expiration < time

    def ready(self, agent):
        return len(agent._inbox) or self.expired(agent.model.schedule.time)

    def return_value(self, agent):
        if not self.ignore and self.expired(agent.now):
            raise TimedOut(\"No messages received\")
        if self.check:
            agent.check_messages()
        return None

    def next_check(self, time, first=False):
        if self._delta is not None:
            return time + self._delta
        return None

    def __repr__(self):
        return f\"ReceivedOrTimeout(expires={self.expiration})\"


" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 23 (face font-lock-type-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 39 (fontified t) 39 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 51 (face font-lock-function-name-face fontified t) 51 52 (face (rainbow-delimiters-depth-1-face) fontified t) 52 53 (fontified t) 53 61 (fontified t) 61 65 (face font-lock-keyword-face fontified t) 65 85 (fontified t) 85 89 (face font-lock-constant-face fontified t) 89 99 (fontified t) 99 103 (face font-lock-constant-face fontified t) 103 111 (fontified t) 111 115 (face font-lock-constant-face fontified t) 115 124 (fontified t) 124 129 (face font-lock-constant-face fontified t) 129 140 (fontified t) 140 144 (fontified t) 144 145 (face (rainbow-delimiters-depth-1-face) fontified t) 145 147 (fontified t) 147 155 (fontified t) 155 157 (face font-lock-keyword-face fontified t) 157 169 (fontified t) 169 171 (face font-lock-keyword-face fontified t) 171 172 (fontified t) 172 176 (face font-lock-constant-face fontified t) 176 178 (fontified t) 178 190 (fontified t) 190 192 (face font-lock-keyword-face fontified t) 192 201 (fontified t) 201 203 (face font-lock-keyword-face fontified t) 203 204 (fontified t) 204 207 (face font-lock-keyword-face fontified t) 207 208 (fontified t) 208 212 (face font-lock-constant-face fontified t) 212 214 (fontified t) 214 230 (fontified t) 230 240 (face font-lock-variable-name-face fontified t) 240 263 (fontified t) 263 271 (fontified t) 271 275 (face font-lock-keyword-face fontified t) 275 300 (fontified t) 300 308 (fontified t) 308 312 (face font-lock-keyword-face fontified t) 312 329 (fontified t) 329 336 (fontified t) 336 337 (fontified t) 337 341 (face font-lock-keyword-face fontified t) 341 356 (fontified t) 356 364 (fontified t) 364 369 (face font-lock-builtin-face fontified t) 369 370 (face (rainbow-delimiters-depth-1-face) fontified t) 370 371 (face (rainbow-delimiters-depth-1-face) fontified t) 371 380 (fontified t) 380 381 (face (rainbow-delimiters-depth-1-face) fontified t) 381 389 (fontified t) 389 390 (face (rainbow-delimiters-depth-1-face) fontified t) 390 391 (fontified t) 391 392 (fontified t) 392 396 (fontified t) 396 399 (face font-lock-keyword-face fontified t) 399 400 (fontified t) 400 407 (face font-lock-function-name-face fontified t) 407 408 (face (rainbow-delimiters-depth-1-face) fontified t) 408 412 (face font-lock-keyword-face fontified t) 412 418 (fontified t) 418 419 (face (rainbow-delimiters-depth-1-face) fontified t) 419 421 (fontified t) 421 429 (fontified t) 429 435 (face font-lock-keyword-face fontified t) 435 436 (fontified t) 436 440 (face font-lock-keyword-face fontified t) 440 452 (fontified t) 452 455 (face font-lock-keyword-face fontified t) 455 456 (fontified t) 456 460 (face font-lock-keyword-face fontified t) 460 479 (fontified t) 479 480 (fontified t) 480 484 (fontified t) 484 487 (face font-lock-keyword-face fontified t) 487 488 (fontified t) 488 493 (face font-lock-function-name-face fontified t) 493 494 (face (rainbow-delimiters-depth-1-face) fontified t) 494 498 (face font-lock-keyword-face fontified t) 498 500 (fontified t) 500 505 (fontified t) 505 506 (face (rainbow-delimiters-depth-1-face) fontified t) 506 508 (fontified t) 508 516 (fontified t) 516 522 (face font-lock-keyword-face fontified t) 522 523 (fontified t) 523 526 (face font-lock-builtin-face fontified t) 526 527 (face (rainbow-delimiters-depth-1-face) fontified t) 527 539 (fontified t) 539 540 (face (rainbow-delimiters-depth-1-face) fontified t) 540 541 (fontified t) 541 543 (face font-lock-keyword-face fontified t) 543 544 (fontified t) 544 548 (face font-lock-keyword-face fontified t) 548 556 (fontified t) 556 557 (face (rainbow-delimiters-depth-1-face) fontified t) 557 582 (fontified t) 582 583 (face (rainbow-delimiters-depth-1-face) fontified t) 583 584 (fontified t) 584 585 (fontified t) 585 589 (fontified t) 589 592 (face font-lock-keyword-face fontified t) 592 593 (fontified t) 593 605 (face font-lock-function-name-face fontified t) 605 606 (face (rainbow-delimiters-depth-1-face) fontified t) 606 610 (face font-lock-keyword-face fontified t) 610 617 (fontified t) 617 618 (face (rainbow-delimiters-depth-1-face) fontified t) 618 620 (fontified t) 620 628 (fontified t) 628 630 (face font-lock-keyword-face fontified t) 630 631 (fontified t) 631 634 (face font-lock-keyword-face fontified t) 634 635 (fontified t) 635 639 (face font-lock-keyword-face fontified t) 639 647 (fontified t) 647 650 (face font-lock-keyword-face fontified t) 650 651 (fontified t) 651 655 (face font-lock-keyword-face fontified t) 655 663 (fontified t) 663 664 (face (rainbow-delimiters-depth-1-face) fontified t) 664 673 (fontified t) 673 674 (face (rainbow-delimiters-depth-1-face) fontified t) 674 676 (fontified t) 676 688 (fontified t) 688 693 (face font-lock-keyword-face fontified t) 693 702 (fontified t) 702 703 (face (rainbow-delimiters-depth-1-face) fontified t) 703 704 (face font-lock-string-face syntax-table (15) fontified t) 704 724 (face font-lock-string-face fontified t) 724 725 (face font-lock-string-face syntax-table (15) fontified t) 725 726 (face (rainbow-delimiters-depth-1-face) fontified t) 726 727 (fontified t) 727 735 (fontified t) 735 737 (face font-lock-keyword-face fontified t) 737 738 (fontified t) 738 742 (face font-lock-keyword-face fontified t) 742 750 (fontified t) 750 768 (fontified t) 768 782 (fontified t) 782 783 (face (rainbow-delimiters-depth-1-face) fontified t) 783 784 (face (rainbow-delimiters-depth-1-face) fontified t) 784 793 (fontified t) 793 799 (face font-lock-keyword-face fontified t) 799 800 (fontified t) 800 804 (face font-lock-constant-face fontified t) 804 810 (fontified t) 810 813 (face font-lock-keyword-face fontified t) 813 814 (fontified t) 814 824 (face font-lock-function-name-face fontified t) 824 825 (face (rainbow-delimiters-depth-1-face) fontified t) 825 829 (face font-lock-keyword-face fontified t) 829 836 (fontified t) 836 843 (fontified t) 843 848 (face font-lock-constant-face fontified t) 848 849 (face (rainbow-delimiters-depth-1-face) fontified t) 849 859 (fontified t) 859 861 (face font-lock-keyword-face fontified t) 861 862 (fontified t) 862 866 (face font-lock-keyword-face fontified t) 866 874 (fontified t) 874 876 (face font-lock-keyword-face fontified t) 876 877 (fontified t) 877 880 (face font-lock-keyword-face fontified t) 880 881 (fontified t) 881 885 (face font-lock-constant-face fontified t) 885 899 (fontified t) 899 905 (face font-lock-keyword-face fontified t) 905 913 (fontified t) 913 917 (face font-lock-keyword-face fontified t) 917 933 (fontified t) 933 939 (face font-lock-keyword-face fontified t) 939 940 (fontified t) 940 944 (face font-lock-constant-face fontified t) 944 950 (fontified t) 950 953 (face font-lock-keyword-face fontified t) 953 954 (fontified t) 954 962 (face font-lock-function-name-face fontified t) 962 963 (face (rainbow-delimiters-depth-1-face) fontified t) 963 967 (face font-lock-keyword-face fontified t) 967 968 (face (rainbow-delimiters-depth-1-face) fontified t) 968 978 (fontified t) 978 984 (face font-lock-keyword-face fontified t) 984 986 (fontified t) 986 987 (face font-lock-string-face syntax-table (15) fontified t) 987 998 (face font-lock-string-face fontified t) 998 1000 (face font-lock-string-face fontified t) 1000 1031 (face font-lock-string-face fontified t) 1031 1032 (face font-lock-string-face fontified t syntax-table (15)) 1032 1033 (fontified t) 1033 1034 (fontified t) 1034 1035 (fontified t)) . 165) (undo-tree-id380 . -480) (undo-tree-id381 . -480) (undo-tree-id382 . -508) (undo-tree-id383 . -508) (undo-tree-id384 . -806) (undo-tree-id385 . -806) (undo-tree-id386 . -887) (undo-tree-id387 . -887) (undo-tree-id388 . -925) (undo-tree-id389 . -925) (undo-tree-id390 . -255) (undo-tree-id391 . -970) (undo-tree-id392 . -1033) (undo-tree-id393 . -15) (undo-tree-id394 . -987) (undo-tree-id395 . -946) (undo-tree-id396 . -946) (undo-tree-id397 . -105) (undo-tree-id398 . -105) (undo-tree-id399 . -342) (undo-tree-id400 . -342) (undo-tree-id401 . -350) (undo-tree-id402 . -350) (undo-tree-id403 . -743) (undo-tree-id404 . -14) (undo-tree-id405 . -391) (undo-tree-id406 . -479) (undo-tree-id407 . -584) (undo-tree-id408 . -805) (undo-tree-id409 . -945) (undo-tree-id410 . -1033) (undo-tree-id411 . -1034) (undo-tree-id412 . -1034) (undo-tree-id413 . -768) (undo-tree-id414 . -768) (undo-tree-id415 . -688) (undo-tree-id416 . -688) (undo-tree-id417 . -978) (undo-tree-id418 . -978) (undo-tree-id419 . -480) (undo-tree-id420 . -500) (undo-tree-id421 . -688) (undo-tree-id422 . -688) (undo-tree-id423 . -978) (undo-tree-id424 . -978) (undo-tree-id425 . -480) (undo-tree-id426 . -500) (undo-tree-id427 . -16) (undo-tree-id428 . -23) (undo-tree-id429 . -91) (undo-tree-id430 . -98) (undo-tree-id431 . -193) (undo-tree-id432 . -200) (undo-tree-id433 . -255) (undo-tree-id434 . -262) (undo-tree-id435 . -16) (undo-tree-id436 . -997) (undo-tree-id437 . -16) (undo-tree-id438 . -16) (undo-tree-id439 . -16) (undo-tree-id440 . -91) (undo-tree-id441 . -16) (undo-tree-id442 . -16) (undo-tree-id443 . -91) (undo-tree-id444 . -91) (undo-tree-id445 . -193) (undo-tree-id446 . -91) (undo-tree-id447 . -91) (undo-tree-id448 . -193) (undo-tree-id449 . -193) (undo-tree-id450 . -255) (undo-tree-id451 . -193) (undo-tree-id452 . -193) (undo-tree-id453 . -255) (undo-tree-id454 . -255) (undo-tree-id455 . -997) (undo-tree-id456 . -255) (undo-tree-id457 . 48) (undo-tree-id458 . -1004) (undo-tree-id459 . -978) (undo-tree-id460 . -978) (undo-tree-id461 . -970) (undo-tree-id462 . -1000) (undo-tree-id463 . -997) (undo-tree-id464 . -1004) (undo-tree-id465 . -997) (t 25671 57764 747473 17000)) ((165 . 1200)) (25672 15412 29187 682000) 0 nil] [nil nil ((#("

class ReceivedOrTimeout(BaseCond):
    def __init__(
        self, agent, expiration=None, timeout=None, check=True, ignore=False, **kwargs
    ):
        if expiration is None:
            if timeout is not None:
                expiration = agent.now + timeout
        self.expiration = expiration
        self.ignore = ignore
        self.check = check
        super().__init__(**kwargs)

    def expired(self, time):
        return self.expiration and self.expiration < time

    def ready(self, agent):
        return len(agent._inbox) or self.expired(agent.model.schedule.time)

    def return_value(self, agent):
        if not self.ignore and self.expired(agent.now):
            raise TimedOut(\"No messages received\")
        if self.check:
            agent.check_messages()
        return None

    def next_check(self, time, first=False):
        if self._delta is not None:
            return time + self._delta
        return None

    def __repr__(self):
        return f\"ReceivedOrTimeout(expires={self.expiration})\"
" 0 2 (fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 25 (face font-lock-type-face fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 41 (fontified t) 41 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 53 (face font-lock-function-name-face fontified t) 53 54 (face (rainbow-delimiters-depth-1-face) fontified t) 54 63 (fontified t) 63 67 (face font-lock-keyword-face fontified t) 67 87 (fontified t) 87 91 (face font-lock-constant-face fontified t) 91 101 (fontified t) 101 105 (face font-lock-constant-face fontified t) 105 113 (fontified t) 113 117 (face font-lock-constant-face fontified t) 117 126 (fontified t) 126 131 (face font-lock-constant-face fontified t) 131 146 (fontified t) 146 147 (face (rainbow-delimiters-depth-1-face) fontified t) 147 157 (fontified t) 157 159 (face font-lock-keyword-face fontified t) 159 171 (fontified t) 171 173 (face font-lock-keyword-face fontified t) 173 174 (fontified t) 174 178 (face font-lock-constant-face fontified t) 178 192 (fontified t) 192 194 (face font-lock-keyword-face fontified t) 194 203 (fontified t) 203 205 (face font-lock-keyword-face fontified t) 205 206 (fontified t) 206 209 (face font-lock-keyword-face fontified t) 209 210 (fontified t) 210 214 (face font-lock-constant-face fontified t) 214 232 (fontified t) 232 242 (face font-lock-variable-name-face fontified t) 242 273 (fontified t) 273 277 (face font-lock-keyword-face fontified t) 277 310 (fontified t) 310 314 (face font-lock-keyword-face fontified t) 314 338 (fontified t) 338 339 (fontified t) 339 343 (face font-lock-keyword-face fontified t) 343 366 (fontified t) 366 371 (face font-lock-builtin-face fontified t) 371 372 (face (rainbow-delimiters-depth-1-face) fontified t) 372 373 (face (rainbow-delimiters-depth-1-face) fontified t) 373 382 (fontified t) 382 383 (face (rainbow-delimiters-depth-1-face) fontified t) 383 391 (fontified t) 391 392 (face (rainbow-delimiters-depth-1-face) fontified t) 392 398 (fontified t) 398 401 (face font-lock-keyword-face fontified t) 401 402 (fontified t) 402 409 (face font-lock-function-name-face fontified t) 409 410 (face (rainbow-delimiters-depth-1-face) fontified t) 410 414 (face font-lock-keyword-face fontified t) 414 420 (fontified t) 420 421 (face (rainbow-delimiters-depth-1-face) fontified t) 421 431 (fontified t) 431 437 (face font-lock-keyword-face fontified t) 437 438 (fontified t) 438 442 (face font-lock-keyword-face fontified t) 442 454 (fontified t) 454 457 (face font-lock-keyword-face fontified t) 457 458 (fontified t) 458 462 (face font-lock-keyword-face fontified t) 462 486 (fontified t) 486 489 (face font-lock-keyword-face fontified t) 489 490 (fontified t) 490 495 (face font-lock-function-name-face fontified t) 495 496 (face (rainbow-delimiters-depth-1-face) fontified t) 496 500 (face font-lock-keyword-face fontified t) 500 507 (fontified t) 507 508 (face (rainbow-delimiters-depth-1-face) fontified t) 508 518 (fontified t) 518 524 (face font-lock-keyword-face fontified t) 524 525 (fontified t) 525 528 (face font-lock-builtin-face fontified t) 528 529 (face (rainbow-delimiters-depth-1-face) fontified t) 529 541 (fontified t) 541 542 (face (rainbow-delimiters-depth-1-face) fontified t) 542 543 (fontified t) 543 545 (face font-lock-keyword-face fontified t) 545 546 (fontified t) 546 550 (face font-lock-keyword-face fontified t) 550 558 (fontified t) 558 559 (face (rainbow-delimiters-depth-1-face) fontified t) 559 584 (fontified t) 584 585 (face (rainbow-delimiters-depth-1-face) fontified t) 585 591 (fontified t) 591 594 (face font-lock-keyword-face fontified t) 594 595 (fontified t) 595 607 (face font-lock-function-name-face fontified t) 607 608 (face (rainbow-delimiters-depth-1-face) fontified t) 608 612 (face font-lock-keyword-face fontified t) 612 619 (fontified t) 619 620 (face (rainbow-delimiters-depth-1-face) fontified t) 620 630 (fontified t) 630 632 (face font-lock-keyword-face fontified t) 632 633 (fontified t) 633 636 (face font-lock-keyword-face fontified t) 636 637 (fontified t) 637 641 (face font-lock-keyword-face fontified t) 641 649 (fontified t) 649 652 (face font-lock-keyword-face fontified t) 652 653 (fontified t) 653 657 (face font-lock-keyword-face fontified t) 657 665 (fontified t) 665 666 (face (rainbow-delimiters-depth-1-face) fontified t) 666 675 (fontified t) 675 676 (face (rainbow-delimiters-depth-1-face) fontified t) 676 690 (fontified t) 690 695 (face font-lock-keyword-face fontified t) 695 704 (fontified t) 704 705 (face (rainbow-delimiters-depth-1-face) fontified t) 705 706 (face font-lock-string-face syntax-table (15) fontified t) 706 726 (face font-lock-string-face fontified t) 726 727 (face font-lock-string-face syntax-table (15) fontified t) 727 728 (face (rainbow-delimiters-depth-1-face) fontified t) 728 737 (fontified t) 737 739 (face font-lock-keyword-face fontified t) 739 740 (fontified t) 740 744 (face font-lock-keyword-face fontified t) 744 784 (fontified t) 784 785 (face (rainbow-delimiters-depth-1-face) fontified t) 785 786 (face (rainbow-delimiters-depth-1-face) fontified t) 786 795 (fontified t) 795 801 (face font-lock-keyword-face fontified t) 801 802 (fontified t) 802 806 (face font-lock-constant-face fontified t) 806 812 (fontified t) 812 815 (face font-lock-keyword-face fontified t) 815 816 (fontified t) 816 826 (face font-lock-function-name-face fontified t) 826 827 (face (rainbow-delimiters-depth-1-face) fontified t) 827 831 (face font-lock-keyword-face fontified t) 831 838 (fontified t) 838 845 (fontified t) 845 850 (face font-lock-constant-face fontified t) 850 851 (face (rainbow-delimiters-depth-1-face) fontified t) 851 861 (fontified t) 861 863 (face font-lock-keyword-face fontified t) 863 864 (fontified t) 864 868 (face font-lock-keyword-face fontified t) 868 876 (fontified t) 876 878 (face font-lock-keyword-face fontified t) 878 879 (fontified t) 879 882 (face font-lock-keyword-face fontified t) 882 883 (fontified t) 883 887 (face font-lock-constant-face fontified t) 887 901 (fontified t) 901 907 (face font-lock-keyword-face fontified t) 907 915 (fontified t) 915 919 (face font-lock-keyword-face fontified t) 919 935 (fontified t) 935 941 (face font-lock-keyword-face fontified t) 941 942 (fontified t) 942 946 (face font-lock-constant-face fontified t) 946 952 (fontified t) 952 955 (face font-lock-keyword-face fontified t) 955 956 (fontified t) 956 964 (face font-lock-function-name-face fontified t) 964 965 (face (rainbow-delimiters-depth-1-face) fontified t) 965 969 (face font-lock-keyword-face fontified t) 969 970 (face (rainbow-delimiters-depth-1-face) fontified t) 970 980 (fontified t) 980 986 (face font-lock-keyword-face fontified t) 986 988 (fontified t) 988 989 (face font-lock-string-face syntax-table (15) fontified t) 989 1033 (face font-lock-string-face fontified t) 1033 1034 (face font-lock-string-face syntax-table (15) fontified t) 1034 1035 (fontified t)) . 163) (undo-tree-id0 . -482) (undo-tree-id1 . -482) (undo-tree-id2 . -510) (undo-tree-id3 . -510) (undo-tree-id4 . -808) (undo-tree-id5 . -808) (undo-tree-id6 . -889) (undo-tree-id7 . -889) (undo-tree-id8 . -927) (undo-tree-id9 . -927) (undo-tree-id10 . -972) (undo-tree-id11 . -972) (undo-tree-id12 . -1035) (undo-tree-id13 . -972) (undo-tree-id14 . -17) (undo-tree-id15 . -17) (undo-tree-id16 . -17) (undo-tree-id17 . -216) (undo-tree-id18 . -989) (undo-tree-id19 . -972) (undo-tree-id20 . 46) (undo-tree-id21 . -1006) (undo-tree-id22 . -17) (undo-tree-id23 . -989) (undo-tree-id24 . -989) (undo-tree-id25 . -989) (undo-tree-id26 . -1006) (undo-tree-id27 . -972) (undo-tree-id28 . -1034) 1135 (t 25671 57764 747473 17000)) ((163 . 1198)) (25672 15253 89753 697000) 0 nil])
([nil nil ((407 . 408) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . 407)) ((407 . 408) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . 407)) (25672 15412 267211 484000) 0 nil])
nil
([nil nil ((418 . 422)) nil (25672 15527 94678 220000) 0 nil])
([nil nil ((#("time" 0 4 (fontified t)) . 418) (undo-tree-id481 . -3) (undo-tree-id482 . -4) 422) nil (25672 15527 94676 892000) 0 nil])
([nil nil ((447 . 456) (445 . 447) (439 . 445) (418 . 439) (#("i" 0 1 (fontified t)) . -418) (undo-tree-id480 . -1) 419 (418 . 419)) nil (25672 15527 94673 153000) 0 nil])
([nil nil ((#("        *args, **kwargs):
" 0 8 (fontified t) 8 23 (fontified t) 23 24 (face (rainbow-delimiters-unmatched-face) fontified t) 24 26 (fontified t)) . 448) (undo-tree-id474 . -26) (undo-tree-id475 . 17) (undo-tree-id476 . -25) (undo-tree-id477 . -7) (undo-tree-id478 . 18) (undo-tree-id479 . 18) 455) nil (25672 15527 94669 435000) 0 nil])
([nil nil ((487 . 507) (474 . 487) (466 . 474) (457 . 466) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -457) (undo-tree-id473 . -1) (456 . 458) (447 . 456) 403) nil (25672 15527 94661 661000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -516) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) 520 (507 . 520) 506) nil (25672 15527 94656 607000) 0 nil])
([nil nil ((509 . 511) (503 . 509) (#("f" 0 1 (fontified t)) . -503) (undo-tree-id466 . -1) (500 . 504)) nil (25672 15527 94643 208000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 519) (undo-tree-id575 . -9) (undo-tree-id576 . -8) (undo-tree-id577 . -8) (undo-tree-id578 . -8) (undo-tree-id579 . -8) (undo-tree-id580 . -7) (undo-tree-id581 . -7) (undo-tree-id582 . -7) (undo-tree-id583 . -9) 526 (t 25672 15527 118740 866000)) nil (25672 15738 930388 990000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -527) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) 531 (518 . 531) 482) nil (25672 15738 930380 90000) 0 nil])
([nil nil ((568 . 574) (555 . 568) (548 . 555) (536 . 548) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -536) (undo-tree-id562 . -1) (527 . 537) (#("    " 0 4 (fontified t)) . -527) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) 531 (518 . 531) 482) nil (25672 15738 930371 826000) 0 nil])
([nil nil ((555 . 568) 536) nil (25672 15738 930363 280000) 0 nil])
([nil nil ((#("            
" 0 12 (fontified t) 12 13 (fontified t)) . 556) (undo-tree-id545 . -13) (undo-tree-id546 . -12) (undo-tree-id547 . 1) (undo-tree-id548 . -11) (undo-tree-id549 . 1) (undo-tree-id550 . -12) (undo-tree-id551 . -12) (undo-tree-id552 . -12) (undo-tree-id553 . -12) (undo-tree-id554 . -12) (undo-tree-id555 . -12) (undo-tree-id556 . -12) (undo-tree-id557 . -12) (undo-tree-id558 . -11) (undo-tree-id559 . -11) (undo-tree-id560 . -11) (undo-tree-id561 . -13) 567) nil (25672 15738 930361 45000) 0 nil])
([nil nil ((574 . 583) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -574) (undo-tree-id543 . -1) (569 . 575) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -569) (undo-tree-id544 . -1) (568 . 570) (555 . 568) 536) nil (25672 15738 930346 186000) 0 nil])
([nil nil ((612 . 618) (#("," 0 1 (fontified t)) . -612) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) 613 (610 . 613) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -610) (undo-tree-id537 . -1) (600 . 611) (583 . 600) (582 . 583) (#(" " 0 1 (fontified t)) . -582) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) 583) nil (25672 15738 930340 912000) 0 nil])
([nil nil ((610 . 619) (#("f" 0 1 (fontified t)) . -610) (undo-tree-id532 . -1) (600 . 611)) nil (25672 15738 930329 697000) 0 nil])
([nil nil ((619 . 636)) nil (25672 15738 930327 364000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -618) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) 619) nil (25672 15738 930325 564000) 0 nil])
([nil nil ((638 . 655) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -638) (undo-tree-id522 . -1) (635 . 639) (618 . 635) 600) nil (25672 15738 930315 496000) 0 nil])
([nil nil ((#("                return self._inbox
" 0 16 (fontified t) 16 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 27 (face font-lock-keyword-face fontified t) 27 34 (fontified t) 34 35 (fontified t)) . 656) (undo-tree-id496 . -35) (undo-tree-id497 . -34) (undo-tree-id498 . -33) (undo-tree-id499 . -35) (undo-tree-id500 . -35) (undo-tree-id501 . -35) (undo-tree-id502 . -35) (undo-tree-id503 . -35) (undo-tree-id504 . -35) (undo-tree-id505 . -35) (undo-tree-id506 . -35) (undo-tree-id507 . -35) (undo-tree-id508 . -35) (undo-tree-id509 . -28) (undo-tree-id510 . -16) (undo-tree-id511 . -16) (undo-tree-id512 . -16) (undo-tree-id513 . -16) (undo-tree-id514 . -15) (undo-tree-id515 . -15) (undo-tree-id516 . -15) (undo-tree-id517 . -33) (undo-tree-id518 . -28) (undo-tree-id519 . -34) (undo-tree-id520 . -33) (undo-tree-id521 . -35) 689) nil (25672 15738 930310 934000) 0 nil])
([nil nil ((679 . 682) (#("selm" 0 4 (fontified t)) . -679) (undo-tree-id483 . -3) (undo-tree-id484 . -2) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -3) (undo-tree-id495 . -4) 683 (682 . 683) (672 . 682) (655 . 672) 636) nil (25672 15738 930285 323000) 0 nil])
([nil nil ((446 . 454) (445 . 446)) nil (25672 15738 930253 981000) 0 nil])
([nil nil ((455 . 457) (454 . 455) (t 25672 15738 956459 412000)) nil (25672 15752 13971 519000) 0 nil])
([nil nil ((455 . 457) (#("6" 0 1 (face highlight-numbers-number fontified t)) . -455) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (#("0" 0 1 (face highlight-numbers-number fontified t)) . -456) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) 457) nil (25672 15752 13963 707000) 0 nil])
([nil nil ((#("0" 0 1 (face highlight-numbers-number fontified t)) . -456) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) 457 (t 25672 15752 36316 611000)) nil (25672 15755 997996 28000) 0 nil])
([nil nil ((715 . 731) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -715) (undo-tree-id610 . -1) (712 . 716) (t 25672 15756 24273 33000)) nil (25672 15773 375864 359000) 0 nil])
([nil nil ((447 . 452) (#("polling" 0 7 (fontified t)) . 447) (undo-tree-id627 . -6) (undo-tree-id628 . -7) (undo-tree-id629 . -7) (undo-tree-id630 . -7) (t 25672 15773 400082 953000)) nil (25672 15781 955942 176000) 0 nil])
([nil nil ((721 . 726) (#("polling" 0 7 (fontified t)) . 721) (undo-tree-id611 . -6) (undo-tree-id612 . -7) (undo-tree-id613 . -7) (undo-tree-id614 . -7) (undo-tree-id615 . -7) (undo-tree-id616 . -7) (undo-tree-id617 . -7) (undo-tree-id618 . -7) (undo-tree-id619 . -7) (undo-tree-id620 . -7) (undo-tree-id621 . -7) (undo-tree-id622 . -7) (undo-tree-id623 . -7) (undo-tree-id624 . -7) (undo-tree-id625 . -7) (undo-tree-id626 . -7)) nil (25672 15781 955932 722000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 728) (undo-tree-id650 . -9) (undo-tree-id651 . -8) (undo-tree-id652 . -7) (undo-tree-id653 . -7) (undo-tree-id654 . -7) (undo-tree-id655 . -7) (undo-tree-id656 . -7) (undo-tree-id657 . -9) 735 (t 25672 15781 983988 932000)) nil (25672 15786 86155 859000) 0 nil])
([nil nil ((#("        return ReceivedOrTimeout(self, *args, **kwargs)
" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 30 (fontified t) 30 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 37 (face font-lock-keyword-face fontified t) 37 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-1-face) fontified t) 55 56 (fontified t)) . 728) (undo-tree-id631 . -56) (undo-tree-id632 . 56) (undo-tree-id633 . -55) (undo-tree-id634 . -15) (undo-tree-id635 . -25) (undo-tree-id636 . -32) (undo-tree-id637 . -7) (undo-tree-id638 . -15) (undo-tree-id639 . -32) (undo-tree-id640 . -40) (undo-tree-id641 . -44) (undo-tree-id642 . -48) (undo-tree-id643 . -54) (undo-tree-id644 . -33) (undo-tree-id645 . -33) (undo-tree-id646 . -55) (undo-tree-id647 . -7) (undo-tree-id648 . -7) (undo-tree-id649 . -56) 735) nil (25672 15786 86141 540000) 0 nil])
([nil nil ((702 . 705) (684 . 702) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -684) (undo-tree-id739 . -1) (681 . 685) (664 . 681) (t 25672 15786 107943 733000) 653) nil (25672 16073 326328 9000) 0 nil])
([nil nil ((1282 . 1284) (1275 . 1282) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1275) (undo-tree-id736 . -1) (1261 . 1276) (#("f" 0 1 (fontified t)) . -1261) (undo-tree-id737 . -1) (1261 . 1262) (#("    " 0 4 (fontified t)) . -1261) (undo-tree-id738 . -4) 1265 (1252 . 1265) 1251) nil (25672 16073 326323 571000) 0 nil])
([nil nil ((#("        while self._inbox:
" 0 8 (fontified t) 8 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-keyword-face fontified t) 17 18 (face font-lock-keyword-face fontified t) 18 26 (fontified t) 26 27 (fontified t)) . 1226) (undo-tree-id733 . -26) (undo-tree-id734 . -27) (undo-tree-id735 . -25) 1251) nil (25672 16073 326317 773000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1568) (undo-tree-id717 . -4) (undo-tree-id718 . -4) (undo-tree-id719 . -4) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) 1572 (#("    " 0 4 (fontified t)) . -1572) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) 1576 (1559 . 1576) 1551) nil (25672 16073 326313 110000) 0 nil])
([nil nil ((1579 . 1592) (1569 . 1579) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1569) (undo-tree-id700 . -1) (1568 . 1570) (#("    " 0 4 (fontified t)) . -1568) (undo-tree-id701 . -4) (undo-tree-id702 . -4) (undo-tree-id703 . -4) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -4) (undo-tree-id709 . -4) (undo-tree-id710 . -4) 1572 (#("    " 0 4 (fontified t)) . -1572) (undo-tree-id711 . -4) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (undo-tree-id715 . -4) (undo-tree-id716 . -4) 1576 (1559 . 1576) 1533) nil (25672 16073 326296 271000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . 1580) (undo-tree-id691 . -11) (undo-tree-id692 . -12) (undo-tree-id693 . -12) (undo-tree-id694 . -12) (undo-tree-id695 . -11) (undo-tree-id696 . -11) (undo-tree-id697 . -11) (undo-tree-id698 . -12) (undo-tree-id699 . -12) 1592) nil (25672 16073 326279 164000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 1581) (undo-tree-id674 . -8) (undo-tree-id675 . -9) (undo-tree-id676 . -8) (undo-tree-id677 . -8) (undo-tree-id678 . -8) (undo-tree-id679 . -8) (undo-tree-id680 . -8) (undo-tree-id681 . -8) (undo-tree-id682 . -8) (undo-tree-id683 . -8) (undo-tree-id684 . -8) (undo-tree-id685 . -8) (undo-tree-id686 . -7) (undo-tree-id687 . -7) (undo-tree-id688 . -7) (undo-tree-id689 . -8) (undo-tree-id690 . -9)) nil (25672 16073 326268 957000) 0 nil])
([nil nil ((1595 . 1612) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1595) (undo-tree-id673 . -1) (1592 . 1596) (1579 . 1592) 1560) nil (25672 16073 326250 511000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1613) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1)) nil (25672 16073 326242 98000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -1588) (1580 . 1588) 1594 (t 25672 16073 344758 683000)) nil (25672 16087 651439 347000) 0 nil])
([nil nil ((#("        if changed:
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 19 (fontified t) 19 20 (fontified t)) . 1560) (undo-tree-id740 . -19) (undo-tree-id741 . -20) (undo-tree-id742 . -8) (undo-tree-id743 . -8) (undo-tree-id744 . -8) (undo-tree-id745 . -8) (undo-tree-id746 . -8) (undo-tree-id747 . -8) (undo-tree-id748 . -8) (undo-tree-id749 . -14) (undo-tree-id750 . -20) (undo-tree-id751 . -20) (undo-tree-id752 . -20) (undo-tree-id753 . -14) (undo-tree-id754 . -14) (undo-tree-id755 . -20) 1574) nil (25672 16087 651431 589000) 0 nil])
([nil nil ((1588 . 1596) (#(" " 0 1 (fontified nil)) . 1588) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (1587 . 1588) (1579 . 1587) (t 25672 16087 668598 282000)) nil (25672 16092 706893 264000) 0 nil])
([nil nil ((#("        = list()
" 0 8 (fontified t) 8 10 (fontified t) 10 14 (face font-lock-builtin-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 17 (fontified t)) . 1588) (undo-tree-id756 . -16) (undo-tree-id757 . 9) (undo-tree-id758 . -17) (undo-tree-id759 . 1) (undo-tree-id760 . -15) (undo-tree-id761 . -14) (undo-tree-id762 . -16) (undo-tree-id763 . -17) (undo-tree-id764 . -15) (undo-tree-id765 . -7) (undo-tree-id766 . -16) (undo-tree-id767 . -8) (undo-tree-id768 . -8) (undo-tree-id769 . -8) (undo-tree-id770 . -8) (undo-tree-id771 . -7) (undo-tree-id772 . -7) (undo-tree-id773 . -7) (undo-tree-id774 . -17) 1595) nil (25672 16092 706882 555000) 0 nil])
([nil nil ((#("            msg = self._inbox.popleft()
" 0 12 (fontified t) 12 15 (face font-lock-variable-name-face fontified t) 15 17 (fontified t) 17 18 (fontified t) 18 22 (face font-lock-keyword-face fontified t) 22 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 40 (fontified t)) . 1258) (undo-tree-id778 . -22) (undo-tree-id779 . -39) (undo-tree-id780 . -40) (undo-tree-id781 . -22) (undo-tree-id782 . -22) (undo-tree-id783 . -22) (undo-tree-id784 . -22) (undo-tree-id785 . -22) (undo-tree-id786 . -18) (undo-tree-id787 . -22) (undo-tree-id788 . -22) (undo-tree-id789 . -40) 1280 (t 25672 16092 732541 549000)) nil (25672 16103 517809 819000) 0 nil])
([nil nil ((464 . 466) (#("e" 0 1 (fontified t)) . -464) (undo-tree-id952 . -1) 465 (464 . 465) (#("e" 0 1 (fontified t)) . -464) (undo-tree-id953 . -1) 465 (454 . 465) (t 25672 16103 532420 512000)) nil (25672 16328 216706 227000) 0 nil])
([nil nil ((694 . 702) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -694) (undo-tree-id951 . -1) (693 . 695) (676 . 693) 675) nil (25672 16328 216701 348000) 0 nil])
([nil nil ((#("                " 0 16 (fontified nil)) . -723) (703 . 723) 727) nil (25672 16328 216698 96000) 0 nil])
([nil nil ((#("msg" 0 3 (fontified t)) . 743) (undo-tree-id947 . -2) (undo-tree-id948 . -3) (undo-tree-id949 . -3) (undo-tree-id950 . -3)) nil (25672 16328 216696 77000) 0 nil])
([nil nil ((#("                self._inbox = list()
" 0 16 (fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 30 (fontified t) 30 34 (face font-lock-builtin-face fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 37 (fontified t)) . 640) (undo-tree-id931 . -35) (undo-tree-id932 . -35) (undo-tree-id933 . -35) (undo-tree-id934 . -36) (undo-tree-id935 . -35) (undo-tree-id936 . -34) (undo-tree-id937 . -35) (undo-tree-id938 . -35) (undo-tree-id939 . -37) (undo-tree-id940 . -35) (undo-tree-id941 . -35) (undo-tree-id942 . -35) (undo-tree-id943 . 3) (undo-tree-id944 . -35) (undo-tree-id945 . 2) (undo-tree-id946 . -36) 675) nil (25672 16328 216690 131000) 0 nil])
([nil nil ((1533 . 1537) (#(" " 0 1 (fontified t)) . -1533) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) 1534 (1530 . 1534) (#("    " 0 4 (fontified t)) . -1530) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) 1534 (#("    " 0 4 (fontified t)) . -1534) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) 1538 (1521 . 1538) 1496) nil (25672 16328 216672 354000) 0 nil])
([nil nil ((#("        msgs = 
" 0 8 (fontified t) 8 12 (face font-lock-variable-name-face fontified t) 12 15 (fontified t) 15 16 (fontified t)) . 1522) (undo-tree-id870 . -16) (undo-tree-id871 . -15) (undo-tree-id872 . 1) (undo-tree-id873 . -16) (undo-tree-id874 . -16) (undo-tree-id875 . -14) (undo-tree-id876 . -16) (undo-tree-id877 . -16) (undo-tree-id878 . -16) (undo-tree-id879 . -8) (undo-tree-id880 . -8) (undo-tree-id881 . -8) (undo-tree-id882 . -8) (undo-tree-id883 . -8) (undo-tree-id884 . -8) (undo-tree-id885 . -8) (undo-tree-id886 . -8) (undo-tree-id887 . -8) (undo-tree-id888 . -8) (undo-tree-id889 . -9) (undo-tree-id890 . -8) (undo-tree-id891 . -10) (undo-tree-id892 . -9) (undo-tree-id893 . -11) (undo-tree-id894 . -10) (undo-tree-id895 . -11) (undo-tree-id896 . -11) (undo-tree-id897 . -11) (undo-tree-id898 . -11) (undo-tree-id899 . -12) (undo-tree-id900 . -11) (undo-tree-id901 . -13) (undo-tree-id902 . -12) (undo-tree-id903 . -14) (undo-tree-id904 . -13) (undo-tree-id905 . -15) (undo-tree-id906 . -14) (undo-tree-id907 . -15) (undo-tree-id908 . -14) (undo-tree-id909 . -14) (undo-tree-id910 . -14) (undo-tree-id911 . -16) 1536) nil (25672 16328 216651 689000) 0 nil])
([nil nil ((1212 . 1226) (#("changed " 0 3 (fontified t) 3 7 (fontified t) 7 8 (fontified t)) . -1212) (undo-tree-id855 . -8) (undo-tree-id856 . -8) (undo-tree-id857 . -8) (undo-tree-id858 . -8) (undo-tree-id859 . -8) 1220 (#("= " 0 2 (fontified t)) . -1220) (undo-tree-id860 . -2) (undo-tree-id861 . -2) (undo-tree-id862 . -2) (undo-tree-id863 . -2) (undo-tree-id864 . -2) 1222 (#("False" 0 5 (face font-lock-constant-face fontified t)) . -1222) (undo-tree-id865 . -5) (undo-tree-id866 . -5) (undo-tree-id867 . -5) (undo-tree-id868 . -5) (undo-tree-id869 . -5) 1227) nil (25672 16328 216609 139000) 0 nil])
([nil nil ((1409 . 1410) (1394 . 1409) (1381 . 1394) 1376) nil (25672 16328 216594 889000) 0 nil])
([nil nil ((#("            changed = True
" 0 12 (fontified t) 12 19 (face font-lock-variable-name-face fontified t) 19 22 (fontified t) 22 26 (face font-lock-constant-face fontified t) 26 27 (fontified t)) . 1355) (undo-tree-id844 . -26) (undo-tree-id845 . -25) (undo-tree-id846 . -27) (undo-tree-id847 . -21) (undo-tree-id848 . -27) (undo-tree-id849 . -12) (undo-tree-id850 . -12) (undo-tree-id851 . -21) (undo-tree-id852 . -25) (undo-tree-id853 . -25) (undo-tree-id854 . -27) 1380) nil (25672 16328 216592 260000) 0 nil])
([nil nil ((#("            list.append(msg)
" 0 12 (fontified t) 12 16 (face font-lock-builtin-face fontified t) 16 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (fontified t)) . 1355) (undo-tree-id790 . -28) (undo-tree-id791 . 1) (undo-tree-id792 . -27) (undo-tree-id793 . -25) (undo-tree-id794 . -29) (undo-tree-id795 . -12) (undo-tree-id796 . -12) (undo-tree-id797 . -13) (undo-tree-id798 . -12) (undo-tree-id799 . -14) (undo-tree-id800 . -13) (undo-tree-id801 . -15) (undo-tree-id802 . -14) (undo-tree-id803 . -16) (undo-tree-id804 . -15) (undo-tree-id805 . -17) (undo-tree-id806 . -16) (undo-tree-id807 . -18) (undo-tree-id808 . -17) (undo-tree-id809 . -19) (undo-tree-id810 . -18) (undo-tree-id811 . -20) (undo-tree-id812 . -19) (undo-tree-id813 . 1) (undo-tree-id814 . -21) (undo-tree-id815 . -20) (undo-tree-id816 . -22) (undo-tree-id817 . -21) (undo-tree-id818 . -23) (undo-tree-id819 . -22) (undo-tree-id820 . -24) (undo-tree-id821 . -23) (undo-tree-id822 . -24) (undo-tree-id823 . -25) (undo-tree-id824 . -24) (undo-tree-id825 . -26) (undo-tree-id826 . -25) (undo-tree-id827 . -27) (undo-tree-id828 . -26) (undo-tree-id829 . -28) (undo-tree-id830 . -28) (undo-tree-id831 . -28) (undo-tree-id832 . -27) (undo-tree-id833 . -27) (undo-tree-id834 . -27) (undo-tree-id835 . -28) (undo-tree-id836 . -25) (undo-tree-id837 . -25) (undo-tree-id838 . -25) (undo-tree-id839 . -28) (undo-tree-id840 . -24) (undo-tree-id841 . -27) (undo-tree-id842 . -25) (undo-tree-id843 . -29) 1380) nil (25672 16328 216578 462000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1505 . 1506) (#("
" 0 1 (fontified nil)) . -1522) (1493 . 1523) 1485) nil (25672 16328 216451 87000) 0 nil])
([nil nil ((#("            list.append(msg)
" 0 11 (fontified t) 11 12 (fontified t rear-nonsticky t) 12 16 (face font-lock-builtin-face fontified t) 16 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (fontified t)) . 1494) (undo-tree-id954 . -28) (undo-tree-id955 . -29) (undo-tree-id956 . -28) (undo-tree-id957 . -29) (undo-tree-id958 . -29) (undo-tree-id959 . -29) (undo-tree-id960 . -29) (undo-tree-id961 . -29) (undo-tree-id962 . -29) (undo-tree-id963 . -29) (undo-tree-id964 . -29) (undo-tree-id965 . -29) (undo-tree-id966 . -29) (undo-tree-id967 . -29) (undo-tree-id968 . -29) (undo-tree-id969 . -29) (undo-tree-id970 . -29) (undo-tree-id971 . -29) (undo-tree-id972 . -29) (undo-tree-id973 . -29) (undo-tree-id974 . -29) (undo-tree-id975 . -29) (undo-tree-id976 . -29) (undo-tree-id977 . -29) (undo-tree-id978 . -29) (undo-tree-id979 . -29) (undo-tree-id980 . -29) (undo-tree-id981 . -29) (undo-tree-id982 . -29) (undo-tree-id983 . -29) (undo-tree-id984 . -29) (undo-tree-id985 . -29) (undo-tree-id986 . -29) (undo-tree-id987 . -29) (undo-tree-id988 . -29) (undo-tree-id989 . -29) (undo-tree-id990 . -12) (undo-tree-id991 . -12) (undo-tree-id992 . -12) (undo-tree-id993 . -12) (undo-tree-id994 . -12) (undo-tree-id995 . -12) (undo-tree-id996 . -29) (undo-tree-id997 . -29) (undo-tree-id998 . -12) (undo-tree-id999 . -12) (undo-tree-id1000 . -12) (undo-tree-id1001 . -12) (undo-tree-id1002 . -12) (undo-tree-id1003 . -12) (undo-tree-id1004 . -12) (undo-tree-id1005 . -29) 1506 (t 25672 16328 237888 952000)) nil (25672 16337 62942 218000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1383) (1354 . 1384) 1342) nil (25672 16337 62815 343000) 0 nil])
([nil nil ((1566 . 1571) (#("changed" 0 7 (fontified t)) . 1566) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . 4) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -6) (t 25672 16337 77788 916000)) nil (25672 16400 8521 664000) 0 nil])
([nil nil ((1182 . 1189) (#("check" 0 5 (face font-lock-function-name-face fontified t)) . 1182) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -5) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) (undo-tree-id1017 . -4) (undo-tree-id1018 . -4) (undo-tree-id1019 . -4) (undo-tree-id1020 . -4) (undo-tree-id1021 . -5) (undo-tree-id1022 . -4) (undo-tree-id1023 . -5) (undo-tree-id1024 . -5) (undo-tree-id1025 . -5) 1187 (t 25672 16400 41075 677000)) nil (25672 16417 959887 369000) 0 nil])
([nil nil ((734 . 735) (t 25672 16417 976872 280000)) nil (25672 16744 17730 305000) 0 nil])
([nil nil ((1178 . 1191) (1172 . 1178) (1164 . 1172) (#("f" 0 1 (fontified t)) . -1164) (undo-tree-id120 . -1) (1158 . 1165) (1155 . 1158) (#("i" 0 1 (fontified t)) . -1155) (undo-tree-id121 . -1) 1156 (1155 . 1156) (1142 . 1155) (1122 . 1142) (t 25672 16744 37160 494000)) nil (25672 17090 1985 564000) 0 nil])
([nil nil ((932 . 939) (930 . 932)) nil (25672 17090 1980 158000) 0 nil])
([nil nil ((#(", **kwargs" 0 2 (fontified t) 2 10 (fontified t)) . 937) (undo-tree-id90 . -9) (undo-tree-id91 . 8) (undo-tree-id92 . 8) (undo-tree-id93 . -1) (undo-tree-id94 . -2) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -4) (undo-tree-id102 . -10) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -10) (undo-tree-id111 . -4) (undo-tree-id112 . -3) (undo-tree-id113 . -4) (undo-tree-id114 . -2) (undo-tree-id115 . -3) (undo-tree-id116 . -1) (undo-tree-id117 . -2) (undo-tree-id118 . -1) (undo-tree-id119 . -10)) nil (25672 17090 1976 321000) 0 nil])
([nil nil ((1140 . 1145)) nil (25672 17090 1588 913000) 0 nil])
([nil nil ((916 . 933)) nil (25672 17090 1587 874000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1130) (undo-tree-id84 . -8) (undo-tree-id85 . -8) (undo-tree-id86 . -8) (undo-tree-id87 . -8) (undo-tree-id88 . -8) (undo-tree-id89 . -8) 1138 (1129 . 1138) 1084) nil (25672 17090 1586 250000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1130) (undo-tree-id80 . 1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1)) nil (25672 17090 1579 647000) 0 nil])
([nil nil ((1165 . 1183) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -1165) (undo-tree-id79 . -1) (1162 . 1166)) nil (25672 17090 1574 946000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -1229) (1221 . 1229) 1273) nil (25672 17090 1572 61000) 0 nil])
([nil nil ((#("not ask.reply and " 0 3 (fontified t face font-lock-keyword-face) 3 14 (fontified t) 14 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t)) . 1144) (undo-tree-id60 . -17) (undo-tree-id61 . -17) (undo-tree-id62 . -17) (undo-tree-id63 . -17) (undo-tree-id64 . -18) (undo-tree-id65 . -17) (undo-tree-id66 . -4) (undo-tree-id67 . -7) (undo-tree-id68 . -4) (undo-tree-id69 . -8) (undo-tree-id70 . -7) (undo-tree-id71 . -14) (undo-tree-id72 . -8) (undo-tree-id73 . -18) (undo-tree-id74 . -14) (undo-tree-id75 . -17) (undo-tree-id76 . -18) (undo-tree-id77 . -17) (undo-tree-id78 . -18) 1161) nil (25672 17090 1569 53000) 0 nil])
([nil nil ((1209 . 1215) (1192 . 1209) (1182 . 1192) (1180 . 1182) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -1180) (undo-tree-id59 . -1) (1179 . 1181) (1166 . 1179) 1144) nil (25672 17090 1551 79000) 0 nil])
([nil nil ((#("        return ask.replied(expiration=expiration, **kwargs)
" 0 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-1-face)) 59 60 (fontified t)) . 1252) (undo-tree-id34 . -59) (undo-tree-id35 . -16) (undo-tree-id36 . -16) (undo-tree-id37 . -16) (undo-tree-id38 . -16) (undo-tree-id39 . -16) (undo-tree-id40 . -60) (undo-tree-id41 . -16) (undo-tree-id42 . -52) (undo-tree-id43 . -58) (undo-tree-id44 . -21) (undo-tree-id45 . -52) (undo-tree-id46 . -52) (undo-tree-id47 . -48) (undo-tree-id48 . -60) (undo-tree-id49 . -52) (undo-tree-id50 . -48) (undo-tree-id51 . -52) (undo-tree-id52 . -52) (undo-tree-id53 . -52) (undo-tree-id54 . -52) (undo-tree-id55 . -58) (undo-tree-id56 . -21) (undo-tree-id57 . -21) (undo-tree-id58 . -60) 1273) nil (25672 17090 1545 793000) 0 nil])
([nil nil ((1260 . 1273) (#("    " 0 4 (fontified t)) . -1260) (undo-tree-id33 . -4) 1264 (1251 . 1264) 1216) nil (25672 17090 1440 347000) 0 nil])
([nil nil ((1266 . 1278) (#("Timeou" 0 6 (fontified nil)) . -1266) (1266 . 1272) (#("TimeoutError" 0 12 (fontified nil)) . -1266) (1266 . 1278) (#("Timeou" 0 6 (fontified t)) . -1266) (undo-tree-id22 . -6) (undo-tree-id23 . -4) (undo-tree-id24 . -3) (undo-tree-id25 . -5) (undo-tree-id26 . -4) (undo-tree-id27 . -6) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -6) (undo-tree-id31 . -6) (undo-tree-id32 . -6) 1272) nil (25672 17090 1434 396000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -1278) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . 1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -1279) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 1280 (1279 . 1280) (1278 . 1279) (#("t" 0 1 (fontified t)) . -1278) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 1279) nil (25672 17090 1415 953000) 0 nil])
([nil nil ((1278 . 1280) (t 25672 17090 17439 142000)) nil (25672 17095 250322 23000) 0 nil])
([nil nil ((1297 . 1298) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1297) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) 1298 (1285 . 1298) (#("s" 0 1 (fontified t face font-lock-string-face)) . -1285) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -1286) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 1287 (1280 . 1287) (#("Waiting " 0 8 (fontified t face font-lock-string-face)) . -1280) (undo-tree-id138 . -8) (undo-tree-id139 . -1) (undo-tree-id140 . -2) (undo-tree-id141 . -1) (undo-tree-id142 . -3) (undo-tree-id143 . -2) (undo-tree-id144 . -4) (undo-tree-id145 . -3) (undo-tree-id146 . -5) (undo-tree-id147 . -4) (undo-tree-id148 . -6) (undo-tree-id149 . -5) (undo-tree-id150 . -7) (undo-tree-id151 . -6) (undo-tree-id152 . -8) (undo-tree-id153 . -7) (undo-tree-id154 . -8) (undo-tree-id155 . -8) (undo-tree-id156 . -8) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -8) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -8) (undo-tree-id170 . -8) 1288 (#("for " 0 4 (fontified t face font-lock-string-face)) . -1288) (undo-tree-id171 . -4) (undo-tree-id172 . -1) (undo-tree-id173 . -2) (undo-tree-id174 . -3) (undo-tree-id175 . -2) (undo-tree-id176 . -4) (undo-tree-id177 . -3) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) 1292 (#("a " 0 2 (fontified t face font-lock-string-face)) . -1292) (undo-tree-id185 . -2) (undo-tree-id186 . -1) (undo-tree-id187 . -2) (undo-tree-id188 . -1) (undo-tree-id189 . -2) 1294 (1288 . 1294) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1288) (undo-tree-id190 . -1) (1279 . 1289) (t 25672 17095 273401 668000)) nil (25672 17355 825472 537000) 0 nil])
([nil nil ((nil rear-nonsticky nil 779 . 780) (#("
" 0 1 (fontified nil)) . -819) (771 . 820) 770) nil (25672 17355 825403 653000) 0 nil])
([nil nil ((803 . 810) (#("reply" 0 5 (fontified t face font-lock-string-face)) . 803) (undo-tree-id122 . -4) (undo-tree-id123 . -5) (undo-tree-id124 . -5)) nil (25672 17355 825396 677000) 0 nil])
([nil nil ((759 . 1294) (#("delay(delay)
        raise TimeoutError(\"No message received\")

    def tell(self, msg, sender=None):
        self._inbox.append(Tell(timestamp=self.now, payload=msg, sender=sender))

    def ask(self, msg, expiration=None, timeout=None, delay=1):
        ask = Ask(timestamp=self.now, payload=msg, sender=self)
        self._inbox.append(ask)
        expiration = float(\"inf\") if timeout is None else self.now + timeout
        while self.now < expiration:
            if ask.reply:
                return
            yield self.delay" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t) 13 20 (fontified t) 20 21 (fontified t rear-nonsticky t) 21 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 39 (fontified t face font-lock-type-face) 39 40 (fontified t face (rainbow-delimiters-depth-1-face)) 40 41 (fontified t syntax-table (15) face font-lock-string-face) 41 60 (fontified t face font-lock-string-face) 60 61 (fontified t syntax-table (15) face font-lock-string-face) 61 62 (fontified t face (rainbow-delimiters-depth-1-face)) 62 63 (fontified t) 63 68 (fontified t) 68 71 (fontified t face font-lock-keyword-face) 71 72 (fontified t) 72 76 (fontified t face font-lock-function-name-face) 76 77 (fontified t face (rainbow-delimiters-depth-1-face)) 77 81 (fontified t face font-lock-keyword-face) 81 95 (fontified t) 95 99 (fontified t face font-lock-constant-face) 99 100 (fontified t face (rainbow-delimiters-depth-1-face)) 100 110 (fontified t) 110 114 (fontified t face font-lock-keyword-face) 114 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-1-face)) 129 133 (fontified t) 133 134 (fontified t face (rainbow-delimiters-depth-2-face)) 134 144 (fontified t) 144 148 (fontified t face font-lock-keyword-face) 148 180 (fontified t) 180 181 (fontified t face (rainbow-delimiters-depth-2-face)) 181 182 (fontified t face (rainbow-delimiters-depth-1-face)) 182 184 (fontified t) 184 188 (fontified t) 188 191 (fontified t face font-lock-keyword-face) 191 192 (fontified t) 192 195 (fontified t face font-lock-function-name-face) 195 196 (fontified t face (rainbow-delimiters-depth-1-face)) 196 200 (fontified t face font-lock-keyword-face) 200 218 (fontified t) 218 222 (fontified t face font-lock-constant-face) 222 232 (fontified t) 232 236 (fontified t face font-lock-constant-face) 236 238 (fontified t) 238 244 (fontified t) 244 245 (fontified t face highlight-numbers-number) 245 246 (fontified t face (rainbow-delimiters-depth-1-face)) 246 248 (fontified t) 248 256 (fontified t) 256 259 (fontified t face font-lock-variable-name-face) 259 265 (fontified t) 265 266 (fontified t face (rainbow-delimiters-depth-1-face)) 266 276 (fontified t) 276 280 (fontified t face font-lock-keyword-face) 280 306 (fontified t) 306 309 (fontified t face font-lock-keyword-face) 309 310 (fontified t face font-lock-keyword-face) 310 311 (fontified t face (rainbow-delimiters-depth-1-face)) 311 320 (fontified t) 320 324 (fontified t face font-lock-keyword-face) 324 338 (fontified t) 338 339 (fontified t face (rainbow-delimiters-depth-1-face)) 339 342 (fontified t) 342 343 (fontified t face (rainbow-delimiters-depth-1-face)) 343 344 (fontified t) 344 352 (fontified t) 352 362 (fontified t face font-lock-variable-name-face) 362 365 (fontified t) 365 370 (fontified t face font-lock-builtin-face) 370 371 (fontified t face (rainbow-delimiters-depth-1-face)) 371 372 (syntax-table (15) fontified t face font-lock-string-face) 372 375 (fontified t face font-lock-string-face) 375 376 (syntax-table (15) fontified t face font-lock-string-face) 376 377 (fontified t face (rainbow-delimiters-depth-1-face)) 377 378 (fontified t) 378 380 (fontified t face font-lock-keyword-face) 380 389 (fontified t) 389 391 (fontified t face font-lock-keyword-face) 391 392 (fontified t) 392 396 (fontified t face font-lock-constant-face) 396 397 (fontified t) 397 401 (fontified t face font-lock-keyword-face) 401 402 (fontified t) 402 406 (fontified t face font-lock-keyword-face) 406 420 (fontified t) 420 421 (fontified t) 421 429 (fontified t) 429 434 (fontified t face font-lock-keyword-face) 434 435 (fontified t) 435 439 (fontified t face font-lock-keyword-face) 439 456 (fontified t) 456 457 (fontified t) 457 458 (fontified t) 458 470 (fontified t) 470 472 (fontified t face font-lock-keyword-face) 472 473 (fontified t) 473 484 (fontified t) 484 500 (fontified t) 500 506 (fontified t face font-lock-keyword-face) 506 507 (fontified t) 507 519 (fontified t) 519 524 (fontified t face font-lock-keyword-face) 524 525 (fontified t) 525 529 (fontified t face font-lock-keyword-face) 529 535 (fontified t)) . 759) (undo-tree-id209 . -506) (undo-tree-id210 . 484) (undo-tree-id211 . -505) (undo-tree-id212 . -237) (undo-tree-id213 . -245) (undo-tree-id214 . -245) (undo-tree-id215 . -505) (undo-tree-id216 . -506) (undo-tree-id217 . -505) (undo-tree-id218 . -505) (t 25672 17355 843323 548000)) nil (25672 20420 803614 621000) 0 nil])
([nil nil ((#("from ..time import BaseCond
" 0 4 (fontified t face font-lock-keyword-face) 4 12 (fontified t) 12 18 (fontified t face font-lock-keyword-face) 18 28 (fontified t)) . 75) (undo-tree-id191 . -19) (undo-tree-id192 . -27) (undo-tree-id193 . -19) (undo-tree-id194 . -19) (undo-tree-id195 . -28) (undo-tree-id196 . -19) (undo-tree-id197 . -27) (undo-tree-id198 . -19) (undo-tree-id199 . -19) (undo-tree-id200 . -19) (undo-tree-id201 . -19) (undo-tree-id202 . -19) (undo-tree-id203 . -19) (undo-tree-id204 . -19) (undo-tree-id205 . -19) (undo-tree-id206 . -19) (undo-tree-id207 . -19) (undo-tree-id208 . -28) 94 (t 25672 18394 852948 718000)) nil (25672 20420 803597 522000) 0 nil])
([nil nil ((1518 . 1523) (#("list" 0 2 (fontified t face font-lock-builtin-face) 2 4 (fontified t face font-lock-builtin-face)) . 1518) (undo-tree-id219 . -3) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (t 25672 20420 818334 602000)) nil (25672 24460 652004 915000) 0 nil])
([nil nil ((758 . 766) (#("TimeoutError" 0 12 (fontified t face font-lock-type-face)) . 758) (undo-tree-id242 . -11) (undo-tree-id243 . -12) (undo-tree-id244 . -12) (t 25672 20916 261461 502000)) nil (25672 24471 525731 66000) 0 nil] [nil nil ((758 . 772) (#("TimeoutError" 0 12 (fontified t face font-lock-type-face)) . 758) (undo-tree-id222 . -11) (undo-tree-id223 . -6) (undo-tree-id224 . -12) (undo-tree-id225 . -12) (t 25672 20916 261461 502000)) ((758 . 770) (#("events.Timeout" 0 14 (fontified t)) . 758) (undo-tree-id226 . -13) (undo-tree-id227 . -7) (undo-tree-id228 . -13) (undo-tree-id229 . -13) (undo-tree-id230 . -13) (undo-tree-id231 . -6)) (25672 24460 639377 315000) 0 nil])
([nil nil ((1284 . 1292) (#("TimeoutError" 0 6 (fontified t face font-lock-type-face) 6 12 (fontified t face font-lock-type-face)) . 1284) (undo-tree-id232 . -11) (undo-tree-id233 . -7) (undo-tree-id234 . -6) (undo-tree-id235 . -7) (undo-tree-id236 . -6) (undo-tree-id237 . -7) (undo-tree-id238 . -6) (undo-tree-id239 . -7) (undo-tree-id240 . -12) (undo-tree-id241 . -12)) nil (25672 24471 525720 941000) 0 nil])
nil
([nil nil ((663 . 670) (#("check" 0 5 (fontified t)) . 663) (undo-tree-id245 . -4) (undo-tree-id246 . -5) (undo-tree-id247 . -5) (t 25672 24471 543710 733000)) nil (25672 24678 819112 346000) 0 nil])
([nil nil ((429 . 435) (#("o" 0 1 (fontified t)) . -429) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 430 (428 . 430) (#("check" 0 5 (fontified t)) . 428) (undo-tree-id259 . -4) (undo-tree-id260 . -5) (undo-tree-id261 . -5) (undo-tree-id262 . -5) (t 25672 24678 837597 254000)) nil (25672 24693 953118 355000) 0 nil])
([nil current ((633 . 640) (#("check" 0 5 (fontified t)) . 633) (undo-tree-id248 . -4) (undo-tree-id249 . -5) (undo-tree-id250 . -5) (undo-tree-id251 . -5) (undo-tree-id252 . -5) (undo-tree-id253 . -5) (undo-tree-id254 . -5) (undo-tree-id255 . -5)) nil (25672 24693 953104 728000) 0 nil])
nil
