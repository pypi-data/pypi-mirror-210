(undo-tree-save-format-version . 1)
"40ef80018c3f1bb86c5b877d3de95132e5164c22"
[nil nil nil nil (25671 16941 931640 534000) 0 nil]
([nil nil ((250 . 251) (#(" " 0 1 (fontified t)) . 250) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1)) ((250 . 251) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 250) (undo-tree-id128 . -1) (undo-tree-id129 . -1)) (25671 16944 49595 66000) 0 nil])
([nil nil ((260 . 298) (#("Shou" 0 4 (fontified nil face font-lock-string-face)) . 260) (undo-tree-id150 . -4) (257 . 264)) ((#(", \"" 0 2 (fontified nil) 2 3 (fontified nil syntax-table (15) face font-lock-string-face)) . 257) (undo-tree-id68 . 3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . 3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (#("Shou" 0 4 (fontified nil face font-lock-string-face)) . 260) (undo-tree-id89 . -4) (260 . 264) (#("Network agents should" 0 21 (fontified nil face font-lock-string-face)) . 260) (undo-tree-id90 . -21) (undo-tree-id91 . -21) (undo-tree-id92 . -21) (undo-tree-id93 . -21) (undo-tree-id94 . -21) (undo-tree-id95 . -21) (undo-tree-id96 . -21) (undo-tree-id97 . -21) (undo-tree-id98 . -21) (undo-tree-id99 . -21) (undo-tree-id100 . -21) (undo-tree-id101 . -21) (undo-tree-id102 . -21) (undo-tree-id103 . -21) (undo-tree-id104 . -21) (undo-tree-id105 . -21) (undo-tree-id106 . -21) (undo-tree-id107 . -21) (undo-tree-id108 . -21) (#(" have a network\")" 0 15 (fontified t face font-lock-string-face) 15 16 (fontified t syntax-table (15) face font-lock-string-face) 16 17 (fontified t face (rainbow-delimiters-depth-1-face))) . 281) (undo-tree-id109 . -16) (undo-tree-id110 . -16) (undo-tree-id111 . -16) (undo-tree-id112 . -16) (undo-tree-id113 . -16) (undo-tree-id114 . -16) (undo-tree-id115 . -16) (undo-tree-id116 . -15) (undo-tree-id117 . -15) (undo-tree-id118 . -15) (undo-tree-id119 . -15) (undo-tree-id120 . -15) (undo-tree-id121 . -15) (undo-tree-id122 . -15) (undo-tree-id123 . -16) (undo-tree-id124 . -16) (undo-tree-id125 . -17) (undo-tree-id126 . -16) (undo-tree-id127 . -16)) (25671 16944 497186 697000) 0 nil])
([nil nil ((250 . 251) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 250) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . 1) (undo-tree-id154 . -1)) ((250 . 251) (#(" " 0 1 (fontified t)) . 250)) (25671 16944 983319 807000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . 297) (undo-tree-id155 . -1) (undo-tree-id156 . 1) (undo-tree-id157 . -1)) ((297 . 298)) (25671 16945 17895 248000) 0 nil])
([nil nil ((261 . 269) (#("ot" 0 1 (fontified nil) 1 2 (fontified nil)) . 261) (undo-tree-id158 . -1) (undo-tree-id159 . -2) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (257 . 263)) ((#(" is ot" 0 1 (fontified nil) 1 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 257) (undo-tree-id36 . -5) (undo-tree-id37 . -6) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (261 . 263) (#("not None" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face)) . 261) (undo-tree-id54 . 1) (undo-tree-id55 . -7) (undo-tree-id56 . -7) (undo-tree-id57 . -7) (undo-tree-id58 . -7) (undo-tree-id59 . -7) (undo-tree-id60 . -7) (undo-tree-id61 . -7) (undo-tree-id62 . -7) (undo-tree-id63 . -7) (undo-tree-id64 . -7) (undo-tree-id65 . -7) (undo-tree-id66 . -7) (undo-tree-id67 . -7) (t 25671 16902 659277 440000)) (25671 16945 48114 886000) 0 nil])
([nil current ((#("        if init:
            self.init()
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 29 (fontified t) 29 33 (fontified t face font-lock-keyword-face) 33 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-1-face)) 39 40 (fontified t face (rainbow-delimiters-depth-1-face)) 40 41 (fontified t)) . 1111) (undo-tree-id163 . -39) (undo-tree-id164 . -40) (undo-tree-id165 . -17) (undo-tree-id166 . -41) (undo-tree-id167 . -39) (undo-tree-id168 . -41) (undo-tree-id169 . -15) (undo-tree-id170 . -39) (undo-tree-id171 . -15) (undo-tree-id172 . -34) (undo-tree-id173 . -38) (undo-tree-id174 . -11) (undo-tree-id175 . -15) (undo-tree-id176 . -11) (undo-tree-id177 . -16) (undo-tree-id178 . -11) (undo-tree-id179 . -11) (undo-tree-id180 . -11) (undo-tree-id181 . -15) (undo-tree-id182 . -15) (undo-tree-id183 . -39) (undo-tree-id184 . -15) (undo-tree-id185 . -39) (undo-tree-id186 . -16) (undo-tree-id187 . -41) (undo-tree-id188 . -39) (undo-tree-id189 . -39) (undo-tree-id190 . -16) (undo-tree-id191 . -39) (undo-tree-id192 . -16) (undo-tree-id193 . -39) (undo-tree-id194 . -16) (undo-tree-id195 . -41) 1127 (t 25671 16902 659277 440000)) nil (25671 16950 97109 879000) 0 nil])
nil
