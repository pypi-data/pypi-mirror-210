(undo-tree-save-format-version . 1)
"f3365459bbc7afbff408e5255a33f863b5b2b75a"
[nil nil nil nil (25701 54788 54025 322000) 0 nil]
([nil nil ((316 . 332) (295 . 316) (#("s" 0 1 (fontified t)) . -295) (undo-tree-id3934 . -1) (#("t" 0 1 (fontified t)) . -296) (undo-tree-id3935 . -1) (#("a" 0 1 (fontified t)) . -297) (undo-tree-id3936 . -1) 298 (294 . 298) (289 . 294) 279) nil (25701 55333 970636 958000) 0 nil] [nil nil ((700 . 715) (#(" ;" 0 1 (fontified nil) 1 2 (fontified nil)) . 700) (700 . 701) (676 . 701)) ((#("
            import pdb;;" 0 1 (fontified t) 1 13 (fontified nil) 13 19 (fontified nil face font-lock-keyword-face) 19 24 (fontified nil) 24 25 (fontified nil)) . 676) (undo-tree-id3796 . -24) (undo-tree-id3797 . -24) (undo-tree-id3798 . -24) (#(" " 0 1 (fontified nil)) . 700) (700 . 702) (#("pdb.set_trace()" 0 4 (fontified t) 4 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 15 (fontified t face (rainbow-delimiters-depth-1-face))) . 700) (undo-tree-id3799 . -14) (undo-tree-id3800 . -14) (undo-tree-id3801 . -15)) (25701 54788 14055 455000) 0 nil])
([nil nil ((#("    _coroutine = None
    _last_return = None
    _last_except = None
" 0 4 (fontified t) 4 14 (fontified t face font-lock-variable-name-face) 14 17 (fontified t) 17 21 (fontified t face font-lock-constant-face) 21 22 (fontified t) 22 26 (fontified t) 26 38 (fontified t face font-lock-variable-name-face) 38 41 (fontified t) 41 45 (fontified t face font-lock-constant-face) 45 46 (fontified t) 46 50 (fontified t) 50 62 (fontified t face font-lock-variable-name-face) 62 65 (fontified t) 65 69 (fontified t face font-lock-constant-face) 69 70 (fontified t)) . 220) (undo-tree-id3907 . -68) (undo-tree-id3908 . -69) (undo-tree-id3909 . -68) (undo-tree-id3910 . -21) (undo-tree-id3911 . -27) (undo-tree-id3912 . -27) (undo-tree-id3913 . -27) (undo-tree-id3914 . -27) (undo-tree-id3915 . -27) (undo-tree-id3916 . -27) (undo-tree-id3917 . -27) (undo-tree-id3918 . -27) (undo-tree-id3919 . -27) (undo-tree-id3920 . -27) (undo-tree-id3921 . -27) (undo-tree-id3922 . -27) (undo-tree-id3923 . -27) (undo-tree-id3924 . -27) (undo-tree-id3925 . -27) (undo-tree-id3926 . -27) (undo-tree-id3927 . -27) (undo-tree-id3928 . -27) (undo-tree-id3929 . -27) (undo-tree-id3930 . -21) (undo-tree-id3931 . -22) (undo-tree-id3932 . -21) (undo-tree-id3933 . -68) 241) nil (25701 55333 970629 159000) 0 nil])
([nil nil ((1008 . 1009)) ((#("
" 0 1 (fontified t)) . 1008) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1)) (25701 54787 979974 129000) 0 nil])
([nil nil ((428 . 434) (#("s" 0 1 (fontified t)) . -428) (undo-tree-id3904 . -1) (#("t" 0 1 (fontified t)) . -429) (undo-tree-id3905 . -1) (#("a" 0 1 (fontified t)) . -430) (undo-tree-id3906 . -1) 431 (428 . 431) (426 . 428)) nil (25701 55333 970599 220000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . 677) (676 . 689)) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 676) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (677 . 689)) (25701 54787 935460 845000) 0 nil])
([nil nil ((#("coroutine" 0 9 (fontified t face font-lock-variable-name-face)) . 225) (undo-tree-id3903 . -8)) nil (25701 55333 970594 319000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 677) (undo-tree-id2896 . -1)) ((677 . 678)) (25701 54787 923152 0) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-variable-name-face)) . 225)) nil (25701 55333 970592 513000) 0 nil])
([nil nil ((653 . 663) (#("    p" 0 4 (fontified nil) 4 5 (fontified nil)) . 653) (640 . 658)) ((#("
                p" 0 1 (fontified t) 1 13 (fontified nil) 13 17 (fontified nil) 17 18 (fontified nil)) . 640) (undo-tree-id3769 . -13) (undo-tree-id3770 . -13) (undo-tree-id3771 . -13) (undo-tree-id3772 . -13) (undo-tree-id3773 . -13) (undo-tree-id3774 . -13) (undo-tree-id3775 . -13) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -13) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (653 . 658) (#("print(val)" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-1-face))) . 653) (undo-tree-id3781 . -10) (undo-tree-id3782 . -10) (undo-tree-id3783 . -10) (undo-tree-id3784 . -9) (undo-tree-id3785 . -9) (undo-tree-id3786 . -9) (undo-tree-id3787 . -9) (undo-tree-id3788 . -10)) (25701 54787 866679 533000) 0 nil])
([nil nil ((369 . 385) (360 . 369) 337) nil (25701 55333 970591 396000) 0 nil])
([nil nil ((#("            print(val)
" 0 12 (fontified t) 12 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 23 (fontified t)) . 641) (undo-tree-id2897 . -22) (undo-tree-id2898 . -22) (undo-tree-id2899 . -22) (undo-tree-id2900 . -21) (undo-tree-id2901 . -21) (undo-tree-id2902 . -21) (undo-tree-id2903 . -21) (undo-tree-id2904 . -23) (undo-tree-id2905 . -12) (undo-tree-id2907 . -12)) ((641 . 664)) (25701 54787 854326 329000) 0 nil])
([nil nil ((#("        nonlocal _coroutine, _last_return, _last_except
" 0 8 (fontified t) 8 16 (fontified t face font-lock-keyword-face) 16 55 (fontified t) 55 56 (fontified t)) . 305) (undo-tree-id3883 . -55) (undo-tree-id3884 . -30) (undo-tree-id3885 . -30) (undo-tree-id3886 . -30) (undo-tree-id3887 . -30) (undo-tree-id3888 . -30) (undo-tree-id3889 . -30) (undo-tree-id3890 . -30) (undo-tree-id3891 . -30) (undo-tree-id3892 . -30) (undo-tree-id3893 . -30) (undo-tree-id3894 . -30) (undo-tree-id3895 . -30) (undo-tree-id3896 . -30) (undo-tree-id3897 . -30) (undo-tree-id3898 . -30) (undo-tree-id3899 . -30) (undo-tree-id3900 . -30) (undo-tree-id3901 . -23) (undo-tree-id3902 . -56) 328) nil (25701 55333 970588 616000) 0 nil])
([nil nil ((677 . 679) (#("9)" 0 1 (fontified nil) 1 2 (fontified nil face (rainbow-delimiters-unmatched-face))) . 677) (653 . 679) (#("    " 0 4 (fontified nil)) . 653) (640 . 657)) ((#("
                " 0 1 (fontified t) 1 13 (fontified nil) 13 17 (fontified nil)) . 640) (undo-tree-id3756 . -13) (undo-tree-id3757 . -13) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -13) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (653 . 657) (#("import pdb;pdb.set_trace9)" 0 6 (fontified nil face font-lock-keyword-face) 6 21 (fontified nil) 21 24 (fontified nil) 24 25 (fontified nil) 25 26 (fontified nil face (rainbow-delimiters-unmatched-face))) . 653) (undo-tree-id3763 . -24) (undo-tree-id3764 . -24) (undo-tree-id3765 . -24) (677 . 679) (#("()" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 2 (fontified t face (rainbow-delimiters-depth-1-face))) . 677) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -2)) (25701 54787 810962 59000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -369) (undo-tree-id3882 . -11) (361 . 369) 372) nil (25701 55333 970570 363000) 0 nil])
([nil nil ((#("            import pdb;pdb.set_trace()
" 0 12 (fontified t) 12 18 (fontified t face font-lock-keyword-face) 18 33 (fontified t) 33 36 (fontified t) 36 37 (fontified t face (rainbow-delimiters-depth-1-face)) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 39 (fontified t)) . 641) (undo-tree-id2909 . -39) (undo-tree-id2910 . -39) (undo-tree-id2911 . -39) (undo-tree-id2912 . -39) (undo-tree-id2913 . -39) (undo-tree-id2914 . -39) (undo-tree-id2915 . -39) (undo-tree-id2916 . -37) (undo-tree-id2917 . -37) (undo-tree-id2918 . -39) (undo-tree-id2919 . -36) (undo-tree-id2921 . -39) (undo-tree-id2923 . -39) (undo-tree-id2925 . -36) (undo-tree-id2927 . -36)) ((641 . 680)) (25701 54787 784652 550000) 0 nil])
([nil nil ((389 . 395)) nil (25701 55333 970568 172000) 0 nil])
([nil nil ((nil rear-nonsticky nil 227 . 228) (#("
" 0 1 (fontified nil)) . 275) (219 . 276)) ((#("
        nonlocal _coroutine, _last_return, _last_except
" 0 1 (fontified t) 1 8 (fontified nil) 8 9 (fontified nil rear-nonsticky nil) 9 12 (fontified nil face font-lock-keyword-face) 12 17 (fontified nil face font-lock-keyword-face) 17 56 (fontified nil) 56 57 (fontified nil)) . 219) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (275 . 276) (nil rear-nonsticky t 227 . 228)) (25701 54787 751072 207000) 0 nil])
([nil nil ((#("        if _coroutine is None:
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 22 (fontified t) 22 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t) 25 29 (fontified t face font-lock-constant-face) 29 31 (fontified t)) . 330) (undo-tree-id3879 . -30) (undo-tree-id3880 . -29) (undo-tree-id3881 . -31) 359) nil (25701 55333 970566 634000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . 224) (220 . 224)) ((#("    " 0 4 (fontified nil)) . 220) (undo-tree-id3736 . -4) (undo-tree-id3737 . -4) (undo-tree-id3738 . -4) (undo-tree-id3739 . -4) (undo-tree-id3740 . -4) (224 . 232)) (25701 54787 743706 249000) 0 nil])
([nil nil ((423 . 425) (#("1" 0 1 (fontified t face highlight-numbers-number)) . -423) (undo-tree-id3877 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -424) (undo-tree-id3878 . -1) 425 (416 . 425)) nil (25701 55333 970562 702000) 0 nil])
([nil nil ((#("non" 0 3 (fontified t face font-lock-keyword-face)) . 224) (undo-tree-id2930 . -3)) ((224 . 227)) (25701 54787 739366 624000) 0 nil])
([nil nil ((#("last_except" 0 11 (fontified t)) . 425) (undo-tree-id3875 . 11) (undo-tree-id3876 . -10)) nil (25701 55333 970558 974000) 0 nil])
([nil nil ((#("    local _coroutine, _last_return, _last_except
" 0 4 (fontified t) 4 9 (fontified t) 9 48 (fontified t) 48 49 (fontified t)) . 220) (undo-tree-id2932 . -49) (undo-tree-id2933 . -4) (undo-tree-id2935 . -4) (undo-tree-id2937 . -4) (undo-tree-id2939 . -48) (undo-tree-id2941 . -4) (undo-tree-id2943 . -4) (undo-tree-id2945 . -4)) ((220 . 269)) (25701 54787 733904 254000) 0 nil])
([nil nil ((477 . 494) (474 . 477) (#("1" 0 1 (fontified t face highlight-numbers-number)) . -474) (undo-tree-id3874 . -1) 475 (467 . 475)) nil (25701 55333 970555 791000) 0 nil])
([nil nil ((#("    wrapped._coroutine = _coroutine
    wrapped._last_return = _last_return
    wrapped._last_except = _last_except
" 0 4 (fontified t) 4 22 (fontified t face font-lock-variable-name-face) 22 40 (fontified t) 40 60 (fontified t face font-lock-variable-name-face) 60 80 (fontified t) 80 100 (fontified t face font-lock-variable-name-face) 100 116 (fontified t)) . 874) (undo-tree-id2946 . -49) (undo-tree-id2947 . -64)) ((874 . 990)) (25701 54787 728100 321000) 0 nil] [nil nil ((#("
    wrapped._coroutine = _coroutine
    wrapped._last_return = _last_return
    wrapped._last_except = _last_except
" 0 5 (fontified t) 5 23 (fontified t face font-lock-variable-name-face) 23 41 (fontified t) 41 61 (fontified t face font-lock-variable-name-face) 61 81 (fontified t) 81 101 (fontified t face font-lock-variable-name-face) 101 117 (fontified t)) . 873) (undo-tree-id154 . -81) (undo-tree-id155 . -1) (undo-tree-id156 . -116) (undo-tree-id157 . -81) (undo-tree-id158 . -65) (undo-tree-id159 . -76) (undo-tree-id160 . -50) (undo-tree-id161 . -61) (undo-tree-id162 . -50) (undo-tree-id163 . -65) (undo-tree-id164 . -50) (undo-tree-id165 . -65) (undo-tree-id166 . -50) (undo-tree-id167 . -65) (undo-tree-id168 . -50) (undo-tree-id169 . -65) (undo-tree-id170 . -50) (undo-tree-id171 . -65) (undo-tree-id172 . -50) (undo-tree-id173 . -65) (undo-tree-id174 . -50) (undo-tree-id175 . -65) (undo-tree-id176 . -50) (undo-tree-id177 . -65) (undo-tree-id178 . -50) (undo-tree-id179 . -65) (undo-tree-id180 . -50) (undo-tree-id181 . -65) (undo-tree-id182 . -50) (undo-tree-id183 . -65) (undo-tree-id184 . -50) (undo-tree-id185 . -65) (undo-tree-id186 . -50) (undo-tree-id187 . -65) (undo-tree-id188 . -50) (undo-tree-id189 . -65) (undo-tree-id190 . -50) (undo-tree-id191 . -65) (undo-tree-id192 . -50) (undo-tree-id193 . -65) (undo-tree-id194 . -50) (undo-tree-id195 . -50) (undo-tree-id196 . -65) (undo-tree-id197 . -65) (undo-tree-id199 . -1) (undo-tree-id201 . -37) (undo-tree-id203 . -77) (undo-tree-id205 . -117) (undo-tree-id207 . -41) (undo-tree-id209 . -81) (undo-tree-id211 . -81) (undo-tree-id213 . -117) (undo-tree-id215 . -81) (undo-tree-id216 . -81) (undo-tree-id218 . -81) (undo-tree-id220 . -41) (undo-tree-id222 . -117) (t 25701 16698 992272 195000)) ((873 . 990) (t 25701 16733 623929 302000)) (25701 16735 697942 83000) 0 nil])
([nil nil ((#("                last_except)
" 0 16 (fontified t) 16 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-unmatched-face)) 28 29 (fontified t)) . 478) (undo-tree-id3870 . 13) (undo-tree-id3871 . -28) (undo-tree-id3872 . -15) (undo-tree-id3873 . -29) 493) nil (25701 55333 970552 183000) 0 nil])
([nil nil ((236 . 239) (#("f" 0 1 (fontified nil face font-lock-keyword-face)) . 236) (232 . 237) (#("s" 0 1 (fontified nil face font-lock-function-name-face)) . 232) (222 . 233) (#("f" 0 1 (fontified nil face font-lock-keyword-face)) . 222) (214 . 223) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-1-face))) . 214) (199 . 216)) ((#("

class Wrapper()" 0 1 (fontified t) 1 2 (fontified t) 2 7 (fontified nil face font-lock-keyword-face) 7 8 (fontified nil) 8 15 (fontified nil face font-lock-type-face) 15 16 (fontified nil face (rainbow-delimiters-depth-1-face)) 16 17 (fontified nil face (rainbow-delimiters-depth-1-face))) . 199) (undo-tree-id3099 . -15) (undo-tree-id3100 . -15) (undo-tree-id3101 . -15) (undo-tree-id3102 . -15) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -2) (undo-tree-id3106 . -2) (undo-tree-id3107 . -15) (undo-tree-id3108 . -15) (undo-tree-id3109 . -15) (undo-tree-id3110 . -15) (undo-tree-id3111 . -15) (undo-tree-id3112 . -15) (undo-tree-id3113 . -15) (undo-tree-id3114 . -15) (undo-tree-id3115 . -15) (undo-tree-id3116 . -15) (undo-tree-id3117 . -15) (undo-tree-id3118 . -15) (undo-tree-id3119 . -15) (undo-tree-id3120 . -15) (undo-tree-id3121 . -15) (undo-tree-id3122 . -15) (undo-tree-id3123 . -15) (undo-tree-id3124 . -15) (undo-tree-id3125 . -15) (undo-tree-id3126 . -15) (undo-tree-id3127 . -15) (undo-tree-id3128 . -15) (undo-tree-id3129 . -15) (undo-tree-id3130 . -15) (undo-tree-id3131 . -15) (undo-tree-id3132 . -15) (undo-tree-id3133 . -15) (undo-tree-id3134 . -15) (undo-tree-id3135 . -15) (undo-tree-id3136 . -15) (undo-tree-id3137 . -15) (undo-tree-id3138 . -15) (undo-tree-id3139 . -15) (undo-tree-id3140 . -15) (undo-tree-id3141 . -15) (undo-tree-id3142 . -15) (undo-tree-id3143 . -15) (undo-tree-id3144 . -15) (undo-tree-id3145 . -15) (undo-tree-id3146 . -15) (undo-tree-id3147 . -15) (undo-tree-id3148 . -15) (undo-tree-id3149 . -15) (undo-tree-id3150 . -15) (undo-tree-id3151 . -15) (undo-tree-id3152 . -15) (undo-tree-id3153 . -15) (undo-tree-id3154 . -15) (undo-tree-id3155 . -15) (undo-tree-id3156 . -15) (undo-tree-id3157 . -15) (undo-tree-id3158 . -15) (undo-tree-id3159 . -15) (undo-tree-id3160 . -15) (undo-tree-id3161 . -15) (undo-tree-id3162 . -15) (undo-tree-id3163 . -15) (undo-tree-id3164 . -15) (undo-tree-id3165 . -15) (undo-tree-id3166 . -15) (undo-tree-id3167 . -15) (undo-tree-id3168 . -15) (undo-tree-id3169 . -15) (undo-tree-id3170 . -15) (undo-tree-id3171 . -15) (undo-tree-id3172 . -15) (undo-tree-id3173 . -15) (undo-tree-id3174 . -15) (undo-tree-id3175 . -15) (undo-tree-id3176 . -15) (undo-tree-id3177 . -15) (undo-tree-id3178 . -15) (undo-tree-id3179 . -15) (undo-tree-id3180 . -15) (undo-tree-id3181 . -15) (undo-tree-id3182 . -15) (undo-tree-id3183 . -15) (undo-tree-id3184 . -15) (undo-tree-id3185 . -15) (undo-tree-id3186 . -15) (undo-tree-id3187 . -15) (undo-tree-id3188 . -15) (undo-tree-id3189 . -15) (undo-tree-id3190 . -15) (undo-tree-id3191 . -15) (undo-tree-id3192 . -15) (undo-tree-id3193 . -15) (undo-tree-id3194 . -15) (undo-tree-id3195 . -15) (undo-tree-id3196 . -15) (undo-tree-id3197 . -15) (undo-tree-id3198 . -15) (undo-tree-id3199 . -15) (undo-tree-id3200 . -15) (undo-tree-id3201 . -15) (undo-tree-id3202 . -15) (undo-tree-id3203 . -15) (undo-tree-id3204 . -15) (undo-tree-id3205 . -15) (undo-tree-id3206 . -15) (undo-tree-id3207 . -15) (undo-tree-id3208 . -15) (undo-tree-id3209 . -15) (undo-tree-id3210 . -15) (undo-tree-id3211 . -15) (undo-tree-id3212 . -15) (undo-tree-id3213 . -15) (undo-tree-id3214 . -15) (undo-tree-id3215 . -15) (undo-tree-id3216 . -15) (undo-tree-id3217 . -15) (undo-tree-id3218 . -15) (undo-tree-id3219 . -15) (undo-tree-id3220 . -15) (undo-tree-id3221 . -15) (undo-tree-id3222 . -15) (undo-tree-id3223 . -15) (undo-tree-id3224 . -15) (undo-tree-id3225 . -15) (undo-tree-id3226 . -15) (undo-tree-id3227 . -15) (undo-tree-id3228 . -15) (undo-tree-id3229 . -15) (undo-tree-id3230 . -15) (undo-tree-id3231 . -15) (undo-tree-id3232 . -15) (214 . 216) (#(":
    def" 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified nil) 6 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil face font-lock-keyword-face)) . 214) (undo-tree-id3233 . -8) (undo-tree-id3234 . -8) (undo-tree-id3235 . -8) (undo-tree-id3236 . -8) (undo-tree-id3237 . -2) (undo-tree-id3238 . -2) (undo-tree-id3239 . -8) (undo-tree-id3240 . -8) (undo-tree-id3241 . -8) (undo-tree-id3242 . -8) (undo-tree-id3243 . -8) (undo-tree-id3244 . -8) (undo-tree-id3245 . -8) (undo-tree-id3246 . -8) (undo-tree-id3247 . -8) (undo-tree-id3248 . -8) (undo-tree-id3249 . -8) (undo-tree-id3250 . -8) (undo-tree-id3251 . -8) (undo-tree-id3252 . -8) (undo-tree-id3253 . -8) (undo-tree-id3254 . -8) (undo-tree-id3255 . -8) (undo-tree-id3256 . -8) (undo-tree-id3257 . -8) (undo-tree-id3258 . -8) (undo-tree-id3259 . -8) (undo-tree-id3260 . -8) (undo-tree-id3261 . -8) (undo-tree-id3262 . -8) (undo-tree-id3263 . -8) (undo-tree-id3264 . -8) (undo-tree-id3265 . -8) (undo-tree-id3266 . -8) (undo-tree-id3267 . -8) (undo-tree-id3268 . -8) (undo-tree-id3269 . -8) (undo-tree-id3270 . -8) (undo-tree-id3271 . -8) (undo-tree-id3272 . -8) (undo-tree-id3273 . -8) (undo-tree-id3274 . -8) (undo-tree-id3275 . -8) (undo-tree-id3276 . -8) (undo-tree-id3277 . -8) (undo-tree-id3278 . -8) (undo-tree-id3279 . -8) (undo-tree-id3280 . -8) (undo-tree-id3281 . -8) (undo-tree-id3282 . -8) (undo-tree-id3283 . -8) (undo-tree-id3284 . -8) (undo-tree-id3285 . -8) (undo-tree-id3286 . -8) (undo-tree-id3287 . -8) (undo-tree-id3288 . -8) (undo-tree-id3289 . -8) (undo-tree-id3290 . -8) (undo-tree-id3291 . -8) (undo-tree-id3292 . -8) (undo-tree-id3293 . -8) (undo-tree-id3294 . -8) (undo-tree-id3295 . -8) (undo-tree-id3296 . -8) (undo-tree-id3297 . -8) (undo-tree-id3298 . -8) (undo-tree-id3299 . -8) (undo-tree-id3300 . -8) (undo-tree-id3301 . -8) (undo-tree-id3302 . -8) (undo-tree-id3303 . -8) (undo-tree-id3304 . -8) (undo-tree-id3305 . -8) (undo-tree-id3306 . -8) (undo-tree-id3307 . -8) (undo-tree-id3308 . -8) (undo-tree-id3309 . -8) (undo-tree-id3310 . -8) (undo-tree-id3311 . -8) (undo-tree-id3312 . -8) (undo-tree-id3313 . -8) (undo-tree-id3314 . -8) (undo-tree-id3315 . -8) (undo-tree-id3316 . -8) (undo-tree-id3317 . -8) (undo-tree-id3318 . -8) (undo-tree-id3319 . -8) (undo-tree-id3320 . -8) (undo-tree-id3321 . -8) (undo-tree-id3322 . -8) (undo-tree-id3323 . -8) (undo-tree-id3324 . -8) (undo-tree-id3325 . -8) (undo-tree-id3326 . -8) (undo-tree-id3327 . -8) (undo-tree-id3328 . -8) (undo-tree-id3329 . -8) (undo-tree-id3330 . -8) (undo-tree-id3331 . -8) (undo-tree-id3332 . -8) (undo-tree-id3333 . -8) (undo-tree-id3334 . -8) (undo-tree-id3335 . -8) (undo-tree-id3336 . -8) (undo-tree-id3337 . -8) (undo-tree-id3338 . -8) (undo-tree-id3339 . -8) (undo-tree-id3340 . -8) (undo-tree-id3341 . -8) (undo-tree-id3342 . -8) (undo-tree-id3343 . -8) (undo-tree-id3344 . -8) (undo-tree-id3345 . -8) (undo-tree-id3346 . -8) (undo-tree-id3347 . -8) (undo-tree-id3348 . -8) (undo-tree-id3349 . -8) (undo-tree-id3350 . -8) (undo-tree-id3351 . -8) (undo-tree-id3352 . -8) (undo-tree-id3353 . -8) (undo-tree-id3354 . -8) (undo-tree-id3355 . -8) (undo-tree-id3356 . -2) (undo-tree-id3357 . -8) (undo-tree-id3358 . -8) (undo-tree-id3359 . -8) (undo-tree-id3360 . -8) (222 . 223) (#("f __init__s" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil) 2 10 (fontified nil face font-lock-function-name-face) 10 11 (fontified nil face font-lock-function-name-face)) . 222) (undo-tree-id3361 . -10) (undo-tree-id3362 . -10) (undo-tree-id3363 . -10) (undo-tree-id3364 . -10) (undo-tree-id3365 . -10) (undo-tree-id3366 . -10) (undo-tree-id3367 . -10) (undo-tree-id3368 . -10) (undo-tree-id3369 . -10) (undo-tree-id3370 . -10) (undo-tree-id3371 . -10) (undo-tree-id3372 . -10) (undo-tree-id3373 . -10) (undo-tree-id3374 . -10) (undo-tree-id3375 . -10) (undo-tree-id3376 . -10) (undo-tree-id3377 . -10) (undo-tree-id3378 . -10) (undo-tree-id3379 . -10) (undo-tree-id3380 . -10) (undo-tree-id3381 . -10) (undo-tree-id3382 . -10) (undo-tree-id3383 . -10) (undo-tree-id3384 . -10) (undo-tree-id3385 . -10) (undo-tree-id3386 . -10) (undo-tree-id3387 . -10) (undo-tree-id3388 . -10) (undo-tree-id3389 . -10) (undo-tree-id3390 . -10) (undo-tree-id3391 . -10) (undo-tree-id3392 . -10) (undo-tree-id3393 . -10) (undo-tree-id3394 . -10) (undo-tree-id3395 . -10) (undo-tree-id3396 . -10) (undo-tree-id3397 . -10) (undo-tree-id3398 . -10) (undo-tree-id3399 . -10) (undo-tree-id3400 . -10) (undo-tree-id3401 . -10) (undo-tree-id3402 . -10) (undo-tree-id3403 . -10) (undo-tree-id3404 . -10) (undo-tree-id3405 . -10) (undo-tree-id3406 . -10) (undo-tree-id3407 . -10) (undo-tree-id3408 . -10) (undo-tree-id3409 . -10) (undo-tree-id3410 . -10) (undo-tree-id3411 . -10) (undo-tree-id3412 . -10) (undo-tree-id3413 . -10) (undo-tree-id3414 . -10) (undo-tree-id3415 . -10) (undo-tree-id3416 . -10) (undo-tree-id3417 . -10) (undo-tree-id3418 . -10) (undo-tree-id3419 . -10) (undo-tree-id3420 . -10) (undo-tree-id3421 . -10) (undo-tree-id3422 . -10) (undo-tree-id3423 . -10) (undo-tree-id3424 . -10) (undo-tree-id3425 . -10) (undo-tree-id3426 . -10) (undo-tree-id3427 . -10) (undo-tree-id3428 . -10) (undo-tree-id3429 . -10) (undo-tree-id3430 . -10) (undo-tree-id3431 . -10) (undo-tree-id3432 . -10) (undo-tree-id3433 . -10) (undo-tree-id3434 . -10) (undo-tree-id3435 . -10) (undo-tree-id3436 . -10) (undo-tree-id3437 . -10) (undo-tree-id3438 . -10) (undo-tree-id3439 . -10) (undo-tree-id3440 . -10) (undo-tree-id3441 . -10) (undo-tree-id3442 . -10) (undo-tree-id3443 . -10) (undo-tree-id3444 . -10) (undo-tree-id3445 . -10) (undo-tree-id3446 . -10) (undo-tree-id3447 . -10) (undo-tree-id3448 . -10) (undo-tree-id3449 . -10) (undo-tree-id3450 . -10) (undo-tree-id3451 . -10) (undo-tree-id3452 . -10) (undo-tree-id3453 . -10) (undo-tree-id3454 . -10) (undo-tree-id3455 . -10) (undo-tree-id3456 . -10) (undo-tree-id3457 . -10) (undo-tree-id3458 . -10) (undo-tree-id3459 . -10) (undo-tree-id3460 . -10) (undo-tree-id3461 . -10) (undo-tree-id3462 . -10) (undo-tree-id3463 . -10) (undo-tree-id3464 . -10) (undo-tree-id3465 . -10) (undo-tree-id3466 . -10) (undo-tree-id3467 . -10) (undo-tree-id3468 . -10) (undo-tree-id3469 . -10) (undo-tree-id3470 . -10) (undo-tree-id3471 . -10) (undo-tree-id3472 . -10) (undo-tree-id3473 . -10) (undo-tree-id3474 . -10) (undo-tree-id3475 . -10) (undo-tree-id3476 . -10) (undo-tree-id3477 . -10) (undo-tree-id3478 . -10) (undo-tree-id3479 . -10) (undo-tree-id3480 . -10) (undo-tree-id3481 . -10) (undo-tree-id3482 . -10) (undo-tree-id3483 . -10) (undo-tree-id3484 . -10) (undo-tree-id3485 . -10) (232 . 233) (#("(self" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face)) 1 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil face font-lock-keyword-face)) . 232) (undo-tree-id3486 . -4) (undo-tree-id3487 . -4) (undo-tree-id3488 . -4) (undo-tree-id3489 . -4) (undo-tree-id3490 . -4) (undo-tree-id3491 . -4) (undo-tree-id3492 . -4) (undo-tree-id3493 . -4) (undo-tree-id3494 . -4) (undo-tree-id3495 . -4) (undo-tree-id3496 . -4) (undo-tree-id3497 . -4) (undo-tree-id3498 . -4) (undo-tree-id3499 . -4) (undo-tree-id3500 . -4) (undo-tree-id3501 . -4) (undo-tree-id3502 . -4) (undo-tree-id3503 . -4) (undo-tree-id3504 . -4) (undo-tree-id3505 . -4) (undo-tree-id3506 . -4) (undo-tree-id3507 . -4) (undo-tree-id3508 . -4) (undo-tree-id3509 . -4) (undo-tree-id3510 . -4) (undo-tree-id3511 . -4) (undo-tree-id3512 . -4) (undo-tree-id3513 . -4) (undo-tree-id3514 . -4) (undo-tree-id3515 . -4) (undo-tree-id3516 . -4) (undo-tree-id3517 . -4) (undo-tree-id3518 . -4) (undo-tree-id3519 . -4) (undo-tree-id3520 . -4) (undo-tree-id3521 . -4) (undo-tree-id3522 . -4) (undo-tree-id3523 . -4) (undo-tree-id3524 . -4) (undo-tree-id3525 . -4) (undo-tree-id3526 . -4) (undo-tree-id3527 . -4) (undo-tree-id3528 . -4) (undo-tree-id3529 . -4) (undo-tree-id3530 . -4) (undo-tree-id3531 . -4) (undo-tree-id3532 . -4) (undo-tree-id3533 . -4) (undo-tree-id3534 . -4) (undo-tree-id3535 . -4) (undo-tree-id3536 . -4) (undo-tree-id3537 . -4) (undo-tree-id3538 . -4) (undo-tree-id3539 . -4) (undo-tree-id3540 . -4) (undo-tree-id3541 . -4) (undo-tree-id3542 . -4) (undo-tree-id3543 . -4) (undo-tree-id3544 . -4) (undo-tree-id3545 . -4) (undo-tree-id3546 . -4) (undo-tree-id3547 . -4) (undo-tree-id3548 . -4) (undo-tree-id3549 . -4) (undo-tree-id3550 . -4) (undo-tree-id3551 . -4) (undo-tree-id3552 . -4) (undo-tree-id3553 . -4) (undo-tree-id3554 . -4) (undo-tree-id3555 . -4) (undo-tree-id3556 . -4) (undo-tree-id3557 . -4) (undo-tree-id3558 . -4) (undo-tree-id3559 . -4) (undo-tree-id3560 . -4) (undo-tree-id3561 . -4) (undo-tree-id3562 . -4) (undo-tree-id3563 . -4) (undo-tree-id3564 . -4) (undo-tree-id3565 . -4) (undo-tree-id3566 . -4) (undo-tree-id3567 . -4) (undo-tree-id3568 . -4) (undo-tree-id3569 . -4) (undo-tree-id3570 . -4) (undo-tree-id3571 . -4) (undo-tree-id3572 . -4) (undo-tree-id3573 . -4) (undo-tree-id3574 . -4) (undo-tree-id3575 . -4) (undo-tree-id3576 . -4) (undo-tree-id3577 . -4) (undo-tree-id3578 . -4) (undo-tree-id3579 . -4) (undo-tree-id3580 . -4) (undo-tree-id3581 . -4) (undo-tree-id3582 . -4) (undo-tree-id3583 . -4) (undo-tree-id3584 . -4) (undo-tree-id3585 . -4) (undo-tree-id3586 . -4) (undo-tree-id3587 . -4) (undo-tree-id3588 . -4) (undo-tree-id3589 . -4) (undo-tree-id3590 . -4) (undo-tree-id3591 . -4) (undo-tree-id3592 . -4) (undo-tree-id3593 . -4) (undo-tree-id3594 . -4) (undo-tree-id3595 . -4) (undo-tree-id3596 . -4) (undo-tree-id3597 . -4) (undo-tree-id3598 . -4) (undo-tree-id3599 . -4) (undo-tree-id3600 . -4) (undo-tree-id3601 . -4) (undo-tree-id3602 . -4) (undo-tree-id3603 . -4) (undo-tree-id3604 . -4) (undo-tree-id3605 . -4) (undo-tree-id3606 . -4) (undo-tree-id3607 . -4) (undo-tree-id3608 . -4) (undo-tree-id3609 . -4) (undo-tree-id3610 . -4) (236 . 237) (#("f):" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 3 (fontified t)) . 236) (undo-tree-id3611 . -3) (undo-tree-id3612 . -3) (undo-tree-id3613 . -3) (undo-tree-id3614 . -3) (undo-tree-id3615 . -3) (undo-tree-id3616 . -3) (undo-tree-id3617 . -3) (undo-tree-id3618 . -3) (undo-tree-id3619 . -3) (undo-tree-id3620 . -3) (undo-tree-id3621 . -3) (undo-tree-id3622 . -3) (undo-tree-id3623 . -3) (undo-tree-id3624 . -3) (undo-tree-id3625 . -3) (undo-tree-id3626 . -3) (undo-tree-id3627 . -3) (undo-tree-id3628 . -3) (undo-tree-id3629 . -3) (undo-tree-id3630 . -3) (undo-tree-id3631 . -3) (undo-tree-id3632 . -3) (undo-tree-id3633 . -3) (undo-tree-id3634 . -3) (undo-tree-id3635 . -3) (undo-tree-id3636 . -3) (undo-tree-id3637 . -3) (undo-tree-id3638 . -3) (undo-tree-id3639 . -3) (undo-tree-id3640 . -3) (undo-tree-id3641 . -3) (undo-tree-id3642 . -3) (undo-tree-id3643 . -3) (undo-tree-id3644 . -3) (undo-tree-id3645 . -3) (undo-tree-id3646 . -3) (undo-tree-id3647 . -3) (undo-tree-id3648 . -3) (undo-tree-id3649 . -3) (undo-tree-id3650 . -3) (undo-tree-id3651 . -3) (undo-tree-id3652 . -3) (undo-tree-id3653 . -3) (undo-tree-id3654 . -3) (undo-tree-id3655 . -3) (undo-tree-id3656 . -3) (undo-tree-id3657 . -3) (undo-tree-id3658 . -3) (undo-tree-id3659 . -3) (undo-tree-id3660 . -3) (undo-tree-id3661 . -3) (undo-tree-id3662 . -3) (undo-tree-id3663 . -3) (undo-tree-id3664 . -3) (undo-tree-id3665 . -3) (undo-tree-id3666 . -3) (undo-tree-id3667 . -3) (undo-tree-id3668 . -3) (undo-tree-id3669 . -3) (undo-tree-id3670 . -3) (undo-tree-id3671 . -3) (undo-tree-id3672 . -3) (undo-tree-id3673 . -3) (undo-tree-id3674 . -3) (undo-tree-id3675 . -3) (undo-tree-id3676 . -3) (undo-tree-id3677 . -3) (undo-tree-id3678 . -3) (undo-tree-id3679 . -3) (undo-tree-id3680 . -3) (undo-tree-id3681 . -3) (undo-tree-id3682 . -3) (undo-tree-id3683 . -3) (undo-tree-id3684 . -3) (undo-tree-id3685 . -3) (undo-tree-id3686 . -3) (undo-tree-id3687 . -3) (undo-tree-id3688 . -3) (undo-tree-id3689 . -3) (undo-tree-id3690 . -3) (undo-tree-id3691 . -3) (undo-tree-id3692 . -3) (undo-tree-id3693 . -3) (undo-tree-id3694 . -3) (undo-tree-id3695 . -3) (undo-tree-id3696 . -3) (undo-tree-id3697 . -3) (undo-tree-id3698 . -3) (undo-tree-id3699 . -3) (undo-tree-id3700 . -3) (undo-tree-id3701 . -3) (undo-tree-id3702 . -3) (undo-tree-id3703 . -3) (undo-tree-id3704 . -3) (undo-tree-id3705 . -3) (undo-tree-id3706 . -3) (undo-tree-id3707 . -3) (undo-tree-id3708 . -3) (undo-tree-id3709 . -3) (undo-tree-id3710 . -3) (undo-tree-id3711 . -3) (undo-tree-id3712 . -3) (undo-tree-id3713 . -3) (undo-tree-id3714 . -3) (undo-tree-id3715 . -3) (undo-tree-id3716 . -3) (undo-tree-id3717 . -3) (undo-tree-id3718 . -3) (undo-tree-id3719 . -3) (undo-tree-id3720 . -3) (undo-tree-id3721 . -3) (undo-tree-id3722 . -3) (undo-tree-id3723 . -3) (undo-tree-id3724 . -3) (undo-tree-id3725 . -3) (undo-tree-id3726 . -3) (undo-tree-id3727 . -3) (undo-tree-id3728 . -3) (undo-tree-id3729 . -3) (undo-tree-id3730 . -3) (undo-tree-id3731 . -3) (undo-tree-id3732 . -3) (undo-tree-id3733 . -2) (undo-tree-id3734 . -3) (undo-tree-id3735 . -2)) (25701 54787 614329 35000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -873) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) 877 (872 . 877) (t 25701 16733 623929 302000) 854) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 872) (undo-tree-id227 . -1) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (undo-tree-id230 . -5) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (873 . 877)) (25701 16735 692837 508000) 0 nil])
([nil nil ((225 . 231) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -225) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -226) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -227) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -228) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -229) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -230) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -231) (undo-tree-id3868 . -1) 232 (231 . 232) (225 . 231) (#("status" 0 6 (fontified t face font-lock-variable-name-face)) . 225) (undo-tree-id3869 . -5)) nil (25701 55333 970544 544000) 0 nil])
([nil nil ((#("    _coroutine = None
    _last_return = None
    _last_except = None
" 0 4 (fontified t) 4 14 (fontified t face font-lock-variable-name-face) 14 17 (fontified t) 17 21 (fontified t face font-lock-constant-face) 21 22 (fontified t) 22 26 (fontified t) 26 38 (fontified t face font-lock-variable-name-face) 38 41 (fontified t) 41 45 (fontified t face font-lock-constant-face) 45 50 (fontified t) 50 62 (fontified t face font-lock-variable-name-face) 62 65 (fontified t) 65 69 (fontified t face font-lock-constant-face) 69 70 (fontified t)) . 260) (undo-tree-id2949 . -27) (undo-tree-id2950 . -27) (undo-tree-id2951 . -27) (undo-tree-id2952 . -27) (undo-tree-id2953 . -27) (undo-tree-id2954 . -27) (undo-tree-id2955 . -27) (undo-tree-id2956 . -27) (undo-tree-id2957 . -27) (undo-tree-id2958 . -27) (undo-tree-id2959 . -27) (undo-tree-id2960 . -27) (undo-tree-id2961 . -27) (undo-tree-id2962 . -27) (undo-tree-id2963 . -27) (undo-tree-id2964 . -27) (undo-tree-id2965 . -27) (undo-tree-id2966 . -27) (undo-tree-id2967 . -27) (undo-tree-id2969 . -66)) ((260 . 330)) (25701 54787 561848 125000) 0 nil])
nil
([nil nil ((241 . 246) (239 . 241)) nil (25701 55333 970530 315000) 0 nil])
([nil nil ((nil rear-nonsticky nil 243 . 244) (#("
" 0 1 (fontified nil)) . 309) (239 . 310)) ((#("
    _coroutine = None
    _last_return = None
    _last_except = None
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil) 5 15 (fontified nil face font-lock-variable-name-face) 15 18 (fontified nil) 18 22 (fontified nil face font-lock-constant-face) 22 23 (fontified nil) 23 27 (fontified t) 27 39 (fontified t face font-lock-variable-name-face) 39 42 (fontified t) 42 46 (fontified t face font-lock-constant-face) 46 47 (fontified t) 47 51 (fontified nil) 51 63 (fontified nil face font-lock-variable-name-face) 63 66 (fontified nil) 66 70 (fontified nil face font-lock-constant-face) 70 71 (fontified nil)) . 239) (undo-tree-id2974 . -52) (undo-tree-id2975 . -62) (undo-tree-id2976 . -70) (undo-tree-id2977 . -62) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -23) (undo-tree-id2981 . -23) (undo-tree-id2982 . -47) (undo-tree-id2983 . -47) (undo-tree-id2984 . -70) (undo-tree-id2985 . -70) (undo-tree-id2986 . -70) (undo-tree-id2987 . -70) (undo-tree-id2988 . -70) (undo-tree-id2989 . -70) (undo-tree-id2990 . -70) (undo-tree-id2991 . -70) (undo-tree-id2992 . -70) (undo-tree-id2993 . -70) (undo-tree-id2994 . -70) (undo-tree-id2995 . -70) (undo-tree-id2996 . -70) (undo-tree-id2997 . -70) (undo-tree-id2998 . -70) (undo-tree-id2999 . -70) (undo-tree-id3000 . -70) (undo-tree-id3001 . -70) (undo-tree-id3002 . -70) (undo-tree-id3003 . -70) (undo-tree-id3004 . -70) (undo-tree-id3005 . -70) (undo-tree-id3006 . -70) (undo-tree-id3007 . -70) (undo-tree-id3008 . -70) (undo-tree-id3009 . -70) (undo-tree-id3010 . -70) (undo-tree-id3011 . -70) (undo-tree-id3012 . -70) (undo-tree-id3013 . -70) (undo-tree-id3014 . -70) (undo-tree-id3015 . -70) (undo-tree-id3016 . -70) (undo-tree-id3017 . -70) (undo-tree-id3018 . -70) (undo-tree-id3019 . -70) (undo-tree-id3020 . -70) (undo-tree-id3021 . -70) (undo-tree-id3022 . -70) (undo-tree-id3023 . -70) (undo-tree-id3024 . -1) (undo-tree-id3025 . -23) (undo-tree-id3026 . -70) (undo-tree-id3027 . -6) (undo-tree-id3028 . -6) (undo-tree-id3029 . -70) (undo-tree-id3030 . -70) (undo-tree-id3031 . -70) (undo-tree-id3032 . -70) (undo-tree-id3033 . -70) (undo-tree-id3034 . -70) (undo-tree-id3035 . -70) (undo-tree-id3036 . -70) (undo-tree-id3037 . -70) (undo-tree-id3038 . -70) (undo-tree-id3039 . -70) (undo-tree-id3040 . -70) (undo-tree-id3041 . -70) (undo-tree-id3042 . -70) (undo-tree-id3043 . -70) (undo-tree-id3044 . -70) (undo-tree-id3045 . -70) (undo-tree-id3046 . -52) (undo-tree-id3047 . -63) (undo-tree-id3048 . -70) (undo-tree-id3049 . -1) (undo-tree-id3050 . -70) (undo-tree-id3051 . -70) (undo-tree-id3052 . -52) (undo-tree-id3053 . -70) (undo-tree-id3054 . -70) (undo-tree-id3055 . -70) (undo-tree-id3056 . -52) (undo-tree-id3057 . -70) (undo-tree-id3058 . -70) (undo-tree-id3059 . -70) (undo-tree-id3060 . -52) (undo-tree-id3061 . -70) (undo-tree-id3062 . -70) (undo-tree-id3063 . -70) (undo-tree-id3064 . -52) (undo-tree-id3065 . -70) (undo-tree-id3066 . -70) (undo-tree-id3067 . -70) (undo-tree-id3068 . -52) (undo-tree-id3069 . -70) (undo-tree-id3070 . -70) (undo-tree-id3071 . -70) (undo-tree-id3072 . -52) (undo-tree-id3073 . -70) (undo-tree-id3074 . -70) (undo-tree-id3075 . -70) (undo-tree-id3076 . -52) (undo-tree-id3077 . -70) (undo-tree-id3078 . -70) (undo-tree-id3079 . -70) (undo-tree-id3080 . -52) (undo-tree-id3081 . -70) (undo-tree-id3082 . -70) (undo-tree-id3083 . -70) (undo-tree-id3084 . -52) (undo-tree-id3085 . -52) (undo-tree-id3086 . -70) (undo-tree-id3087 . -70) (undo-tree-id3088 . -70) (undo-tree-id3089 . -70) (undo-tree-id3090 . -70) (undo-tree-id3091 . -70) (undo-tree-id3092 . -52) (undo-tree-id3093 . -52) (undo-tree-id3094 . -47) (undo-tree-id3095 . -47) (undo-tree-id3096 . -1) (undo-tree-id3097 . -47) (undo-tree-id3098 . -1) (309 . 310) (nil rear-nonsticky t 243 . 244)) (25701 54787 183156 499000) 0 nil])
([nil nil ((#("    , None, None)
" 0 4 (fontified t) 4 6 (fontified t) 6 10 (fontified t face font-lock-constant-face) 10 12 (fontified t) 12 16 (fontified t face font-lock-constant-face) 16 17 (fontified t face (rainbow-delimiters-unmatched-face)) 17 18 (fontified t)) . 242) (undo-tree-id3852 . 14) (undo-tree-id3853 . -17) (undo-tree-id3854 . -18) (undo-tree-id3855 . -3) 245) nil (25701 55333 970528 741000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 302) (294 . 302) (#("    " 0 4 (fontified nil)) . 274) (266 . 274) (#("    " 0 3 (fontified nil) 3 4 (fontified nil rear-nonsticky t)) . 248) (240 . 248)) ((#("        " 0 8 (fontified nil)) . 240) (248 . 252) (#("        " 0 8 (fontified nil)) . 266) (274 . 278) (#("        " 0 8 (fontified nil)) . 294) (undo-tree-id2970 . -8) (undo-tree-id2971 . -8) (undo-tree-id2972 . -8) (undo-tree-id2973 . -8) (302 . 306)) (25701 54786 384919 371000) 0 nil])
([nil nil ((#("            if _status[2]:
                val = _coroutine.throw(_status[2])
            else:
" 0 12 (fontified t) 12 14 (fontified t face font-lock-keyword-face) 14 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 24 (fontified t face highlight-numbers-number) 24 25 (fontified t face (rainbow-delimiters-depth-1-face)) 25 27 (fontified t) 27 43 (fontified t) 43 46 (fontified t face font-lock-variable-name-face) 46 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-1-face)) 66 73 (fontified t) 73 74 (fontified t face (rainbow-delimiters-depth-2-face)) 74 75 (fontified t face highlight-numbers-number) 75 76 (fontified t face (rainbow-delimiters-depth-2-face)) 76 77 (fontified t face (rainbow-delimiters-depth-1-face)) 77 78 (fontified t) 78 90 (fontified t) 90 94 (fontified t face font-lock-keyword-face) 94 95 (fontified t) 95 96 (fontified t)) . 389) (undo-tree-id3839 . -78) (undo-tree-id3840 . -95) (undo-tree-id3841 . -78) (undo-tree-id3842 . -50) (undo-tree-id3843 . -50) (undo-tree-id3844 . -94) (undo-tree-id3845 . -50) (undo-tree-id3846 . -50) (undo-tree-id3847 . -27) (undo-tree-id3848 . -96) (undo-tree-id3849 . -78) (undo-tree-id3850 . -27) (undo-tree-id3851 . -96)) nil (25701 55333 970523 609000) 0 nil])
([nil nil ((316 . 317) (315 . 316) (#("f" 0 1 (fontified nil)) . -315) (314 . 316) (313 . 314) (312 . 313) (283 . 284) (282 . 283) (#("f" 0 1 (fontified nil)) . -282) (281 . 283) (280 . 281) (279 . 280) (251 . 253) (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -251) (undo-tree-id612 . -1) (248 . 252)) ((#("self" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-variable-name-face)) . 248) (251 . 252) (#("f." 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t)) . 251) (#("s" 0 1 (fontified nil face font-lock-keyword-face)) . 279) (#("e" 0 1 (fontified nil face font-lock-keyword-face)) . 280) (#("lf" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil)) . 281) (282 . 283) (#("f" 0 1 (fontified nil face font-lock-keyword-face)) . 282) (#("." 0 1 (fontified t)) . 283) (#("s" 0 1 (fontified nil face font-lock-keyword-face)) . 312) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (#("e" 0 1 (fontified nil face font-lock-keyword-face)) . 313) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (#("lf" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil)) . 314) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (315 . 316) (#("f" 0 1 (fontified nil face font-lock-keyword-face)) . 315) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (#("." 0 1 (fontified t)) . 316)) (25701 54774 776488 967000) 0 nil])
([nil nil ((#("                " 0 16 (fontified nil)) . -401) (undo-tree-id3838 . 16) (389 . 401)) nil (25701 55352 23791 824000) 0 nil])
([nil nil ((396 . 398) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -396) (undo-tree-id608 . -1) (392 . 397) (386 . 392) (377 . 386) (362 . 377) (357 . 362) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -357) (undo-tree-id609 . -1) (343 . 358) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -343) (undo-tree-id610 . -1) (341 . 344) (#("    " 0 4 (fontified t)) . -341) (undo-tree-id611 . -4) 345 (336 . 345) 316) ((#("
        " 0 1 (fontified t) 1 5 (fontified nil) 5 9 (fontified nil)) . 336) (undo-tree-id1027 . 9) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -5) (undo-tree-id1031 . -5) (undo-tree-id1032 . -5) (undo-tree-id1033 . -5) (undo-tree-id1034 . -5) (undo-tree-id1035 . -5) (undo-tree-id1036 . -5) (undo-tree-id1037 . -5) (undo-tree-id1038 . -5) (undo-tree-id1039 . -5) (undo-tree-id1040 . -5) (undo-tree-id1041 . -5) (undo-tree-id1042 . -5) (undo-tree-id1043 . -5) (undo-tree-id1044 . -5) (undo-tree-id1045 . -5) (undo-tree-id1046 . -5) (undo-tree-id1047 . -5) (undo-tree-id1048 . -5) (undo-tree-id1049 . -5) (undo-tree-id1050 . -5) (undo-tree-id1051 . -5) (undo-tree-id1052 . -5) (undo-tree-id1053 . -5) (undo-tree-id1054 . -5) (undo-tree-id1055 . -5) (undo-tree-id1056 . -5) (undo-tree-id1057 . -5) (undo-tree-id1058 . -5) (undo-tree-id1059 . -5) (undo-tree-id1060 . -5) (undo-tree-id1061 . -5) (undo-tree-id1062 . -5) (undo-tree-id1063 . -5) (undo-tree-id1064 . -5) (undo-tree-id1065 . -5) (undo-tree-id1066 . -5) (undo-tree-id1067 . -5) (undo-tree-id1068 . -5) (undo-tree-id1069 . -5) (undo-tree-id1070 . -5) (undo-tree-id1071 . -5) (undo-tree-id1072 . -5) (undo-tree-id1073 . -5) (undo-tree-id1074 . -5) (undo-tree-id1075 . -5) (undo-tree-id1076 . -5) (undo-tree-id1077 . -5) (undo-tree-id1078 . -5) (undo-tree-id1079 . -5) (undo-tree-id1080 . -5) (undo-tree-id1081 . -5) (undo-tree-id1082 . -5) (undo-tree-id1083 . -9) (undo-tree-id1084 . -5) (undo-tree-id1085 . -5) (undo-tree-id1086 . -5) (undo-tree-id1087 . -5) (undo-tree-id1088 . -5) (undo-tree-id1089 . -5) (undo-tree-id1090 . -5) (undo-tree-id1091 . -5) (undo-tree-id1092 . -5) (undo-tree-id1093 . -5) (undo-tree-id1094 . -5) (undo-tree-id1095 . -5) (undo-tree-id1096 . -5) (undo-tree-id1097 . -5) (undo-tree-id1098 . -5) (undo-tree-id1099 . -5) (undo-tree-id1100 . -5) (undo-tree-id1101 . -5) (undo-tree-id1102 . -5) (undo-tree-id1103 . -5) (undo-tree-id1104 . -5) (undo-tree-id1105 . -5) (undo-tree-id1106 . -5) (undo-tree-id1107 . -5) (undo-tree-id1108 . -5) (undo-tree-id1109 . -5) (undo-tree-id1110 . -5) (undo-tree-id1111 . -5) (undo-tree-id1112 . -5) (undo-tree-id1113 . -5) (undo-tree-id1114 . -5) (undo-tree-id1115 . -5) (undo-tree-id1116 . -5) (undo-tree-id1117 . -5) (undo-tree-id1118 . -5) (undo-tree-id1119 . -5) (undo-tree-id1120 . -5) (341 . 345) (#("def" 0 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face)) . 341) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -2) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -2) (undo-tree-id1163 . -2) (undo-tree-id1164 . -2) (undo-tree-id1165 . -2) (undo-tree-id1166 . -2) (undo-tree-id1167 . -2) (undo-tree-id1168 . -2) (undo-tree-id1169 . -2) (undo-tree-id1170 . -2) (undo-tree-id1171 . -2) (undo-tree-id1172 . -2) (undo-tree-id1173 . -2) (undo-tree-id1174 . -3) (undo-tree-id1175 . -2) (undo-tree-id1176 . -2) (undo-tree-id1177 . -2) (undo-tree-id1178 . -2) (undo-tree-id1179 . -2) (undo-tree-id1180 . -2) (undo-tree-id1181 . -2) (undo-tree-id1182 . -2) (undo-tree-id1183 . -2) (undo-tree-id1184 . -2) (undo-tree-id1185 . -2) (undo-tree-id1186 . -2) (undo-tree-id1187 . -2) (undo-tree-id1188 . -2) (undo-tree-id1189 . -2) (undo-tree-id1190 . -2) (undo-tree-id1191 . -2) (undo-tree-id1192 . -2) (undo-tree-id1193 . -2) (undo-tree-id1194 . -2) (undo-tree-id1195 . -2) (undo-tree-id1196 . -2) (undo-tree-id1197 . -2) (undo-tree-id1198 . -2) (undo-tree-id1199 . -2) (undo-tree-id1200 . -2) (undo-tree-id1201 . -2) (undo-tree-id1202 . -2) (undo-tree-id1203 . -2) (undo-tree-id1204 . -2) (undo-tree-id1205 . -2) (undo-tree-id1206 . -2) (undo-tree-id1207 . -2) (undo-tree-id1208 . -2) (undo-tree-id1209 . -2) (undo-tree-id1210 . -2) (undo-tree-id1211 . -2) (343 . 344) (#("f __call__(self" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil) 2 10 (fontified nil face font-lock-function-name-face) 10 11 (fontified nil face (rainbow-delimiters-depth-1-face)) 11 14 (fontified nil face font-lock-keyword-face) 14 15 (fontified nil face font-lock-keyword-face)) . 343) (undo-tree-id1212 . -14) (undo-tree-id1213 . -14) (undo-tree-id1214 . -14) (undo-tree-id1215 . -14) (undo-tree-id1216 . -14) (undo-tree-id1217 . -14) (undo-tree-id1218 . -14) (undo-tree-id1219 . -14) (undo-tree-id1220 . -14) (undo-tree-id1221 . -14) (undo-tree-id1222 . -14) (undo-tree-id1223 . -14) (undo-tree-id1224 . -14) (undo-tree-id1225 . -14) (undo-tree-id1226 . -14) (undo-tree-id1227 . -14) (undo-tree-id1228 . -14) (undo-tree-id1229 . -14) (undo-tree-id1230 . -14) (undo-tree-id1231 . -14) (undo-tree-id1232 . -14) (undo-tree-id1233 . -14) (undo-tree-id1234 . -14) (undo-tree-id1235 . -14) (undo-tree-id1236 . -14) (undo-tree-id1237 . -14) (undo-tree-id1238 . -14) (undo-tree-id1239 . -14) (undo-tree-id1240 . -14) (undo-tree-id1241 . -14) (undo-tree-id1242 . -14) (undo-tree-id1243 . -14) (undo-tree-id1244 . -14) (undo-tree-id1245 . -14) (undo-tree-id1246 . -14) (undo-tree-id1247 . -14) (undo-tree-id1248 . -14) (undo-tree-id1249 . -14) (undo-tree-id1250 . -14) (undo-tree-id1251 . -14) (undo-tree-id1252 . -14) (undo-tree-id1253 . -14) (undo-tree-id1254 . -14) (undo-tree-id1255 . -14) (undo-tree-id1256 . -14) (undo-tree-id1257 . -14) (undo-tree-id1258 . -14) (undo-tree-id1259 . -14) (undo-tree-id1260 . -14) (undo-tree-id1261 . -14) (undo-tree-id1262 . -14) (undo-tree-id1263 . -14) (undo-tree-id1264 . -14) (undo-tree-id1265 . -15) (undo-tree-id1266 . -14) (undo-tree-id1267 . -14) (undo-tree-id1268 . -14) (undo-tree-id1269 . -14) (undo-tree-id1270 . -14) (undo-tree-id1271 . -14) (undo-tree-id1272 . -14) (undo-tree-id1273 . -14) (undo-tree-id1274 . -14) (undo-tree-id1275 . -14) (undo-tree-id1276 . -14) (undo-tree-id1277 . -14) (undo-tree-id1278 . -14) (undo-tree-id1279 . -14) (undo-tree-id1280 . -14) (undo-tree-id1281 . -14) (undo-tree-id1282 . -14) (undo-tree-id1283 . -14) (undo-tree-id1284 . -14) (undo-tree-id1285 . -14) (undo-tree-id1286 . -14) (undo-tree-id1287 . -14) (undo-tree-id1288 . -14) (undo-tree-id1289 . -14) (undo-tree-id1290 . -14) (undo-tree-id1291 . -14) (undo-tree-id1292 . -14) (undo-tree-id1293 . -14) (undo-tree-id1294 . -14) (undo-tree-id1295 . -14) (undo-tree-id1296 . -14) (undo-tree-id1297 . -14) (undo-tree-id1298 . -14) (undo-tree-id1299 . -14) (undo-tree-id1300 . -14) (undo-tree-id1301 . -14) (undo-tree-id1302 . -14) (357 . 358) (#("f, *a" 0 1 (fontified nil face font-lock-keyword-face) 1 3 (fontified nil) 3 5 (fontified nil)) . 357) (undo-tree-id1303 . 2) (undo-tree-id1304 . -5) (undo-tree-id1305 . -5) (undo-tree-id1306 . -5) (undo-tree-id1307 . -5) (undo-tree-id1308 . -5) (undo-tree-id1309 . -5) (undo-tree-id1310 . -5) (undo-tree-id1311 . -5) (undo-tree-id1312 . -5) (undo-tree-id1313 . -5) (undo-tree-id1314 . -5) (undo-tree-id1315 . -5) (undo-tree-id1316 . -5) (undo-tree-id1317 . -5) (undo-tree-id1318 . -5) (undo-tree-id1319 . -5) (undo-tree-id1320 . -5) (undo-tree-id1321 . -5) (undo-tree-id1322 . -5) (undo-tree-id1323 . -5) (undo-tree-id1324 . -5) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) (undo-tree-id1329 . -5) (undo-tree-id1330 . -5) (undo-tree-id1331 . -5) (undo-tree-id1332 . -5) (undo-tree-id1333 . -5) (undo-tree-id1334 . -5) (undo-tree-id1335 . -5) (undo-tree-id1336 . -5) (undo-tree-id1337 . -5) (undo-tree-id1338 . -5) (undo-tree-id1339 . -5) (undo-tree-id1340 . -5) (undo-tree-id1341 . -5) (undo-tree-id1342 . -5) (undo-tree-id1343 . -5) (undo-tree-id1344 . -5) (undo-tree-id1345 . -5) (undo-tree-id1346 . -5) (undo-tree-id1347 . -5) (undo-tree-id1348 . -5) (undo-tree-id1349 . -5) (undo-tree-id1350 . -5) (undo-tree-id1351 . -5) (undo-tree-id1352 . -5) (undo-tree-id1353 . -5) (undo-tree-id1354 . -5) (undo-tree-id1355 . -5) (undo-tree-id1356 . -5) (undo-tree-id1357 . -5) (undo-tree-id1358 . -5) (undo-tree-id1359 . -5) (undo-tree-id1360 . -5) (undo-tree-id1361 . -5) (undo-tree-id1362 . -5) (undo-tree-id1363 . -5) (undo-tree-id1364 . -5) (undo-tree-id1365 . -5) (undo-tree-id1366 . -5) (undo-tree-id1367 . -5) (undo-tree-id1368 . -5) (undo-tree-id1369 . -5) (undo-tree-id1370 . -5) (undo-tree-id1371 . -5) (undo-tree-id1372 . -5) (undo-tree-id1373 . -5) (undo-tree-id1374 . -5) (undo-tree-id1375 . -5) (undo-tree-id1376 . -5) (undo-tree-id1377 . -5) (undo-tree-id1378 . -5) (undo-tree-id1379 . -5) (undo-tree-id1380 . -5) (undo-tree-id1381 . -5) (undo-tree-id1382 . -5) (undo-tree-id1383 . -5) (undo-tree-id1384 . -5) (undo-tree-id1385 . -5) (undo-tree-id1386 . -5) (undo-tree-id1387 . -5) (undo-tree-id1388 . -5) (undo-tree-id1389 . -5) (undo-tree-id1390 . -5) (undo-tree-id1391 . -5) (undo-tree-id1392 . -5) (undo-tree-id1393 . -5) (undo-tree-id1394 . -5) (#("rgs, **kwargs):" 0 13 (fontified nil) 13 14 (fontified nil face (rainbow-delimiters-depth-1-face)) 14 15 (fontified nil)) . 362) (undo-tree-id1395 . -15) (undo-tree-id1396 . -15) (undo-tree-id1397 . -15) (undo-tree-id1398 . -15) (undo-tree-id1399 . -15) (undo-tree-id1400 . -15) (undo-tree-id1401 . -15) (undo-tree-id1402 . -15) (undo-tree-id1403 . -15) (undo-tree-id1404 . -15) (undo-tree-id1405 . -15) (undo-tree-id1406 . -15) (undo-tree-id1407 . -15) (undo-tree-id1408 . -15) (undo-tree-id1409 . -15) (undo-tree-id1410 . -15) (undo-tree-id1411 . -15) (undo-tree-id1412 . -15) (undo-tree-id1413 . -15) (undo-tree-id1414 . -15) (undo-tree-id1415 . -15) (undo-tree-id1416 . -15) (undo-tree-id1417 . -15) (undo-tree-id1418 . -15) (undo-tree-id1419 . -15) (undo-tree-id1420 . -15) (undo-tree-id1421 . -15) (undo-tree-id1422 . -15) (undo-tree-id1423 . -15) (undo-tree-id1424 . -15) (undo-tree-id1425 . -15) (undo-tree-id1426 . -15) (undo-tree-id1427 . -15) (undo-tree-id1428 . -15) (undo-tree-id1429 . -15) (undo-tree-id1430 . -15) (undo-tree-id1431 . -15) (undo-tree-id1432 . -15) (undo-tree-id1433 . -15) (undo-tree-id1434 . -15) (undo-tree-id1435 . -15) (undo-tree-id1436 . -15) (undo-tree-id1437 . -15) (undo-tree-id1438 . -15) (undo-tree-id1439 . -15) (undo-tree-id1440 . -15) (undo-tree-id1441 . -15) (undo-tree-id1442 . -15) (undo-tree-id1443 . -15) (undo-tree-id1444 . -15) (undo-tree-id1445 . -15) (undo-tree-id1446 . -15) (undo-tree-id1447 . -15) (undo-tree-id1448 . -15) (undo-tree-id1449 . -15) (undo-tree-id1450 . -15) (undo-tree-id1451 . -15) (undo-tree-id1452 . -15) (undo-tree-id1453 . -15) (undo-tree-id1454 . -15) (undo-tree-id1455 . -15) (undo-tree-id1456 . -15) (undo-tree-id1457 . -15) (undo-tree-id1458 . -15) (undo-tree-id1459 . -15) (undo-tree-id1460 . -15) (undo-tree-id1461 . -15) (undo-tree-id1462 . -15) (undo-tree-id1463 . -15) (undo-tree-id1464 . -15) (undo-tree-id1465 . -15) (undo-tree-id1466 . -15) (undo-tree-id1467 . -15) (undo-tree-id1468 . -15) (undo-tree-id1469 . -15) (undo-tree-id1470 . -15) (undo-tree-id1471 . -15) (undo-tree-id1472 . -15) (undo-tree-id1473 . -15) (undo-tree-id1474 . -15) (undo-tree-id1475 . -15) (undo-tree-id1476 . -15) (undo-tree-id1477 . -15) (undo-tree-id1478 . -15) (undo-tree-id1479 . -15) (undo-tree-id1480 . -15) (undo-tree-id1481 . -15) (undo-tree-id1482 . -15) (undo-tree-id1483 . -15) (undo-tree-id1484 . -15) (undo-tree-id1485 . -15) (#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 377) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -9) (undo-tree-id1492 . -1) (undo-tree-id1493 . -9) (undo-tree-id1494 . -9) (#("return" 0 6 (fontified nil face font-lock-keyword-face)) . 386) (undo-tree-id1495 . -6) (undo-tree-id1496 . -6) (undo-tree-id1497 . -6) (#(" self" 0 1 (fontified nil) 1 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil face font-lock-keyword-face)) . 392) (undo-tree-id1498 . -5) (undo-tree-id1499 . -4) (undo-tree-id1500 . -4) (396 . 397) (#("f." 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t)) . 396) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1)) (25701 54774 579717 515000) 0 nil])
([nil nil ((#("_last_return" 0 12 (fontified t)) . 423) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -12) (undo-tree-id4016 . -1) (undo-tree-id4017 . -2) (undo-tree-id4018 . -2) (undo-tree-id4019 . -12) (undo-tree-id4020 . -12) (undo-tree-id4021 . -2)) ((423 . 435)) (25701 55354 63403 549000) 0 nil])
([nil nil ((#("        return self.
" 0 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 21 (fontified t)) . 378) (undo-tree-id601 . -21) (undo-tree-id602 . 1) (undo-tree-id603 . -20) (undo-tree-id604 . -19) (undo-tree-id605 . -21) (undo-tree-id606 . -21) (undo-tree-id607 . 1) 397) ((378 . 399)) (25701 54773 225356 926000) 0 nil])
([nil nil ((534 . 569)) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 534) (#("_status" 0 7 (fontified nil face font-lock-variable-name-face)) . 547) (#(" = (_coroutine)" 0 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-1-face)) 4 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-1-face))) . 554)) (25701 55354 290245 213000) 0 nil] [nil nil ((423 . 427)) ((#("None" 0 4 (fontified t face font-lock-constant-face)) . 423) (undo-tree-id3937 . -3) (undo-tree-id3938 . 1) (undo-tree-id3939 . -3) (undo-tree-id3940 . -3) (undo-tree-id3941 . -3)) (25701 55333 970409 544000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -337) (undo-tree-id600 . -8) 345 (336 . 345) 304) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 336) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (337 . 345)) (25701 54772 876934 604000) 0 nil])
([nil nil ((#("            _last_return = None
            _last_except = None
" 0 12 (fontified t) 12 24 (fontified t face font-lock-variable-name-face) 24 27 (fontified t) 27 31 (fontified t face font-lock-constant-face) 31 38 (fontified t) 38 39 (fontified t) 39 44 (fontified t) 44 52 (fontified t face font-lock-variable-name-face) 52 56 (fontified t face font-lock-variable-name-face) 56 59 (fontified t) 59 62 (fontified t face font-lock-constant-face) 62 63 (fontified t face font-lock-constant-face) 63 64 (fontified t)) . 570) (undo-tree-id4022 . -62) (undo-tree-id4023 . -63) (undo-tree-id4024 . -30) (undo-tree-id4025 . -62) (undo-tree-id4026 . -55) (undo-tree-id4027 . -24) (undo-tree-id4028 . -13) (undo-tree-id4029 . -13) (undo-tree-id4030 . -13) (undo-tree-id4031 . -13) (undo-tree-id4032 . -13) (undo-tree-id4033 . -13) (undo-tree-id4034 . -13) (undo-tree-id4035 . -13) (undo-tree-id4036 . -13) (undo-tree-id4037 . -13) (undo-tree-id4038 . -13) (undo-tree-id4039 . -13) (undo-tree-id4040 . -13) (undo-tree-id4041 . -13) (undo-tree-id4042 . -13) (undo-tree-id4043 . -13) (undo-tree-id4044 . -13) (undo-tree-id4045 . -13) (undo-tree-id4046 . -13) (undo-tree-id4047 . -24) (undo-tree-id4048 . -13) (undo-tree-id4049 . -13) (undo-tree-id4050 . -13) (undo-tree-id4051 . -13) (undo-tree-id4052 . -30) (undo-tree-id4053 . -30) (undo-tree-id4054 . -30) (undo-tree-id4055 . -62) (undo-tree-id4056 . -30) (undo-tree-id4057 . -62) (undo-tree-id4058 . -62)) ((570 . 634)) (25701 55354 466245 718000) 0 nil])
nil
([nil nil ((#("        nonlocal _coroutine, _last_return, _last_except
        if _coroutine is None:
            _coroutine = func(*args, **kwargs)
        try:
            if _last_except:
                val = _coroutine.throw(_last_except)
            else:
                val = _coroutine.send(_last_return)
        except StopIteration as ex:
            import pdb;pdb.set_trace()
            _coroutine = None
            val = ex.value
        finally:
            _last_return = None
            _last_except = None
        return val
" 0 8 (fontified t) 8 16 (fontified t face font-lock-keyword-face) 16 64 (fontified t) 64 66 (fontified t face font-lock-keyword-face) 66 78 (fontified t) 78 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 85 (fontified t face font-lock-constant-face) 85 99 (fontified t) 99 109 (fontified t face font-lock-variable-name-face) 109 116 (fontified t) 116 117 (fontified t face (rainbow-delimiters-depth-1-face)) 117 132 (fontified t) 132 133 (fontified t face (rainbow-delimiters-depth-1-face)) 133 142 (fontified t) 142 145 (fontified t face font-lock-keyword-face) 145 159 (fontified t) 159 161 (fontified t face font-lock-keyword-face) 161 192 (fontified t) 192 195 (fontified t face font-lock-variable-name-face) 195 214 (fontified t) 214 215 (fontified t face (rainbow-delimiters-depth-1-face)) 215 227 (fontified t) 227 228 (fontified t face (rainbow-delimiters-depth-1-face)) 228 241 (fontified t) 241 245 (fontified t face font-lock-keyword-face) 245 247 (fontified t) 247 263 (fontified t) 263 266 (fontified t face font-lock-variable-name-face) 266 284 (fontified t) 284 285 (fontified t face (rainbow-delimiters-depth-1-face)) 285 297 (fontified t) 297 298 (fontified t face (rainbow-delimiters-depth-1-face)) 298 299 (fontified t) 299 307 (fontified t) 307 313 (fontified t face font-lock-keyword-face) 313 314 (fontified t) 314 327 (fontified t face font-lock-type-face) 327 328 (fontified t) 328 330 (fontified t face font-lock-keyword-face) 330 334 (fontified t) 334 335 (fontified t) 335 347 (fontified t) 347 353 (fontified t face font-lock-keyword-face) 353 358 (fontified t) 358 362 (fontified t) 362 371 (fontified t) 371 372 (fontified t face (rainbow-delimiters-depth-1-face)) 372 373 (fontified t face (rainbow-delimiters-depth-1-face)) 373 374 (fontified t) 374 378 (fontified t) 378 386 (fontified t) 386 387 (fontified t face font-lock-variable-name-face) 387 396 (fontified t face font-lock-variable-name-face) 396 399 (fontified t) 399 403 (fontified t face font-lock-constant-face) 403 416 (fontified t) 416 419 (fontified t face font-lock-variable-name-face) 419 428 (fontified t) 428 439 (fontified t) 439 446 (fontified t face font-lock-keyword-face) 446 460 (fontified t) 460 472 (fontified t face font-lock-variable-name-face) 472 475 (fontified t) 475 479 (fontified t face font-lock-constant-face) 479 492 (fontified t) 492 504 (fontified t face font-lock-variable-name-face) 504 507 (fontified t) 507 511 (fontified t face font-lock-constant-face) 511 512 (fontified t) 512 520 (fontified t) 520 526 (fontified t face font-lock-keyword-face) 526 530 (fontified t) 530 531 (fontified t)) . 451) (undo-tree-id487 . -512) (undo-tree-id488 . -512) (undo-tree-id489 . -531) (undo-tree-id490 . -372) (undo-tree-id491 . -372) (undo-tree-id492 . -530) (undo-tree-id493 . -299) (undo-tree-id494 . -299) (undo-tree-id495 . -299) (undo-tree-id496 . -299) (undo-tree-id497 . -299) (undo-tree-id498 . -299) (undo-tree-id499 . -299) (undo-tree-id500 . -299) (undo-tree-id501 . -299) (undo-tree-id502 . -512) (undo-tree-id503 . -503) (undo-tree-id504 . -461) (undo-tree-id505 . -472) (undo-tree-id506 . -286) (undo-tree-id507 . -297) (undo-tree-id508 . -30) (undo-tree-id509 . -41) (undo-tree-id510 . -472) (undo-tree-id511 . -461) (undo-tree-id512 . -30) (undo-tree-id513 . -286) (undo-tree-id514 . -461) (undo-tree-id515 . -30) (undo-tree-id516 . -286) (undo-tree-id517 . -461) (undo-tree-id518 . -30) (undo-tree-id519 . -286) (undo-tree-id520 . -461) (undo-tree-id521 . -30) (undo-tree-id522 . -286) (undo-tree-id523 . -461) (undo-tree-id524 . -30) (undo-tree-id525 . -286) (undo-tree-id526 . -461) (undo-tree-id527 . -30) (undo-tree-id528 . -286) (undo-tree-id529 . -461) (undo-tree-id530 . -30) (undo-tree-id531 . -286) (undo-tree-id532 . -461) (undo-tree-id533 . -30) (undo-tree-id534 . -286) (undo-tree-id535 . -461) (undo-tree-id536 . -30) (undo-tree-id537 . -286) (undo-tree-id538 . -461) (undo-tree-id539 . -30) (undo-tree-id540 . -286) (undo-tree-id541 . -461) (undo-tree-id542 . -30) (undo-tree-id543 . -286) (undo-tree-id544 . -461) (undo-tree-id545 . -30) (undo-tree-id546 . -286) (undo-tree-id547 . -461) (undo-tree-id548 . -30) (undo-tree-id549 . -286) (undo-tree-id550 . -461) (undo-tree-id551 . -30) (undo-tree-id552 . -286) (undo-tree-id553 . -461) (undo-tree-id554 . -30) (undo-tree-id555 . -286) (undo-tree-id556 . -461) (undo-tree-id557 . -30) (undo-tree-id558 . -30) (undo-tree-id559 . -286) (undo-tree-id560 . -286) (undo-tree-id561 . -461) (undo-tree-id562 . -461) (undo-tree-id563 . -531) (undo-tree-id564 . -531) (undo-tree-id565 . -531) (undo-tree-id566 . -512) (undo-tree-id567 . -56) (undo-tree-id568 . -56) (undo-tree-id569 . -87) (undo-tree-id570 . -87) (undo-tree-id571 . -134) (undo-tree-id572 . -134) (undo-tree-id573 . -147) (undo-tree-id574 . -147) (undo-tree-id575 . -176) (undo-tree-id576 . -176) (undo-tree-id577 . -229) (undo-tree-id578 . -229) (undo-tree-id579 . -247) (undo-tree-id580 . -247) (undo-tree-id581 . -299) (undo-tree-id582 . -299) (undo-tree-id583 . -335) (undo-tree-id584 . -335) (undo-tree-id585 . -374) (undo-tree-id586 . -374) (undo-tree-id587 . -404) (undo-tree-id588 . -404) (undo-tree-id589 . -431) (undo-tree-id590 . -431) (undo-tree-id591 . -448) (undo-tree-id592 . -448) (undo-tree-id593 . -480) (undo-tree-id594 . -480) (undo-tree-id595 . -512) (undo-tree-id596 . -512) (undo-tree-id597 . -531) (undo-tree-id598 . -531) (undo-tree-id599 . -512) 963) ((451 . 982)) (25701 54772 257581 933000) 0 nil])
([nil nil ((#("    wrapped._last_return = _last_return
" 0 4 (fontified t) 4 24 (fontified t face font-lock-variable-name-face) 24 40 (fontified t)) . 626) (undo-tree-id4078 . -39) (undo-tree-id4079 . -13) (undo-tree-id4080 . -24) (undo-tree-id4081 . -28) (undo-tree-id4082 . -39) (undo-tree-id4083 . -40) (undo-tree-id4084 . -27) (undo-tree-id4085 . -39) (undo-tree-id4086 . -40) (undo-tree-id4087 . -40) (undo-tree-id4088 . -40)) nil (25701 55369 732309 923000) 0 nil])
([nil nil ((nil rear-nonsticky nil 386 . 387) (#("
" 0 1 (fontified nil)) . -909) (378 . 910) 338) ((#("
        nonlocal _coroutine, _last_return, _last_except
        if _coroutine is None:
            _coroutine = func(*args, **kwargs)
        try:
            if _last_except:
                val = _coroutine.throw(_last_except)
            else:
                val = _coroutine.send(_last_return)
        except StopIteration as ex:
            import pdb;pdb.set_trace()
            _coroutine = None
            val = ex.value
        finally:
            _last_return = None
            _last_except = None
        return val
" 0 1 (fontified t) 1 8 (fontified nil) 8 9 (fontified nil rear-nonsticky nil) 9 17 (fontified nil face font-lock-keyword-face) 17 57 (fontified nil) 57 65 (fontified t) 65 67 (fontified t face font-lock-keyword-face) 67 68 (fontified t) 68 79 (fontified t) 79 81 (fontified t face font-lock-keyword-face) 81 82 (fontified t) 82 86 (fontified t face font-lock-constant-face) 86 87 (fontified t) 87 88 (fontified t) 88 100 (fontified t) 100 110 (fontified t face font-lock-variable-name-face) 110 113 (fontified t) 113 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-1-face)) 118 133 (fontified t) 133 134 (fontified t face (rainbow-delimiters-depth-1-face)) 134 135 (fontified t) 135 143 (fontified t) 143 146 (fontified t face font-lock-keyword-face) 146 148 (fontified t) 148 160 (fontified t) 160 162 (fontified t face font-lock-keyword-face) 162 163 (fontified t) 163 177 (fontified t) 177 193 (fontified t) 193 196 (fontified t face font-lock-variable-name-face) 196 199 (fontified t) 199 215 (fontified t) 215 216 (fontified t face (rainbow-delimiters-depth-1-face)) 216 228 (fontified t) 228 229 (fontified t face (rainbow-delimiters-depth-1-face)) 229 230 (fontified t) 230 242 (fontified t) 242 246 (fontified t face font-lock-keyword-face) 246 248 (fontified t) 248 264 (fontified t) 264 267 (fontified t face font-lock-variable-name-face) 267 285 (fontified t) 285 286 (fontified t face (rainbow-delimiters-depth-1-face)) 286 298 (fontified t) 298 299 (fontified t face (rainbow-delimiters-depth-1-face)) 299 300 (fontified t) 300 308 (fontified t) 308 314 (fontified t face font-lock-keyword-face) 314 315 (fontified t) 315 328 (fontified t face font-lock-type-face) 328 329 (fontified t) 329 331 (fontified t face font-lock-keyword-face) 331 335 (fontified t) 335 336 (fontified t) 336 348 (fontified t) 348 354 (fontified t face font-lock-keyword-face) 354 359 (fontified t) 359 363 (fontified t) 363 372 (fontified t) 372 373 (fontified t face (rainbow-delimiters-depth-1-face)) 373 374 (fontified t face (rainbow-delimiters-depth-1-face)) 374 375 (fontified t) 375 379 (fontified t) 379 383 (fontified t) 383 387 (fontified t) 387 388 (fontified t face font-lock-variable-name-face) 388 397 (fontified t face font-lock-variable-name-face) 397 400 (fontified t) 400 404 (fontified t face font-lock-constant-face) 404 417 (fontified t) 417 420 (fontified t face font-lock-variable-name-face) 420 429 (fontified t) 429 440 (fontified t) 440 447 (fontified t face font-lock-keyword-face) 447 460 (fontified t) 460 461 (fontified t) 461 473 (fontified t face font-lock-variable-name-face) 473 476 (fontified t) 476 480 (fontified t face font-lock-constant-face) 480 493 (fontified t) 493 505 (fontified t face font-lock-variable-name-face) 505 508 (fontified t) 508 512 (fontified t face font-lock-constant-face) 512 513 (fontified t) 513 521 (fontified nil) 521 527 (fontified nil face font-lock-keyword-face) 527 531 (fontified nil) 531 532 (fontified nil)) . 378) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -88) (undo-tree-id789 . -88) (undo-tree-id790 . -135) (undo-tree-id791 . -135) (undo-tree-id792 . -148) (undo-tree-id793 . -148) (undo-tree-id794 . -177) (undo-tree-id795 . -177) (undo-tree-id796 . -230) (undo-tree-id797 . -230) (undo-tree-id798 . -248) (undo-tree-id799 . -248) (undo-tree-id800 . -300) (undo-tree-id801 . -300) (undo-tree-id802 . -336) (undo-tree-id803 . -336) (undo-tree-id804 . -375) (undo-tree-id805 . -375) (undo-tree-id806 . -405) (undo-tree-id807 . -405) (undo-tree-id808 . -432) (undo-tree-id809 . -432) (undo-tree-id810 . -449) (undo-tree-id811 . -449) (undo-tree-id812 . -481) (undo-tree-id813 . -481) (undo-tree-id814 . -513) (undo-tree-id815 . -513) (undo-tree-id816 . -1) (undo-tree-id817 . -57) (undo-tree-id818 . -69) (undo-tree-id819 . -69) (undo-tree-id820 . -69) (undo-tree-id821 . -101) (undo-tree-id822 . -69) (undo-tree-id823 . -69) (undo-tree-id824 . -101) (undo-tree-id825 . -101) (undo-tree-id826 . -200) (undo-tree-id827 . -101) (undo-tree-id828 . -101) (undo-tree-id829 . -200) (undo-tree-id830 . -200) (undo-tree-id831 . -271) (undo-tree-id832 . -200) (undo-tree-id833 . -200) (undo-tree-id834 . -271) (undo-tree-id835 . -271) (undo-tree-id836 . -388) (undo-tree-id837 . -271) (undo-tree-id838 . -271) (undo-tree-id839 . -388) (undo-tree-id840 . -388) (undo-tree-id841 . -388) (undo-tree-id842 . -388) (undo-tree-id843 . -388) (undo-tree-id844 . -388) (undo-tree-id845 . -494) (undo-tree-id846 . -505) (undo-tree-id847 . -217) (undo-tree-id848 . -228) (undo-tree-id849 . -164) (undo-tree-id850 . -175) (undo-tree-id851 . -494) (undo-tree-id852 . -9) (undo-tree-id853 . -494) (undo-tree-id854 . -388) (undo-tree-id855 . -388) (undo-tree-id856 . -494) (undo-tree-id857 . -494) (undo-tree-id858 . -494) (undo-tree-id859 . -494) (undo-tree-id860 . -164) (undo-tree-id861 . -164) (undo-tree-id862 . -164) (undo-tree-id863 . -217) (undo-tree-id864 . -164) (undo-tree-id865 . -164) (undo-tree-id866 . -217) (undo-tree-id867 . -217) (undo-tree-id868 . -494) (undo-tree-id869 . -217) (undo-tree-id870 . -217) (undo-tree-id871 . -494) (undo-tree-id872 . -494) (undo-tree-id873 . -494) (undo-tree-id874 . -494) (undo-tree-id875 . -164) (undo-tree-id876 . -164) (undo-tree-id877 . -164) (undo-tree-id878 . -217) (undo-tree-id879 . -164) (undo-tree-id880 . -164) (undo-tree-id881 . -217) (undo-tree-id882 . -217) (undo-tree-id883 . -494) (undo-tree-id884 . -217) (undo-tree-id885 . -217) (undo-tree-id886 . -494) (undo-tree-id887 . -494) (undo-tree-id888 . -494) (undo-tree-id889 . -494) (undo-tree-id890 . -164) (undo-tree-id891 . -164) (undo-tree-id892 . -164) (undo-tree-id893 . -217) (undo-tree-id894 . -164) (undo-tree-id895 . -164) (undo-tree-id896 . -217) (undo-tree-id897 . -217) (undo-tree-id898 . -494) (undo-tree-id899 . -217) (undo-tree-id900 . -217) (undo-tree-id901 . -494) (undo-tree-id902 . -494) (undo-tree-id903 . -494) (undo-tree-id904 . -494) (undo-tree-id905 . -164) (undo-tree-id906 . -164) (undo-tree-id907 . -164) (undo-tree-id908 . -217) (undo-tree-id909 . -164) (undo-tree-id910 . -164) (undo-tree-id911 . -217) (undo-tree-id912 . -217) (undo-tree-id913 . -494) (undo-tree-id914 . -217) (undo-tree-id915 . -217) (undo-tree-id916 . -494) (undo-tree-id917 . -494) (undo-tree-id918 . -494) (undo-tree-id919 . -494) (undo-tree-id920 . -164) (undo-tree-id921 . -164) (undo-tree-id922 . -164) (undo-tree-id923 . -217) (undo-tree-id924 . -164) (undo-tree-id925 . -164) (undo-tree-id926 . -217) (undo-tree-id927 . -217) (undo-tree-id928 . -494) (undo-tree-id929 . -217) (undo-tree-id930 . -217) (undo-tree-id931 . -494) (undo-tree-id932 . -494) (undo-tree-id933 . -494) (undo-tree-id934 . -494) (undo-tree-id935 . -164) (undo-tree-id936 . -164) (undo-tree-id937 . -164) (undo-tree-id938 . -217) (undo-tree-id939 . -164) (undo-tree-id940 . -164) (undo-tree-id941 . -217) (undo-tree-id942 . -217) (undo-tree-id943 . -494) (undo-tree-id944 . -217) (undo-tree-id945 . -217) (undo-tree-id946 . -494) (undo-tree-id947 . -494) (undo-tree-id948 . -494) (undo-tree-id949 . -494) (undo-tree-id950 . -164) (undo-tree-id951 . -164) (undo-tree-id952 . -164) (undo-tree-id953 . -217) (undo-tree-id954 . -164) (undo-tree-id955 . -164) (undo-tree-id956 . -217) (undo-tree-id957 . -217) (undo-tree-id958 . -494) (undo-tree-id959 . -217) (undo-tree-id960 . -217) (undo-tree-id961 . -494) (undo-tree-id962 . -494) (undo-tree-id963 . -494) (undo-tree-id964 . -494) (undo-tree-id965 . -164) (undo-tree-id966 . -164) (undo-tree-id967 . -164) (undo-tree-id968 . -217) (undo-tree-id969 . -164) (undo-tree-id970 . -164) (undo-tree-id971 . -217) (undo-tree-id972 . -217) (undo-tree-id973 . -494) (undo-tree-id974 . -217) (undo-tree-id975 . -217) (undo-tree-id976 . -494) (undo-tree-id977 . -494) (undo-tree-id978 . -494) (undo-tree-id979 . -494) (undo-tree-id980 . -164) (undo-tree-id981 . -164) (undo-tree-id982 . -164) (undo-tree-id983 . -217) (undo-tree-id984 . -164) (undo-tree-id985 . -164) (undo-tree-id986 . -217) (undo-tree-id987 . -217) (undo-tree-id988 . -494) (undo-tree-id989 . -217) (undo-tree-id990 . -217) (undo-tree-id991 . -494) (undo-tree-id992 . -494) (undo-tree-id993 . -494) (undo-tree-id994 . -494) (undo-tree-id995 . -164) (undo-tree-id996 . -146) (undo-tree-id997 . -164) (undo-tree-id998 . -109) (undo-tree-id999 . -146) (undo-tree-id1000 . -73) (undo-tree-id1001 . -109) (undo-tree-id1002 . -73) (undo-tree-id1003 . -216) (undo-tree-id1004 . -286) (undo-tree-id1005 . -216) (undo-tree-id1006 . -163) (undo-tree-id1007 . -286) (undo-tree-id1008 . -199) (undo-tree-id1009 . -163) (undo-tree-id1010 . -199) (undo-tree-id1011 . -113) (undo-tree-id1012 . -68) (undo-tree-id1013 . -113) (undo-tree-id1014 . -9) (undo-tree-id1015 . -68) (undo-tree-id1016 . -9) (909 . 910) (nil rear-nonsticky t 386 . 387)) (25701 54772 207232 799000) 0 nil])
([nil nil ((#("    wrapped._last_except = _last_except
" 0 4 (fontified t) 4 24 (fontified t face font-lock-variable-name-face) 24 39 (fontified t) 39 40 (fontified t)) . 626) (undo-tree-id4072 . -39) (undo-tree-id4073 . -40) (undo-tree-id4074 . -27) (undo-tree-id4075 . -39) (undo-tree-id4076 . -39) (undo-tree-id4077 . -40)) nil (25701 55369 732296 658000) 0 nil])
([nil nil ((#("        nonlocal _coroutine, _last_return, _last_except
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 16 (fontified t face font-lock-keyword-face) 16 56 (fontified t)) . 379) (undo-tree-id478 . -56) (undo-tree-id479 . -55) (undo-tree-id480 . -8) (undo-tree-id481 . -17) (undo-tree-id482 . -27) (undo-tree-id483 . -29) (undo-tree-id484 . -41) (undo-tree-id485 . -43) (undo-tree-id486 . -55) 387) ((379 . 435)) (25701 54772 193845 272000) 0 nil])
([nil nil ((651 . 655) (630 . 651) (625 . 630) 594) nil (25701 55369 732237 306000) 0 nil])
([nil nil ((393 . 395) (#("f" 0 1 (fontified t)) . -393) (undo-tree-id477 . -1) (390 . 394)) ((#("self" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil)) . 390) (393 . 394) (#("f." 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t)) . 393)) (25701 54772 148477 985000) 0 nil])
([nil nil ((#("    wrapped._coroutine = _coroutine
" 0 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 22 (fontified t face font-lock-variable-name-face) 22 35 (fontified t) 35 36 (fontified t)) . 590) (undo-tree-id4059 . -35) (undo-tree-id4060 . -36) (undo-tree-id4061 . -28) (undo-tree-id4062 . -4) (undo-tree-id4063 . -36) (undo-tree-id4064 . -4) (undo-tree-id4065 . -4) (undo-tree-id4066 . -4) (undo-tree-id4067 . -28) (undo-tree-id4068 . -28) (undo-tree-id4069 . -25) (undo-tree-id4070 . -35) (undo-tree-id4071 . -36) 618) nil (25701 55369 732232 704000) 0 nil])
([nil nil ((443 . 445) (#("f" 0 1 (fontified t)) . -443) (undo-tree-id476 . -1) (440 . 444)) ((#("self" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil)) . 440) (443 . 444) (#("f." 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t)) . 443)) (25701 54772 130855 973000) 0 nil])
([nil nil ((638 . 639)) nil (25701 55369 732201 149000) 0 nil])
([nil nil ((239 . 243) (#("f" 0 1 (fontified t)) . -239) (undo-tree-id475 . -1) (237 . 240)) ((#(", f" 0 2 (fontified nil) 2 3 (fontified nil)) . 237) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (239 . 240) (#("func" 0 4 (fontified t)) . 239) (undo-tree-id784 . -1) (undo-tree-id785 . -1)) (25701 54772 106846 753000) 0 nil])
([nil nil ((423 . 427) (t 25701 55369 752469 239000)) nil (25701 55407 588665 247000) 0 nil])
([nil nil ((363 . 367) (#("f" 0 1 (fontified t)) . -363) (undo-tree-id472 . -1) (356 . 364) (#("f" 0 1 (fontified t)) . -356) (undo-tree-id473 . -1) (354 . 357) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -354) (undo-tree-id474 . -1) (351 . 355) (342 . 351) 336) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 342) (undo-tree-id715 . -9) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -9) (undo-tree-id719 . -9) (undo-tree-id720 . -9) (undo-tree-id721 . -9) (undo-tree-id722 . -9) (undo-tree-id723 . -9) (undo-tree-id724 . -9) (undo-tree-id725 . -9) (undo-tree-id726 . -9) (undo-tree-id727 . -9) (undo-tree-id728 . -9) (undo-tree-id729 . -9) (#("self" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face)) . 351) (undo-tree-id730 . -3) (undo-tree-id731 . -3) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -3) (undo-tree-id738 . -3) (undo-tree-id739 . -3) (undo-tree-id740 . -3) (undo-tree-id741 . -3) (undo-tree-id742 . -3) (354 . 355) (#("f.f" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil) 2 3 (fontified nil)) . 354) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -2) (undo-tree-id747 . -2) (undo-tree-id748 . -2) (undo-tree-id749 . -2) (undo-tree-id750 . -2) (undo-tree-id751 . -2) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (356 . 357) (#("func = f" 0 7 (fontified nil) 7 8 (fontified nil)) . 356) (undo-tree-id756 . -7) (undo-tree-id757 . -7) (undo-tree-id758 . -7) (undo-tree-id759 . -7) (undo-tree-id760 . -7) (undo-tree-id761 . -7) (undo-tree-id762 . -7) (undo-tree-id763 . -7) (undo-tree-id764 . -7) (undo-tree-id765 . -7) (undo-tree-id766 . -7) (undo-tree-id767 . -7) (undo-tree-id768 . -7) (363 . 364) (#("func" 0 4 (fontified t)) . 363) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -3) (undo-tree-id776 . -3) (undo-tree-id777 . -3) (undo-tree-id778 . -3) (undo-tree-id779 . -4) (undo-tree-id780 . -1) (undo-tree-id781 . -1)) (25701 54772 63008 62000) 0 nil])
([nil nil ((572 . 573) (t 25701 55407 603974 975000)) nil (25701 55430 425580 866000) 0 nil])
([nil nil ((565 . 567) (#("f" 0 1 (fontified t)) . -565) (undo-tree-id471 . -1) (562 . 566)) ((#("self" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil)) . 562) (565 . 566) (#("f." 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t)) . 565)) (25701 54772 42659 494000) 0 nil])
([nil nil ((587 . 601) (574 . 587) (t 25701 55430 443676 851000) 573) nil (25701 55485 795097 906000) 0 nil])
([nil nil ((526 . 531)) ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 526)) (25701 54772 10682 871000) 0 nil])
([nil nil ((234 . 235) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -234) (undo-tree-id4149 . -1) (undo-tree-id4150 . 1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) 235 (t 25701 55485 810954 488000)) nil (25701 55600 537554 149000) 0 nil])
([nil nil ((659 . 664)) ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 659)) (25701 54771 971872 740000) 0 nil])
([nil nil ((240 . 241) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -240) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (#("0" 0 1 (fontified t face highlight-numbers-number)) . -241) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -242) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) 243 (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 243) (undo-tree-id4134 . -1) (undo-tree-id4135 . 1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (240 . 243) 241 (240 . 241) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -240) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) 241) nil (25701 55600 537540 993000) 0 nil])
([nil nil ((589 . 594)) ((#("self." 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 589)) (25701 54771 930263 277000) 0 nil])
([nil nil ((561 . 562) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -561) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . 1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) 562) nil (25701 55600 537496 51000) 0 nil])
([nil nil ((1007 . 1012) (#("f" 0 1 (fontified t)) . -1007) (undo-tree-id467 . -1) (999 . 1008) (#("wrapped" 0 7 (fontified t)) . -999) (undo-tree-id468 . -7) (undo-tree-id470 . -7) 1006) ((999 . 1006) (#("Wrapper(f" 0 7 (fontified nil) 7 8 (fontified nil face (rainbow-delimiters-depth-1-face)) 8 9 (fontified nil)) . 999) (undo-tree-id705 . -8) (undo-tree-id706 . 2) (undo-tree-id707 . -8) (undo-tree-id708 . 1) (undo-tree-id709 . -8) (undo-tree-id710 . -8) (1007 . 1008) (#("func)" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-1-face))) . 1007) (undo-tree-id711 . -4) (undo-tree-id712 . 1) (undo-tree-id713 . -5) (undo-tree-id714 . -4)) (25701 54771 890425 629000) 0 nil])
([nil nil ((573 . 574) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -573) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) 574) nil (25701 55600 537481 3000) 0 nil])
([nil nil ((#("
    @wraps(func)
    def wrapped(*args, **kwargs):

" 0 1 (fontified t) 1 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 22 (fontified t) 22 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 33 (fontified t face font-lock-function-name-face) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 35 (fontified t) 35 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-1-face)) 50 52 (fontified t) 52 53 (fontified t)) . 935) (undo-tree-id289 . -52) (undo-tree-id290 . -1) (undo-tree-id291 . -52) (undo-tree-id292 . -52) (undo-tree-id293 . -52) (undo-tree-id294 . -52) (undo-tree-id295 . -52) (undo-tree-id296 . -52) (undo-tree-id297 . -52) (undo-tree-id298 . -52) (undo-tree-id299 . -52) (undo-tree-id300 . -52) (undo-tree-id301 . -52) (undo-tree-id302 . -52) (undo-tree-id303 . -52) (undo-tree-id304 . -52) (undo-tree-id305 . -52) (undo-tree-id306 . -52) (undo-tree-id308 . -53) (undo-tree-id309 . -52) (undo-tree-id310 . -52) (undo-tree-id311 . -52) (undo-tree-id313 . -53) (undo-tree-id314 . -52) (undo-tree-id315 . -52) (undo-tree-id316 . -52) (undo-tree-id318 . -53) (undo-tree-id319 . -52) (undo-tree-id320 . -52) (undo-tree-id321 . -52) (undo-tree-id323 . -53) (undo-tree-id324 . -52) (undo-tree-id325 . -52) (undo-tree-id326 . -52) (undo-tree-id328 . -53) (undo-tree-id329 . -52) (undo-tree-id330 . -52) (undo-tree-id331 . -52) (undo-tree-id333 . -53) (undo-tree-id334 . -52) (undo-tree-id335 . -52) (undo-tree-id336 . -52) (undo-tree-id338 . -53) (undo-tree-id339 . -52) (undo-tree-id340 . -52) (undo-tree-id341 . -52) (undo-tree-id343 . -53) (undo-tree-id344 . -52) (undo-tree-id345 . -52) (undo-tree-id346 . -52) (undo-tree-id348 . -53) (undo-tree-id349 . -52) (undo-tree-id350 . -52) (undo-tree-id351 . -52) (undo-tree-id352 . -53) (undo-tree-id353 . -53) (undo-tree-id354 . -52) (undo-tree-id355 . -52) (undo-tree-id356 . -52) (undo-tree-id357 . -53) (undo-tree-id358 . -53) (undo-tree-id359 . -52) (undo-tree-id360 . -52) (undo-tree-id361 . -52) (undo-tree-id362 . -53) (undo-tree-id363 . -53) (undo-tree-id364 . -52) (undo-tree-id365 . -52) (undo-tree-id366 . -52) (undo-tree-id367 . -53) (undo-tree-id368 . -53) (undo-tree-id369 . -52) (undo-tree-id370 . -52) (undo-tree-id371 . -52) (undo-tree-id372 . -53) (undo-tree-id373 . -53) (undo-tree-id374 . -52) (undo-tree-id375 . -52) (undo-tree-id376 . -52) (undo-tree-id377 . -53) (undo-tree-id378 . -53) (undo-tree-id379 . -52) (undo-tree-id380 . -52) (undo-tree-id381 . -52) (undo-tree-id382 . -53) (undo-tree-id383 . -53) (undo-tree-id384 . -52) (undo-tree-id385 . -52) (undo-tree-id386 . -52) (undo-tree-id387 . -52) (undo-tree-id388 . -52) (undo-tree-id389 . -52) (undo-tree-id390 . -53) (undo-tree-id392 . -53) (undo-tree-id394 . -52) (undo-tree-id395 . -52) (undo-tree-id396 . -52) (undo-tree-id398 . -1) (undo-tree-id400 . -18) (undo-tree-id402 . -52) (undo-tree-id403 . -52) (undo-tree-id404 . -52) (undo-tree-id405 . -52) (undo-tree-id406 . -52) (undo-tree-id407 . -52) (undo-tree-id408 . -52) (undo-tree-id409 . -52) (undo-tree-id410 . -52) (undo-tree-id411 . -52) (undo-tree-id412 . -52) (undo-tree-id413 . -52) (undo-tree-id414 . -52) (undo-tree-id415 . -52) (undo-tree-id416 . -52) (undo-tree-id417 . -52) (undo-tree-id418 . -52) (undo-tree-id419 . -52) (undo-tree-id420 . -52) (undo-tree-id421 . -52) (undo-tree-id422 . -52) (undo-tree-id423 . -52) (undo-tree-id424 . -52) (undo-tree-id425 . -52) (undo-tree-id426 . -52) (undo-tree-id427 . -52) (undo-tree-id428 . -52) (undo-tree-id429 . -52) (undo-tree-id430 . -52) (undo-tree-id431 . -52) (undo-tree-id432 . -52) (undo-tree-id433 . -52) (undo-tree-id434 . -52) (undo-tree-id436 . -53) (undo-tree-id438 . -52) (undo-tree-id440 . -52) (undo-tree-id442 . -18) (undo-tree-id444 . -52) (undo-tree-id446 . -53) (undo-tree-id448 . -53) (undo-tree-id450 . -52) (undo-tree-id452 . -53) (undo-tree-id454 . -53) (undo-tree-id456 . -53) (undo-tree-id458 . -52) (undo-tree-id459 . -52) (undo-tree-id461 . -52) (undo-tree-id463 . -18) (undo-tree-id465 . -1)) ((935 . 988)) (25701 54771 875604 820000) 0 nil])
([nil nil ((558 . 561) (t 25701 55600 557458 808000)) nil (25701 55631 120250 659000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -916) (undo-tree-id659 . -4) (undo-tree-id661 . -4) 920 (915 . 920) (t 25701 16922 861899 674000) 915) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 915) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (916 . 920)) (25701 54771 826143 738000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -564) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . 1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) 565) nil (25701 55631 120247 501000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -960) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . 1) (undo-tree-id668 . -1) (undo-tree-id670 . -1) (undo-tree-id672 . -1) (undo-tree-id674 . -1) (undo-tree-id676 . -1) (undo-tree-id678 . -1) (undo-tree-id680 . -1) (undo-tree-id682 . -1) (undo-tree-id684 . -1) (undo-tree-id686 . -1) (undo-tree-id688 . -1) 961 (t 25701 16925 941863 14000)) ((960 . 961)) (25701 54771 333754 170000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -574) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -575) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) 576) nil (25701 55631 120231 340000) 0 nil])
([nil nil ((960 . 961)) ((#("
" 0 1 (fontified t)) . 960) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (t 25701 16950 49577 66000)) (25701 17829 328622 192000) 0 nil])
([nil nil ((#("            print(_status)
" 0 12 (fontified t) 12 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t)) . 575) (undo-tree-id4184 . -26) (undo-tree-id4185 . -26) (undo-tree-id4186 . -27) (undo-tree-id4187 . -27) (undo-tree-id4188 . -27) (undo-tree-id4189 . -27) (undo-tree-id4190 . -27) (undo-tree-id4191 . -27) (undo-tree-id4192 . -27) (undo-tree-id4193 . -27) (undo-tree-id4194 . -27) (undo-tree-id4195 . -27) (undo-tree-id4196 . -27) (undo-tree-id4197 . -27) (undo-tree-id4198 . -27) (undo-tree-id4199 . -27) (undo-tree-id4200 . -27) (undo-tree-id4201 . -27) (undo-tree-id4202 . -27) (undo-tree-id4203 . -27) (undo-tree-id4204 . -27) (undo-tree-id4205 . -27) (undo-tree-id4206 . -27) (undo-tree-id4207 . -27) (undo-tree-id4208 . -27) (undo-tree-id4209 . -27) (undo-tree-id4210 . -27) (undo-tree-id4211 . -27) (undo-tree-id4212 . -26) (undo-tree-id4213 . -26) (undo-tree-id4214 . -26) (undo-tree-id4215 . -25) (undo-tree-id4216 . -25) (undo-tree-id4217 . -25) (undo-tree-id4218 . -27) (undo-tree-id4219 . -27) (undo-tree-id4220 . -25) (undo-tree-id4221 . -26) (undo-tree-id4222 . -25) (undo-tree-id4223 . -26) (undo-tree-id4224 . 10) (undo-tree-id4225 . -18) (undo-tree-id4226 . 2) (undo-tree-id4227 . -26) (undo-tree-id4228 . -25) (undo-tree-id4229 . -25) (undo-tree-id4230 . -25) (undo-tree-id4231 . -27) 600 (t 25701 55631 137060 492000)) nil (25701 55695 889987 666000) 0 nil])
([nil nil ((395 . 398) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -395) (undo-tree-id690 . -1) (392 . 396) (t 25701 16950 49577 66000)) ((#("self" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face)) . 392) (undo-tree-id691 . -4) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (395 . 396) (#("f, " 0 1 (fontified t face font-lock-keyword-face) 1 3 (fontified t)) . 395) (undo-tree-id696 . -2) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -1) (undo-tree-id700 . -2)) (25701 17829 317060 64000) 0 nil])
([nil nil ((217 . 230) (t 25701 55695 908217 147000)) nil (25701 56135 574355 279000) 0 nil])
nil
([nil nil ((369 . 376) (363 . 369) (350 . 363) (341 . 350) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -341) (undo-tree-id4438 . -1) (340 . 342) (331 . 340) 330) nil (25701 56135 574353 144000) 0 nil])
([nil nil ((289 . 294)) nil (25701 56135 574349 782000) 0 nil])
([nil nil ((394 . 395) (381 . 394)) nil (25701 56135 574348 734000) 0 nil])
([nil nil ((395 . 399)) nil (25701 56135 574347 525000) 0 nil])
([nil nil ((348 . 352)) nil (25701 56135 574346 473000) 0 nil])
([nil nil ((#("        nonlocal _status
" 0 8 (fontified t) 8 16 (fontified t face font-lock-keyword-face) 16 24 (fontified t) 24 25 (fontified t)) . 312) (undo-tree-id4432 . -24) (undo-tree-id4433 . -25) (undo-tree-id4434 . -14) (undo-tree-id4435 . -14) (undo-tree-id4436 . -14) (undo-tree-id4437 . -25) 326) nil (25701 56135 574344 922000) 0 nil])
([nil nil ((nil rear-nonsticky nil 342 . 343) (#("
" 0 1 (fontified nil)) . -359) (334 . 360) 326) nil (25701 56135 574338 306000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -347) (undo-tree-id4428 . -8) (undo-tree-id4429 . -8) (undo-tree-id4430 . -8) (undo-tree-id4431 . -8) (335 . 347) 343) nil (25701 56135 574335 476000) 0 nil])
([nil nil ((259 . 276) (254 . 259) 241) nil (25701 56135 574330 423000) 0 nil])
([nil nil ((#("    _status = [None,]
" 0 4 (fontified t) 4 11 (fontified t face font-lock-variable-name-face) 11 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-1-face)) 15 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 22 (fontified t)) . 233) (undo-tree-id4411 . -21) (undo-tree-id4412 . -20) (undo-tree-id4413 . -20) (undo-tree-id4414 . -22) (undo-tree-id4415 . -20) (undo-tree-id4416 . -8) (undo-tree-id4417 . -22) (undo-tree-id4418 . -4) (undo-tree-id4419 . -4) (undo-tree-id4420 . -8) (undo-tree-id4421 . -20) (undo-tree-id4422 . -20) (undo-tree-id4423 . 8) (undo-tree-id4424 . -15) (undo-tree-id4425 . 2) (undo-tree-id4426 . -21) (undo-tree-id4427 . -22) 253) nil (25701 56135 574327 246000) 0 nil])
([nil nil ((357 . 366) (#("status" 0 6 (fontified t)) . -357) (undo-tree-id4405 . -6) (undo-tree-id4406 . -6) (undo-tree-id4407 . -6) (undo-tree-id4408 . -6) (undo-tree-id4409 . -6) (undo-tree-id4410 . -6) 363) nil (25701 56135 574309 446000) 0 nil])
([nil nil ((375 . 380) (#("    " 0 4 (fontified t)) . -375) (undo-tree-id4399 . -4) (undo-tree-id4400 . -4) (undo-tree-id4401 . -4) (undo-tree-id4402 . -4) (undo-tree-id4403 . -4) (undo-tree-id4404 . -4) 379 (366 . 379) 365) nil (25701 56135 574301 268000) 0 nil])
([nil nil ((#(" or " 0 1 (fontified t) 1 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 420) (undo-tree-id4392 . -3) (undo-tree-id4393 . -4) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -4)) nil (25701 56135 574290 501000) 0 nil])
([nil nil ((406 . 414)) nil (25701 56135 574136 86000) 0 nil])
([nil nil ((417 . 420)) nil (25701 56135 574135 153000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face font-lock-string-face)) . -420) (undo-tree-id4385 . 1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) 421) nil (25701 56135 574133 693000) 0 nil])
([nil nil ((430 . 438)) nil (25701 56135 574127 46000) 0 nil])
([nil nil ((#("        _coroutine = _status[0] or func(*args, **kwargs)
" 0 8 (fontified t) 8 18 (fontified t face font-lock-variable-name-face) 18 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-1-face)) 29 30 (fontified t face highlight-numbers-number) 30 31 (fontified t face (rainbow-delimiters-depth-1-face)) 31 32 (fontified t) 32 34 (fontified t face font-lock-keyword-face) 34 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-1-face)) 40 55 (fontified t) 55 56 (fontified t face (rainbow-delimiters-depth-1-face)) 56 57 (fontified t)) . 439) (undo-tree-id4365 . -56) (undo-tree-id4366 . -19) (undo-tree-id4367 . -19) (undo-tree-id4368 . -37) (undo-tree-id4369 . -29) (undo-tree-id4370 . -57) (undo-tree-id4371 . -57) (undo-tree-id4372 . -57) (undo-tree-id4373 . -55) (undo-tree-id4374 . -55) (undo-tree-id4375 . -21) (undo-tree-id4376 . -28) (undo-tree-id4377 . -55) (undo-tree-id4378 . -55) (undo-tree-id4379 . -55) (undo-tree-id4380 . 18) (undo-tree-id4381 . -40) (undo-tree-id4382 . 2) (undo-tree-id4383 . -56) (undo-tree-id4384 . -57) 494) nil (25701 56135 574124 425000) 0 nil])
([nil nil ((nil rear-nonsticky nil 446 . 447) (#("
" 0 1 (fontified nil)) . -495) (438 . 496) 392) nil (25701 56135 574103 929000) 0 nil])
([nil nil ((460 . 470)) nil (25701 56135 574102 460000) 0 nil])
([nil nil ((#("_status[0] " 0 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 9 (fontified t face highlight-numbers-number) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 11 (fontified t)) . 470) (undo-tree-id4361 . 11) (undo-tree-id4362 . -10) (undo-tree-id4363 . -7) (undo-tree-id4364 . -11)) nil (25701 56135 574100 660000) 0 nil])
([nil nil ((470 . 471)) nil (25701 56135 574094 987000) 0 nil])
([nil nil ((724 . 725) (703 . 724) (698 . 703) (#("_" 0 1 (fontified t)) . -698) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) 699 (698 . 699) (681 . 698) (672 . 681) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -672) (undo-tree-id4360 . -1) (671 . 673) (658 . 671) 657) nil (25701 56135 574092 525000) 0 nil])
([nil nil ((760 . 762) (743 . 760) (738 . 743) (#("    " 0 4 (fontified t)) . -738) (undo-tree-id4356 . -4) 742 (725 . 742) 724) nil (25701 56135 574085 971000) 0 nil])
([nil nil ((760 . 773) (743 . 760) 742) nil (25701 56135 574082 852000) 0 nil])
([nil nil ((#("            else:
                _coroutine = 
                >>
            _status[0] = _coroutine
" 0 12 (fontified t) 12 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t) 17 18 (fontified t) 18 34 (fontified t) 34 44 (fontified t face font-lock-variable-name-face) 44 47 (fontified t) 47 48 (fontified t) 48 66 (fontified t) 66 67 (fontified t) 67 79 (fontified t) 79 86 (fontified t face font-lock-variable-name-face) 86 87 (fontified t face (rainbow-delimiters-depth-1-face)) 87 88 (fontified t face highlight-numbers-number) 88 89 (fontified t face (rainbow-delimiters-depth-1-face)) 89 92 (fontified t) 92 102 (fontified t) 102 103 (fontified t)) . 726) (undo-tree-id4242 . -83) (undo-tree-id4243 . 56) (undo-tree-id4244 . -102) (undo-tree-id4245 . -16) (undo-tree-id4246 . -83) (undo-tree-id4247 . -103) (undo-tree-id4248 . -103) (undo-tree-id4249 . -103) (undo-tree-id4250 . -103) (undo-tree-id4251 . -103) (undo-tree-id4252 . -103) (undo-tree-id4253 . -103) (undo-tree-id4254 . -103) (undo-tree-id4255 . -103) (undo-tree-id4256 . -103) (undo-tree-id4257 . -103) (undo-tree-id4258 . -103) (undo-tree-id4259 . -103) (undo-tree-id4260 . -103) (undo-tree-id4261 . -103) (undo-tree-id4262 . -103) (undo-tree-id4263 . -103) (undo-tree-id4264 . -103) (undo-tree-id4265 . -103) (undo-tree-id4266 . -103) (undo-tree-id4267 . -103) (undo-tree-id4268 . -103) (undo-tree-id4269 . -103) (undo-tree-id4270 . -103) (undo-tree-id4271 . -103) (undo-tree-id4272 . -103) (undo-tree-id4273 . -103) (undo-tree-id4274 . -103) (undo-tree-id4275 . -103) (undo-tree-id4276 . -103) (undo-tree-id4277 . -67) (undo-tree-id4278 . -67) (undo-tree-id4279 . -103) (undo-tree-id4280 . -103) (undo-tree-id4281 . -67) (undo-tree-id4282 . -103) (undo-tree-id4283 . -83) (undo-tree-id4284 . 37) (undo-tree-id4285 . -17) (undo-tree-id4286 . -16) (undo-tree-id4287 . -12) (undo-tree-id4288 . -12) (undo-tree-id4289 . -64) (undo-tree-id4290 . -64) (undo-tree-id4291 . -17) (undo-tree-id4292 . -65) (undo-tree-id4293 . -64) (undo-tree-id4294 . -66) (undo-tree-id4295 . -65) (undo-tree-id4296 . -65) (undo-tree-id4297 . -65) (undo-tree-id4298 . -16) (undo-tree-id4299 . -65) (undo-tree-id4300 . -12) (undo-tree-id4301 . -12) (undo-tree-id4302 . -34) (undo-tree-id4303 . -34) (undo-tree-id4304 . -16) (undo-tree-id4305 . -35) (undo-tree-id4306 . -34) (undo-tree-id4307 . -36) (undo-tree-id4308 . -35) (undo-tree-id4309 . -37) (undo-tree-id4310 . -36) (undo-tree-id4311 . -38) (undo-tree-id4312 . -37) (undo-tree-id4313 . -39) (undo-tree-id4314 . -38) (undo-tree-id4315 . -40) (undo-tree-id4316 . -39) (undo-tree-id4317 . -41) (undo-tree-id4318 . -40) (undo-tree-id4319 . -42) (undo-tree-id4320 . -41) (undo-tree-id4321 . -43) (undo-tree-id4322 . -42) (undo-tree-id4323 . -44) (undo-tree-id4324 . -43) (undo-tree-id4325 . -45) (undo-tree-id4326 . -44) (undo-tree-id4327 . -46) (undo-tree-id4328 . -45) (undo-tree-id4329 . -47) (undo-tree-id4330 . -46) (undo-tree-id4331 . -47) (undo-tree-id4332 . -64) (undo-tree-id4333 . -64) (undo-tree-id4334 . -66) (undo-tree-id4335 . -66) (undo-tree-id4336 . -79) (undo-tree-id4337 . -66) (undo-tree-id4338 . -79) (undo-tree-id4339 . -46) (undo-tree-id4340 . -46) (undo-tree-id4341 . -16) (undo-tree-id4342 . -46) (undo-tree-id4343 . -103) (undo-tree-id4344 . -16) (undo-tree-id4345 . -16) (undo-tree-id4346 . -16) (undo-tree-id4347 . -83) (undo-tree-id4348 . -34) (undo-tree-id4349 . -16) (undo-tree-id4350 . -64) (undo-tree-id4351 . -34) (undo-tree-id4352 . -83) (undo-tree-id4353 . -64) (undo-tree-id4354 . -83) (undo-tree-id4355 . -103) 809) nil (25701 56135 574074 907000) 0 nil])
([nil nil ((#("    wrapped._status = _status
" 0 4 (fontified t) 4 19 (fontified t face font-lock-variable-name-face) 19 29 (fontified t) 29 30 (fontified t)) . 746) (undo-tree-id4232 . -29) (undo-tree-id4233 . -30) (undo-tree-id4234 . -30) (undo-tree-id4235 . -30) (undo-tree-id4236 . -16) (undo-tree-id4237 . -22) (undo-tree-id4238 . -29) (undo-tree-id4239 . -16) (undo-tree-id4240 . -16) (undo-tree-id4241 . -30) 762) nil (25701 56152 875067 801000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t)) . 292) (undo-tree-id4463 . -1) (undo-tree-id4464 . -2) (undo-tree-id4465 . -2) (undo-tree-id4466 . -2) (undo-tree-id4467 . -2) 294 (t 25701 56135 594500 976000)) nil (25701 56168 285380 797000) 0 nil] [nil nil ((504 . 505) (495 . 504) (t 25701 56135 594500 976000) 479) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 495) (undo-tree-id4439 . -1) (undo-tree-id4440 . -9) (undo-tree-id4441 . -9) (undo-tree-id4442 . -9) (undo-tree-id4443 . -9) (#("b" 0 1 (fontified t)) . 504)) (25701 56152 869588 663000) 0 nil])
([nil nil ((#("obj" 0 3 (fontified t)) . 289) (undo-tree-id4456 . -2) (undo-tree-id4457 . -3) (undo-tree-id4458 . -3) (undo-tree-id4459 . -3) (undo-tree-id4460 . -3) (undo-tree-id4461 . -3) (undo-tree-id4462 . -3) 292) nil (25701 56168 285372 269000) 0 nil])
nil
([nil nil ((409 . 416) (#("obj" 0 3 (fontified t)) . 409) (undo-tree-id4452 . -2) (undo-tree-id4453 . -3) (undo-tree-id4454 . -3) (undo-tree-id4455 . -3)) nil (25701 56168 285361 71000) 0 nil])
([nil current ((697 . 704) (#("obj" 0 3 (fontified t face font-lock-variable-name-face)) . 697) (undo-tree-id4444 . -2) (undo-tree-id4445 . -3) (undo-tree-id4446 . -3) (undo-tree-id4447 . -3) (undo-tree-id4448 . -3) (undo-tree-id4449 . -3) (undo-tree-id4450 . -3) (undo-tree-id4451 . -3) 700) nil (25701 56168 285349 710000) 0 nil])
nil
