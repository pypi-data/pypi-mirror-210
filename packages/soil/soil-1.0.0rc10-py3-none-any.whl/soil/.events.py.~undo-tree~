(undo-tree-save-format-version . 1)
"c66e39954c6bc40aa4e1765f4fc0bf396fef5071"
[nil nil nil nil (25672 16841 122373 764000) 0 nil]
([nil nil ((#("

class ReplyCond(BaseCond):
    def __init__(self, ask, *args, **kwargs):
        self._ask = ask
        super().__init__(*args, **kwargs)

    def ready(self, agent):
        return self._ask.reply is not None or self._ask.expired(agent.schedule.time)

    def return_value(self, agent):
        if self._ask.expired(agent.now):
            raise TimedOut()
        return self._ask.reply

    def __repr__(self):
        return f\"ReplyCond({self._ask.id})\"
" 0 2 (fontified t) 2 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 17 (fontified t face font-lock-type-face) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 33 (fontified t) 33 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 45 (fontified t face font-lock-function-name-face) 45 46 (fontified t face (rainbow-delimiters-depth-1-face)) 46 50 (fontified t face font-lock-keyword-face) 50 72 (fontified t) 72 73 (fontified t face (rainbow-delimiters-depth-1-face)) 73 83 (fontified t) 83 87 (fontified t face font-lock-keyword-face) 87 107 (fontified t) 107 112 (fontified t face font-lock-builtin-face) 112 113 (fontified t face (rainbow-delimiters-depth-1-face)) 113 114 (fontified t face (rainbow-delimiters-depth-1-face)) 114 123 (fontified t) 123 124 (fontified t face (rainbow-delimiters-depth-1-face)) 124 139 (fontified t) 139 140 (fontified t face (rainbow-delimiters-depth-1-face)) 140 146 (fontified t) 146 149 (fontified t face font-lock-keyword-face) 149 150 (fontified t) 150 155 (fontified t face font-lock-function-name-face) 155 156 (fontified t face (rainbow-delimiters-depth-1-face)) 156 160 (fontified t face font-lock-keyword-face) 160 167 (fontified t) 167 168 (fontified t face (rainbow-delimiters-depth-1-face)) 168 178 (fontified t) 178 184 (fontified t face font-lock-keyword-face) 184 185 (fontified t) 185 189 (fontified t face font-lock-keyword-face) 189 201 (fontified t) 201 203 (fontified t face font-lock-keyword-face) 203 204 (fontified t) 204 207 (fontified t face font-lock-keyword-face) 207 208 (fontified t) 208 212 (fontified t face font-lock-constant-face) 212 213 (fontified t) 213 215 (fontified t face font-lock-keyword-face) 215 216 (fontified t) 216 220 (fontified t face font-lock-keyword-face) 220 233 (fontified t) 233 234 (fontified t face (rainbow-delimiters-depth-1-face)) 234 253 (fontified t) 253 254 (fontified t face (rainbow-delimiters-depth-1-face)) 254 260 (fontified t) 260 263 (fontified t face font-lock-keyword-face) 263 264 (fontified t) 264 276 (fontified t face font-lock-function-name-face) 276 277 (fontified t face (rainbow-delimiters-depth-1-face)) 277 281 (fontified t face font-lock-keyword-face) 281 288 (fontified t) 288 289 (fontified t face (rainbow-delimiters-depth-1-face)) 289 299 (fontified t) 299 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 306 (fontified t face font-lock-keyword-face) 306 319 (fontified t) 319 320 (fontified t face (rainbow-delimiters-depth-1-face)) 320 329 (fontified t) 329 330 (fontified t face (rainbow-delimiters-depth-1-face)) 330 344 (fontified t) 344 349 (fontified t face font-lock-keyword-face) 349 358 (fontified t) 358 359 (fontified t face (rainbow-delimiters-depth-1-face)) 359 360 (fontified t face (rainbow-delimiters-depth-1-face)) 360 369 (fontified t) 369 375 (fontified t face font-lock-keyword-face) 375 376 (fontified t) 376 380 (fontified t face font-lock-keyword-face) 380 397 (fontified t) 397 400 (fontified t face font-lock-keyword-face) 400 401 (fontified t) 401 409 (fontified t face font-lock-function-name-face) 409 410 (fontified t face (rainbow-delimiters-depth-1-face)) 410 414 (fontified t face font-lock-keyword-face) 414 415 (fontified t face (rainbow-delimiters-depth-1-face)) 415 425 (fontified t) 425 431 (fontified t face font-lock-keyword-face) 431 433 (fontified t) 433 434 (fontified t syntax-table (15) face font-lock-string-face) 434 459 (fontified t face font-lock-string-face) 459 460 (fontified t syntax-table (15) face font-lock-string-face) 460 461 (fontified t)) . 451) (undo-tree-id51 . -142) (undo-tree-id52 . -142) (undo-tree-id53 . -170) (undo-tree-id54 . -170) (undo-tree-id55 . -1) (undo-tree-id56 . -423) (undo-tree-id57 . -423) (undo-tree-id58 . -141) (undo-tree-id59 . -434) (undo-tree-id60 . -443) (undo-tree-id61 . -8) (undo-tree-id62 . -17) (undo-tree-id63 . -8) (undo-tree-id64 . 27) (undo-tree-id65 . -443) (undo-tree-id66 . -8) (undo-tree-id67 . -434) (undo-tree-id68 . -434) (undo-tree-id69 . -434) (undo-tree-id70 . -434) (undo-tree-id71 . -1) (undo-tree-id72 . -8) (undo-tree-id73 . -1) (undo-tree-id74 . -35) (undo-tree-id75 . -8) (undo-tree-id76 . -81) (undo-tree-id77 . -35) (undo-tree-id78 . -105) (undo-tree-id79 . -81) (undo-tree-id80 . -141) (undo-tree-id81 . -105) (undo-tree-id82 . -148) (undo-tree-id83 . -141) (undo-tree-id84 . -176) (undo-tree-id85 . -148) (undo-tree-id86 . -255) (undo-tree-id87 . -176) (undo-tree-id88 . -262) (undo-tree-id89 . -255) (undo-tree-id90 . -297) (undo-tree-id91 . -262) (undo-tree-id92 . -338) (undo-tree-id93 . -297) (undo-tree-id94 . -367) (undo-tree-id95 . -338) (undo-tree-id96 . -392) (undo-tree-id97 . -367) (undo-tree-id98 . -399) (undo-tree-id99 . -392) (undo-tree-id100 . -423) (undo-tree-id101 . -399) (undo-tree-id102 . -461) (undo-tree-id103 . -423) (undo-tree-id104 . -423) (undo-tree-id105 . -461) (undo-tree-id106 . -461) (undo-tree-id107 . -423) (undo-tree-id108 . -423) (undo-tree-id109 . -423) (undo-tree-id110 . -399) (undo-tree-id111 . -423) (undo-tree-id112 . -392) (undo-tree-id113 . -399) (undo-tree-id114 . -367) (undo-tree-id115 . -392) (undo-tree-id116 . -338) (undo-tree-id117 . -367) (undo-tree-id118 . -297) (undo-tree-id119 . -338) (undo-tree-id120 . -262) (undo-tree-id121 . -297) (undo-tree-id122 . -255) (undo-tree-id123 . -262) (undo-tree-id124 . -176) (undo-tree-id125 . -255) (undo-tree-id126 . -148) (undo-tree-id127 . -176) (undo-tree-id128 . -141) (undo-tree-id129 . -148) (undo-tree-id130 . -105) (undo-tree-id131 . -141) (undo-tree-id132 . -81) (undo-tree-id133 . -105) (undo-tree-id134 . -35) (undo-tree-id135 . -81) (undo-tree-id136 . -8) (undo-tree-id137 . -35) (undo-tree-id138 . -1) (undo-tree-id139 . -8) (undo-tree-id140 . -1) (undo-tree-id141 . -461) (undo-tree-id142 . -460) (t 25671 58876 268092 98000)) nil (25672 16841 125380 382000) 0 nil])
([nil nil ((569 . 582) (561 . 569) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -561) (undo-tree-id218 . -1) (548 . 562) (539 . 548) 508) nil (25672 16918 705821 987000) 0 nil] [nil nil ((#("
    def replied(self, expiration=None):
        return ReplyCond(self)
" 0 5 (fontified t) 5 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t face (rainbow-delimiters-depth-1-face)) 17 21 (fontified t face font-lock-keyword-face) 21 34 (fontified t) 34 38 (fontified t face font-lock-constant-face) 38 39 (fontified t face (rainbow-delimiters-depth-1-face)) 39 41 (fontified t) 41 49 (fontified t) 49 55 (fontified t face font-lock-keyword-face) 55 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-1-face)) 66 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t face (rainbow-delimiters-depth-1-face)) 71 72 (fontified t)) . 499) (undo-tree-id0 . -1) (undo-tree-id1 . -56) (undo-tree-id2 . -28) (undo-tree-id3 . -28) (undo-tree-id4 . -9) (undo-tree-id5 . -9) (undo-tree-id6 . -56) (undo-tree-id7 . -51) (undo-tree-id8 . -51) (undo-tree-id9 . -51) (undo-tree-id10 . -56) (undo-tree-id11 . -51) (undo-tree-id12 . -56) (undo-tree-id13 . -56) (undo-tree-id14 . -65) (undo-tree-id15 . -56) (undo-tree-id16 . -56) (undo-tree-id17 . -71) (undo-tree-id18 . -1) (undo-tree-id19 . -41) (undo-tree-id20 . -1) (undo-tree-id21 . -72) (undo-tree-id22 . -41) (undo-tree-id23 . -72) (undo-tree-id24 . -72) (undo-tree-id25 . -41) (undo-tree-id26 . -72) (undo-tree-id27 . -1) (undo-tree-id28 . -41) (undo-tree-id29 . -1) (undo-tree-id30 . -56) (undo-tree-id31 . -65) (undo-tree-id32 . -1) (undo-tree-id33 . -41) (undo-tree-id34 . -1) (undo-tree-id35 . -72) (undo-tree-id36 . -41) (undo-tree-id37 . -41) (undo-tree-id38 . -72) (undo-tree-id39 . -49) (undo-tree-id40 . -41) (undo-tree-id41 . -56) (undo-tree-id42 . -49) (undo-tree-id43 . -72) (undo-tree-id44 . -56) (undo-tree-id45 . -56) (undo-tree-id46 . -56) (undo-tree-id47 . -16) (undo-tree-id48 . -56) (undo-tree-id49 . -16) (undo-tree-id50 . -72)) ((499 . 571)) (25672 16841 121364 473000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . 570) (undo-tree-id208 . -11) (undo-tree-id209 . -12) (undo-tree-id210 . -12) (undo-tree-id211 . -12) (undo-tree-id212 . -12) (undo-tree-id213 . -11) (undo-tree-id214 . -11) (undo-tree-id215 . -11) (undo-tree-id216 . -12) (undo-tree-id217 . -12) 582) nil (25672 16918 705817 528000) 0 nil])
nil
([nil nil ((538 . 546) (537 . 538)) nil (25672 16918 705807 426000) 0 nil])
([nil nil ((591 . 597) (#("u" 0 1 (fontified t)) . -591) (undo-tree-id207 . -1) 592 (591 . 592) (578 . 591) 577) nil (25672 16918 705805 420000) 0 nil])
([nil nil ((#("    def replied(self, expiration=None, delay=1):
        while not self.reply:
            yield 

        return ReplyCond(self)

" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 15 (fontified t face font-lock-function-name-face) 15 16 (fontified t face (rainbow-delimiters-depth-1-face)) 16 20 (fontified t face font-lock-keyword-face) 20 33 (fontified t) 33 37 (fontified t face font-lock-constant-face) 37 39 (fontified t) 39 45 (fontified t) 45 46 (fontified t face highlight-numbers-number) 46 47 (fontified t face (rainbow-delimiters-depth-1-face)) 47 48 (fontified t) 48 49 (fontified t) 49 57 (fontified t) 57 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t) 63 66 (fontified t face font-lock-keyword-face) 66 67 (fontified t) 67 71 (fontified t face font-lock-keyword-face) 71 78 (fontified t) 78 79 (fontified t) 79 91 (fontified t) 91 96 (fontified t face font-lock-keyword-face) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t) 99 107 (fontified t) 107 113 (fontified t face font-lock-keyword-face) 113 123 (fontified t) 123 124 (fontified t face (rainbow-delimiters-depth-1-face)) 124 128 (fontified t face font-lock-keyword-face) 128 129 (fontified t face (rainbow-delimiters-depth-1-face)) 129 130 (fontified t) 130 131 (fontified t)) . 500) (undo-tree-id152 . -130) (undo-tree-id153 . -131) (undo-tree-id154 . -130) (undo-tree-id155 . -27) (undo-tree-id156 . -27) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -19) (undo-tree-id160 . -130) (undo-tree-id161 . -109) (undo-tree-id162 . -109) (undo-tree-id163 . -109) (undo-tree-id164 . -114) (undo-tree-id165 . -130) (undo-tree-id166 . -109) (undo-tree-id167 . -114) (undo-tree-id168 . -114) (undo-tree-id169 . -123) (undo-tree-id170 . -114) (undo-tree-id171 . -130) (undo-tree-id172 . 33) (undo-tree-id173 . -98) (undo-tree-id174 . -98) (undo-tree-id175 . -98) (undo-tree-id176 . 111) (undo-tree-id177 . -98) (undo-tree-id178 . -98) (undo-tree-id179 . -114) (undo-tree-id180 . -123) (undo-tree-id181 . -114) (undo-tree-id182 . -20) (undo-tree-id183 . -97) (undo-tree-id184 . -20) (undo-tree-id185 . -20) (undo-tree-id186 . -20) (undo-tree-id187 . -20) (undo-tree-id188 . -19) (undo-tree-id189 . -19) (undo-tree-id190 . -131) (undo-tree-id191 . -19) (undo-tree-id192 . -19) (undo-tree-id193 . -19) (undo-tree-id194 . -130) (undo-tree-id195 . -68) (undo-tree-id196 . -19) (undo-tree-id197 . -97) (undo-tree-id198 . -68) (undo-tree-id199 . -98) (undo-tree-id200 . -97) (undo-tree-id201 . -118) (undo-tree-id202 . -98) (undo-tree-id203 . -130) (undo-tree-id204 . -118) (undo-tree-id205 . -130) (undo-tree-id206 . -131) 630) nil (25672 16918 705798 899000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 500) (undo-tree-id147 . -1) (undo-tree-id148 . 1) (undo-tree-id149 . 1) (undo-tree-id150 . 1) (undo-tree-id151 . -1)) nil (25672 16918 705751 31000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -500) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) 504 (499 . 504) 499) nil (25672 16918 705740 214000) 0 nil])
([nil current ((#("from .time import BaseCond
" 0 4 (fontified t face font-lock-keyword-face) 4 11 (fontified t) 11 17 (fontified t face font-lock-keyword-face) 17 27 (fontified t)) . 1) (undo-tree-id219 . -18) (undo-tree-id220 . -26) (undo-tree-id221 . -18) (undo-tree-id222 . -26) (undo-tree-id223 . -18) (undo-tree-id224 . -18) (undo-tree-id225 . -18) (undo-tree-id226 . -27) (undo-tree-id227 . -18) (undo-tree-id228 . -18) (undo-tree-id229 . -18) (undo-tree-id230 . -18) (undo-tree-id231 . -18) (undo-tree-id232 . -18) (undo-tree-id233 . -18) (undo-tree-id234 . -18) (undo-tree-id235 . -18) (undo-tree-id236 . -18) (undo-tree-id237 . -27) 19 (t 25672 16918 719163 935000)) nil (25672 20401 511677 885000) 0 nil])
nil
