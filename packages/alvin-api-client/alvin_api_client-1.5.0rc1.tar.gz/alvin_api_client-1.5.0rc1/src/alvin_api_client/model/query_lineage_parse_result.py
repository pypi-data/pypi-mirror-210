"""
    Alvin

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from alvin_api_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from alvin_api_client.exceptions import ApiAttributeError


def lazy_import():
    from alvin_api_client.model.alter_parse_result import AlterParseResult
    from alvin_api_client.model.bi_platform import BiPlatform
    from alvin_api_client.model.delete_parse_result import DeleteParseResult
    from alvin_api_client.model.drop_parse_result import DropParseResult
    from alvin_api_client.model.known_table import KnownTable
    from alvin_api_client.model.looker_query_comment import LookerQueryComment
    from alvin_api_client.model.query_comment import QueryComment
    from alvin_api_client.model.query_create_mode import QueryCreateMode
    from alvin_api_client.model.query_fingerprint import QueryFingerprint
    from alvin_api_client.model.query_parse_result import QueryParseResult
    from alvin_api_client.model.query_type import QueryType
    from alvin_api_client.model.seen_table_at_level import SeenTableAtLevel
    from alvin_api_client.model.table_insert import TableInsert
    from alvin_api_client.model.table_merge import TableMerge
    from alvin_api_client.model.table_update import TableUpdate
    from alvin_api_client.model.truncate_result import TruncateResult
    globals()['AlterParseResult'] = AlterParseResult
    globals()['BiPlatform'] = BiPlatform
    globals()['DeleteParseResult'] = DeleteParseResult
    globals()['DropParseResult'] = DropParseResult
    globals()['KnownTable'] = KnownTable
    globals()['LookerQueryComment'] = LookerQueryComment
    globals()['QueryComment'] = QueryComment
    globals()['QueryCreateMode'] = QueryCreateMode
    globals()['QueryFingerprint'] = QueryFingerprint
    globals()['QueryParseResult'] = QueryParseResult
    globals()['QueryType'] = QueryType
    globals()['SeenTableAtLevel'] = SeenTableAtLevel
    globals()['TableInsert'] = TableInsert
    globals()['TableMerge'] = TableMerge
    globals()['TableUpdate'] = TableUpdate
    globals()['TruncateResult'] = TruncateResult


class QueryLineageParseResult(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'all_tables': ([SeenTableAtLevel],),  # noqa: E501
            'inserts': ([TableInsert],),  # noqa: E501
            'fingerprint': (QueryFingerprint,),  # noqa: E501
            'error': (bool,),  # noqa: E501
            'source_text': (str,),  # noqa: E501
            'select_result': (QueryParseResult,),  # noqa: E501
            'alter_result': (AlterParseResult,),  # noqa: E501
            'drop_result': (DropParseResult,),  # noqa: E501
            'delete_result': (DeleteParseResult,),  # noqa: E501
            'truncate_result': (TruncateResult,),  # noqa: E501
            'query_type': (QueryType,),  # noqa: E501
            'create_table': (KnownTable,),  # noqa: E501
            'update': (TableUpdate,),  # noqa: E501
            'merge': (TableMerge,),  # noqa: E501
            'comments': ([QueryComment],),  # noqa: E501
            'looker_query_comment': (LookerQueryComment,),  # noqa: E501
            'bi_platform': (BiPlatform,),  # noqa: E501
            'is_bi_query': (bool,),  # noqa: E501
            'error_message': (str,),  # noqa: E501
            'is_temp': (bool,),  # noqa: E501
            'create_mode': (QueryCreateMode,),  # noqa: E501
            'start_offset': (int,),  # noqa: E501
            'stop_offset': (int,),  # noqa: E501
            'parse_time_ms': (int,),  # noqa: E501
            'walk_time_ms': (int,),  # noqa: E501
            'total_time_ms': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'all_tables': 'allTables',  # noqa: E501
        'inserts': 'inserts',  # noqa: E501
        'fingerprint': 'fingerprint',  # noqa: E501
        'error': 'error',  # noqa: E501
        'source_text': 'sourceText',  # noqa: E501
        'select_result': 'selectResult',  # noqa: E501
        'alter_result': 'alterResult',  # noqa: E501
        'drop_result': 'dropResult',  # noqa: E501
        'delete_result': 'deleteResult',  # noqa: E501
        'truncate_result': 'truncateResult',  # noqa: E501
        'query_type': 'queryType',  # noqa: E501
        'create_table': 'createTable',  # noqa: E501
        'update': 'update',  # noqa: E501
        'merge': 'merge',  # noqa: E501
        'comments': 'comments',  # noqa: E501
        'looker_query_comment': 'lookerQueryComment',  # noqa: E501
        'bi_platform': 'biPlatform',  # noqa: E501
        'is_bi_query': 'isBiQuery',  # noqa: E501
        'error_message': 'errorMessage',  # noqa: E501
        'is_temp': 'isTemp',  # noqa: E501
        'create_mode': 'createMode',  # noqa: E501
        'start_offset': 'startOffset',  # noqa: E501
        'stop_offset': 'stopOffset',  # noqa: E501
        'parse_time_ms': 'parseTimeMs',  # noqa: E501
        'walk_time_ms': 'walkTimeMs',  # noqa: E501
        'total_time_ms': 'totalTimeMs',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, all_tables, inserts, fingerprint, error, source_text, *args, **kwargs):  # noqa: E501
        """QueryLineageParseResult - a model defined in OpenAPI

        Args:
            all_tables ([SeenTableAtLevel]):
            inserts ([TableInsert]):
            fingerprint (QueryFingerprint):
            error (bool):
            source_text (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            select_result (QueryParseResult): [optional]  # noqa: E501
            alter_result (AlterParseResult): [optional]  # noqa: E501
            drop_result (DropParseResult): [optional]  # noqa: E501
            delete_result (DeleteParseResult): [optional]  # noqa: E501
            truncate_result (TruncateResult): [optional]  # noqa: E501
            query_type (QueryType): [optional]  # noqa: E501
            create_table (KnownTable): [optional]  # noqa: E501
            update (TableUpdate): [optional]  # noqa: E501
            merge (TableMerge): [optional]  # noqa: E501
            comments ([QueryComment]): [optional]  # noqa: E501
            looker_query_comment (LookerQueryComment): [optional]  # noqa: E501
            bi_platform (BiPlatform): [optional]  # noqa: E501
            is_bi_query (bool): [optional]  # noqa: E501
            error_message (str): [optional]  # noqa: E501
            is_temp (bool): [optional]  # noqa: E501
            create_mode (QueryCreateMode): [optional]  # noqa: E501
            start_offset (int): [optional]  # noqa: E501
            stop_offset (int): [optional]  # noqa: E501
            parse_time_ms (int): [optional]  # noqa: E501
            walk_time_ms (int): [optional]  # noqa: E501
            total_time_ms (int): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.all_tables = all_tables
        self.inserts = inserts
        self.fingerprint = fingerprint
        self.error = error
        self.source_text = source_text
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, all_tables, inserts, fingerprint, error, source_text, *args, **kwargs):  # noqa: E501
        """QueryLineageParseResult - a model defined in OpenAPI

        Args:
            all_tables ([SeenTableAtLevel]):
            inserts ([TableInsert]):
            fingerprint (QueryFingerprint):
            error (bool):
            source_text (str):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            select_result (QueryParseResult): [optional]  # noqa: E501
            alter_result (AlterParseResult): [optional]  # noqa: E501
            drop_result (DropParseResult): [optional]  # noqa: E501
            delete_result (DeleteParseResult): [optional]  # noqa: E501
            truncate_result (TruncateResult): [optional]  # noqa: E501
            query_type (QueryType): [optional]  # noqa: E501
            create_table (KnownTable): [optional]  # noqa: E501
            update (TableUpdate): [optional]  # noqa: E501
            merge (TableMerge): [optional]  # noqa: E501
            comments ([QueryComment]): [optional]  # noqa: E501
            looker_query_comment (LookerQueryComment): [optional]  # noqa: E501
            bi_platform (BiPlatform): [optional]  # noqa: E501
            is_bi_query (bool): [optional]  # noqa: E501
            error_message (str): [optional]  # noqa: E501
            is_temp (bool): [optional]  # noqa: E501
            create_mode (QueryCreateMode): [optional]  # noqa: E501
            start_offset (int): [optional]  # noqa: E501
            stop_offset (int): [optional]  # noqa: E501
            parse_time_ms (int): [optional]  # noqa: E501
            walk_time_ms (int): [optional]  # noqa: E501
            total_time_ms (int): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.all_tables = all_tables
        self.inserts = inserts
        self.fingerprint = fingerprint
        self.error = error
        self.source_text = source_text
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
