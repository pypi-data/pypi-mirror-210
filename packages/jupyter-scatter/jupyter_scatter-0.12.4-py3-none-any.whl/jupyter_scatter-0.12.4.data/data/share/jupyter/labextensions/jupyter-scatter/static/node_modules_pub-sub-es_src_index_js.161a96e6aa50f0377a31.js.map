{"version":3,"file":"node_modules_pub-sub-es_src_index_js.161a96e6aa50f0377a31.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,IAAI;AACJ,aAAa;AACb;AACA,CAAC;;AAED;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,UAAU;AACtB;AACA;AACA,4BAA4B,kBAAkB,IAAI;AAClD;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB;AACA,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa;AACb;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,UAAU;AACtB;AACA;AACA,8BAA8B,kBAAkB,IAAI;AACpD;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,2BAA2B;AAC3B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,SAAS;AACrB,YAAY,UAAU;AACtB;AACA;AACA,0BAA0B,mCAAmC,IAAI;AACjE;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,aAAa,QAAQ;AACrB,UAAU,SAAS;AACnB;AACA,UAAU,SAAS;AACnB;AACA;AACA,mCAAmC;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,yBAAyB,gBAAgB;AACzC,QAAQ;AACR;AACA;AACA,oCAAoC,EAAE;AACtC;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB;AACA,kCAAkC,eAAe;;AAEjD;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI;AACN;;AAEA;AACA,8BAA8B,wBAAwB;AACtD,kCAAkC,iBAAiB;AACnD,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA,kBAAkB,QAAQ,eAAe;AACzC;;AAEsC;;AAEtC,iEAAe,YAAY,EAAC","sources":["webpack://jupyter-scatter/./node_modules/pub-sub-es/src/index.js"],"sourcesContent":["/**\n * A new or fake broadcast channel.\n * @type {BroadcastChannel|object}\n */\nconst bc = (() => {\n  try {\n    return new window.BroadcastChannel('pub-sub-es');\n  } catch (e) {\n    return { postMessage: () => {} };\n  }\n})();\n\n/**\n * Get final event name\n * @param {string} eventName - Event name to be adjusted\n * @param {boolean} caseInsensitive - If `true`, `eventName` will be lowercased\n */\nconst getEventName = (eventName, caseInsensitive) =>\n  caseInsensitive ? eventName.toLowerCase() : eventName;\n\n/**\n * Setup subscriber.\n * @param {object} stack - The bound event stack.\n * @return {function} - Curried function for subscribing to an event on a\n *   specific event stack.\n */\nconst subscribe = (stack, { caseInsensitive } = {}) =>\n  /**\n   * Subscribe to an event.\n   * @param {string} event - Event name to subscribe to.\n   * @param {function} handler - Function to be called when event of type\n   *   `event` is published.\n   * @param {number} times - Number of times the handler should called for the\n   *   given event. The event listener will automatically be unsubscribed once\n   *   the number of calls exceeds `times`.\n   * @return {object} Object with the event name and the handler. The object\n   *   can be used to unsubscribe.\n   */\n  (event, handler, times = Infinity) => {\n    const e = getEventName(event, caseInsensitive);\n\n    if (!stack[e]) {\n      stack[e] = [];\n      stack.__times__[e] = [];\n    }\n\n    stack[e].push(handler);\n    stack.__times__[e].push(+times || Infinity);\n\n    return { event: e, handler };\n  };\n\n/**\n * Setup unsubscriber.\n * @param {object} stack - The bound event stack.\n * @return {function} - Curried function for unsubscribing an event from a\n *   specific event stack.\n */\nconst unsubscribe = (stack, { caseInsensitive } = {}) =>\n  /**\n   * Unsubscribe from event.\n   * @curried\n   * @param {string|object} event - Event from which to unsubscribe or the return\n   *   object provided by `subscribe()`.\n   * @param {function} handler - Handler function to be unsubscribed. It is\n   *   ignored if `id` is provided.\n   */\n  (event, handler) => {\n    if (typeof event === 'object') {\n      handler = event.handler; // eslint-disable-line no-param-reassign\n      event = event.event; // eslint-disable-line no-param-reassign\n    }\n\n    const e = getEventName(event, caseInsensitive);\n\n    if (!stack[e]) return;\n\n    const id = stack[e].indexOf(handler);\n\n    if (id === -1 || id >= stack[e].length) return;\n\n    stack[e].splice(id, 1);\n    stack.__times__[e].splice(id, 1);\n  };\n\n/**\n * Inform listeners about some news\n * @param {array} listeners - List of listeners\n * @param {*} news - News object\n */\nconst inform = (listeners, news) => () => {\n  listeners.forEach((listener) => listener(news));\n};\n\n/**\n * Setup the publisher.\n * @param  {object} stack - The bound event stack.\n * @param  {boolean} isGlobal - If `true` event will be published globally.\n * @return {function} - Curried function for publishing an event on a specific\n *   event stack.\n */\nconst publish = (stack, { isGlobal, caseInsensitive, async } = {}) => {\n  const unsubscriber = unsubscribe(stack);\n\n  /**\n   * Public interface for publishing an event.\n   * @curried\n   * @param {string} event - Event type to be published.\n   * @param {any} news - The news to be published.\n   * @param {object} options - Option object with\n   *   - {boolean} isNoGlobalBroadcast - If `true` event will *not* be\n   *     broadcasted gloablly even if `isGlobal` is `true`.\n   *   - {boolean} async - If `true` event will *not* be broadcasted\n   *     synchronously even if `async` is `false` globally.\n   */\n  return (event, news, options = {}) => {\n    const e = getEventName(event, caseInsensitive);\n\n    if (!stack[e]) return;\n\n    const listeners = [...stack[e]];\n\n    listeners.forEach((listener, i) => {\n      if (--stack.__times__[e][i] < 1) unsubscriber(e, listener);\n    });\n\n    if (async || options.async) {\n      setTimeout(inform(listeners, news), 0);\n    } else {\n      inform(listeners, news)();\n    }\n\n    if (isGlobal && !options.isNoGlobalBroadcast) {\n      try {\n        bc.postMessage({ event: e, news });\n      } catch (error) {\n        if (error instanceof DOMException) {\n          console.warn(\n            `Could not broadcast '${e}' globally. Payload is not clonable.`\n          );\n        } else {\n          throw error;\n        }\n      }\n    }\n  };\n};\n\n/**\n * Setup event clearer\n * @param {object} stack - The bound event stack.\n * @return {function} - A curried function removing all event listeners on a\n *   specific event stack.\n */\nconst clear = (stack) =>\n  /**\n   * Remove all event listeners and unset listening times\n   * @curried\n   */\n  () => {\n    Object.keys(stack)\n      .filter((eventName) => eventName[0] !== '_')\n      .forEach((eventName) => {\n        stack[eventName] = undefined;\n        stack.__times__[eventName] = undefined;\n        delete stack[eventName];\n        delete stack.__times__[eventName];\n      });\n  };\n\n/**\n * Create a new empty stack object\n * @return {object} - An empty stack object.\n */\nconst createEmptyStack = () => ({ __times__: {} });\n\n/**\n * Create a new pub-sub instance\n * @param {object} stack - Object to be used as the event stack.\n * @return {object} - A new pub-sub instance.\n */\nconst createPubSub = ({\n  async = false,\n  caseInsensitive = false,\n  stack = createEmptyStack(),\n} = {}) => {\n  if (!stack.__times__) stack.__times__ = {};\n\n  return {\n    publish: publish(stack, { async, caseInsensitive }),\n    subscribe: subscribe(stack, { caseInsensitive }),\n    unsubscribe: unsubscribe(stack, { caseInsensitive }),\n    clear: clear(stack),\n    stack,\n  };\n};\n\n/**\n * Global pub-sub stack object\n * @type {object}\n */\nconst globalPubSubStack = createEmptyStack();\n/**\n * Global pub-sub stack instance\n * @type {object}\n */\nconst globalPubSub = {\n  publish: publish(globalPubSubStack, { isGlobal: true }),\n  subscribe: subscribe(globalPubSubStack),\n  unsubscribe: unsubscribe(globalPubSubStack),\n  stack: globalPubSubStack,\n};\nbc.onmessage = ({ data: { event, news } }) =>\n  globalPubSub.publish(event, news, true);\n\nexport { globalPubSub, createPubSub };\n\nexport default createPubSub;\n"],"names":[],"sourceRoot":""}