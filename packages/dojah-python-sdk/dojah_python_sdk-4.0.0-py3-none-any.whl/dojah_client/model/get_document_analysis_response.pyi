# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetDocumentAnalysisResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class data(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    ADDRESS = schemas.StrSchema
                                    CITY_IN_ADDRESS = schemas.StrSchema
                                    _class = schemas.StrSchema
                                    COUNTY = schemas.StrSchema
                                    DATE_OF_BIRTH = schemas.StrSchema
                                    DATE_OF_ISSUE = schemas.StrSchema
                                    DOCUMENT_NUMBER = schemas.StrSchema
                                    ENDORSEMENTS = schemas.StrSchema
                                    EXPIRATION_DATE = schemas.StrSchema
                                    FIRST_NAME = schemas.StrSchema
                                    ID_TYPE = schemas.StrSchema
                                    LAST_NAME = schemas.StrSchema
                                    MIDDLE_NAME = schemas.StrSchema
                                    PLACE_OF_BIRTH = schemas.StrSchema
                                    RESTRICTIONS = schemas.StrSchema
                                    STATE_IN_ADDRESS = schemas.StrSchema
                                    STATE_NAME = schemas.StrSchema
                                    SUFFIX = schemas.StrSchema
                                    VETERAN = schemas.StrSchema
                                    ZIP_CODE_IN_ADDRESS = schemas.StrSchema
                                    __annotations__ = {
                                        "ADDRESS": ADDRESS,
                                        "CITY_IN_ADDRESS": CITY_IN_ADDRESS,
                                        "CLASS": _class,
                                        "COUNTY": COUNTY,
                                        "DATE_OF_BIRTH": DATE_OF_BIRTH,
                                        "DATE_OF_ISSUE": DATE_OF_ISSUE,
                                        "DOCUMENT_NUMBER": DOCUMENT_NUMBER,
                                        "ENDORSEMENTS": ENDORSEMENTS,
                                        "EXPIRATION_DATE": EXPIRATION_DATE,
                                        "FIRST_NAME": FIRST_NAME,
                                        "ID_TYPE": ID_TYPE,
                                        "LAST_NAME": LAST_NAME,
                                        "MIDDLE_NAME": MIDDLE_NAME,
                                        "PLACE_OF_BIRTH": PLACE_OF_BIRTH,
                                        "RESTRICTIONS": RESTRICTIONS,
                                        "STATE_IN_ADDRESS": STATE_IN_ADDRESS,
                                        "STATE_NAME": STATE_NAME,
                                        "SUFFIX": SUFFIX,
                                        "VETERAN": VETERAN,
                                        "ZIP_CODE_IN_ADDRESS": ZIP_CODE_IN_ADDRESS,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["ADDRESS"]) -> MetaOapg.properties.ADDRESS: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["CITY_IN_ADDRESS"]) -> MetaOapg.properties.CITY_IN_ADDRESS: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["CLASS"]) -> MetaOapg.properties._class: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["COUNTY"]) -> MetaOapg.properties.COUNTY: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["DATE_OF_BIRTH"]) -> MetaOapg.properties.DATE_OF_BIRTH: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["DATE_OF_ISSUE"]) -> MetaOapg.properties.DATE_OF_ISSUE: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["DOCUMENT_NUMBER"]) -> MetaOapg.properties.DOCUMENT_NUMBER: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["ENDORSEMENTS"]) -> MetaOapg.properties.ENDORSEMENTS: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["EXPIRATION_DATE"]) -> MetaOapg.properties.EXPIRATION_DATE: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["FIRST_NAME"]) -> MetaOapg.properties.FIRST_NAME: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["ID_TYPE"]) -> MetaOapg.properties.ID_TYPE: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["LAST_NAME"]) -> MetaOapg.properties.LAST_NAME: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["MIDDLE_NAME"]) -> MetaOapg.properties.MIDDLE_NAME: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["PLACE_OF_BIRTH"]) -> MetaOapg.properties.PLACE_OF_BIRTH: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["RESTRICTIONS"]) -> MetaOapg.properties.RESTRICTIONS: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["STATE_IN_ADDRESS"]) -> MetaOapg.properties.STATE_IN_ADDRESS: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["STATE_NAME"]) -> MetaOapg.properties.STATE_NAME: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["SUFFIX"]) -> MetaOapg.properties.SUFFIX: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["VETERAN"]) -> MetaOapg.properties.VETERAN: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["ZIP_CODE_IN_ADDRESS"]) -> MetaOapg.properties.ZIP_CODE_IN_ADDRESS: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["ADDRESS", "CITY_IN_ADDRESS", "CLASS", "COUNTY", "DATE_OF_BIRTH", "DATE_OF_ISSUE", "DOCUMENT_NUMBER", "ENDORSEMENTS", "EXPIRATION_DATE", "FIRST_NAME", "ID_TYPE", "LAST_NAME", "MIDDLE_NAME", "PLACE_OF_BIRTH", "RESTRICTIONS", "STATE_IN_ADDRESS", "STATE_NAME", "SUFFIX", "VETERAN", "ZIP_CODE_IN_ADDRESS", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["ADDRESS"]) -> typing.Union[MetaOapg.properties.ADDRESS, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["CITY_IN_ADDRESS"]) -> typing.Union[MetaOapg.properties.CITY_IN_ADDRESS, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["CLASS"]) -> typing.Union[MetaOapg.properties._class, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["COUNTY"]) -> typing.Union[MetaOapg.properties.COUNTY, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["DATE_OF_BIRTH"]) -> typing.Union[MetaOapg.properties.DATE_OF_BIRTH, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["DATE_OF_ISSUE"]) -> typing.Union[MetaOapg.properties.DATE_OF_ISSUE, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["DOCUMENT_NUMBER"]) -> typing.Union[MetaOapg.properties.DOCUMENT_NUMBER, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["ENDORSEMENTS"]) -> typing.Union[MetaOapg.properties.ENDORSEMENTS, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["EXPIRATION_DATE"]) -> typing.Union[MetaOapg.properties.EXPIRATION_DATE, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["FIRST_NAME"]) -> typing.Union[MetaOapg.properties.FIRST_NAME, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["ID_TYPE"]) -> typing.Union[MetaOapg.properties.ID_TYPE, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["LAST_NAME"]) -> typing.Union[MetaOapg.properties.LAST_NAME, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["MIDDLE_NAME"]) -> typing.Union[MetaOapg.properties.MIDDLE_NAME, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["PLACE_OF_BIRTH"]) -> typing.Union[MetaOapg.properties.PLACE_OF_BIRTH, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["RESTRICTIONS"]) -> typing.Union[MetaOapg.properties.RESTRICTIONS, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["STATE_IN_ADDRESS"]) -> typing.Union[MetaOapg.properties.STATE_IN_ADDRESS, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["STATE_NAME"]) -> typing.Union[MetaOapg.properties.STATE_NAME, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["SUFFIX"]) -> typing.Union[MetaOapg.properties.SUFFIX, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["VETERAN"]) -> typing.Union[MetaOapg.properties.VETERAN, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["ZIP_CODE_IN_ADDRESS"]) -> typing.Union[MetaOapg.properties.ZIP_CODE_IN_ADDRESS, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ADDRESS", "CITY_IN_ADDRESS", "CLASS", "COUNTY", "DATE_OF_BIRTH", "DATE_OF_ISSUE", "DOCUMENT_NUMBER", "ENDORSEMENTS", "EXPIRATION_DATE", "FIRST_NAME", "ID_TYPE", "LAST_NAME", "MIDDLE_NAME", "PLACE_OF_BIRTH", "RESTRICTIONS", "STATE_IN_ADDRESS", "STATE_NAME", "SUFFIX", "VETERAN", "ZIP_CODE_IN_ADDRESS", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                ADDRESS: typing.Union[MetaOapg.properties.ADDRESS, str, schemas.Unset] = schemas.unset,
                                CITY_IN_ADDRESS: typing.Union[MetaOapg.properties.CITY_IN_ADDRESS, str, schemas.Unset] = schemas.unset,
                                COUNTY: typing.Union[MetaOapg.properties.COUNTY, str, schemas.Unset] = schemas.unset,
                                DATE_OF_BIRTH: typing.Union[MetaOapg.properties.DATE_OF_BIRTH, str, schemas.Unset] = schemas.unset,
                                DATE_OF_ISSUE: typing.Union[MetaOapg.properties.DATE_OF_ISSUE, str, schemas.Unset] = schemas.unset,
                                DOCUMENT_NUMBER: typing.Union[MetaOapg.properties.DOCUMENT_NUMBER, str, schemas.Unset] = schemas.unset,
                                ENDORSEMENTS: typing.Union[MetaOapg.properties.ENDORSEMENTS, str, schemas.Unset] = schemas.unset,
                                EXPIRATION_DATE: typing.Union[MetaOapg.properties.EXPIRATION_DATE, str, schemas.Unset] = schemas.unset,
                                FIRST_NAME: typing.Union[MetaOapg.properties.FIRST_NAME, str, schemas.Unset] = schemas.unset,
                                ID_TYPE: typing.Union[MetaOapg.properties.ID_TYPE, str, schemas.Unset] = schemas.unset,
                                LAST_NAME: typing.Union[MetaOapg.properties.LAST_NAME, str, schemas.Unset] = schemas.unset,
                                MIDDLE_NAME: typing.Union[MetaOapg.properties.MIDDLE_NAME, str, schemas.Unset] = schemas.unset,
                                PLACE_OF_BIRTH: typing.Union[MetaOapg.properties.PLACE_OF_BIRTH, str, schemas.Unset] = schemas.unset,
                                RESTRICTIONS: typing.Union[MetaOapg.properties.RESTRICTIONS, str, schemas.Unset] = schemas.unset,
                                STATE_IN_ADDRESS: typing.Union[MetaOapg.properties.STATE_IN_ADDRESS, str, schemas.Unset] = schemas.unset,
                                STATE_NAME: typing.Union[MetaOapg.properties.STATE_NAME, str, schemas.Unset] = schemas.unset,
                                SUFFIX: typing.Union[MetaOapg.properties.SUFFIX, str, schemas.Unset] = schemas.unset,
                                VETERAN: typing.Union[MetaOapg.properties.VETERAN, str, schemas.Unset] = schemas.unset,
                                ZIP_CODE_IN_ADDRESS: typing.Union[MetaOapg.properties.ZIP_CODE_IN_ADDRESS, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'data':
                                return super().__new__(
                                    cls,
                                    *args,
                                    ADDRESS=ADDRESS,
                                    CITY_IN_ADDRESS=CITY_IN_ADDRESS,
                                    COUNTY=COUNTY,
                                    DATE_OF_BIRTH=DATE_OF_BIRTH,
                                    DATE_OF_ISSUE=DATE_OF_ISSUE,
                                    DOCUMENT_NUMBER=DOCUMENT_NUMBER,
                                    ENDORSEMENTS=ENDORSEMENTS,
                                    EXPIRATION_DATE=EXPIRATION_DATE,
                                    FIRST_NAME=FIRST_NAME,
                                    ID_TYPE=ID_TYPE,
                                    LAST_NAME=LAST_NAME,
                                    MIDDLE_NAME=MIDDLE_NAME,
                                    PLACE_OF_BIRTH=PLACE_OF_BIRTH,
                                    RESTRICTIONS=RESTRICTIONS,
                                    STATE_IN_ADDRESS=STATE_IN_ADDRESS,
                                    STATE_NAME=STATE_NAME,
                                    SUFFIX=SUFFIX,
                                    VETERAN=VETERAN,
                                    ZIP_CODE_IN_ADDRESS=ZIP_CODE_IN_ADDRESS,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "data": data,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        data=data,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetDocumentAnalysisResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
