# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetAccountAnalysisResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class accountBreakdown(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    TotalCreditEntry = schemas.NumberSchema
                                    TotalDebitMade = schemas.NumberSchema
                                    averageMonthlyBalance = schemas.NumberSchema
                                    averageMonthlyCredits = schemas.NumberSchema
                                    averageMonthlyDebits = schemas.NumberSchema
                                    averageWeeklyBalance = schemas.NumberSchema
                                    averageWeeklyCredits = schemas.NumberSchema
                                    averageWeeklyDebits = schemas.NumberSchema
                                    closingBalance = schemas.NumberSchema
                                    firstDateInStatement = schemas.StrSchema
                                    lastDateInStatement = schemas.StrSchema
                                    numberOfTransactingMonths = schemas.NumberSchema
                                    periodInStatement = schemas.StrSchema
                                    yearInStatement = schemas.StrSchema
                                    __annotations__ = {
                                        "TotalCreditEntry": TotalCreditEntry,
                                        "TotalDebitMade": TotalDebitMade,
                                        "averageMonthlyBalance": averageMonthlyBalance,
                                        "averageMonthlyCredits": averageMonthlyCredits,
                                        "averageMonthlyDebits": averageMonthlyDebits,
                                        "averageWeeklyBalance": averageWeeklyBalance,
                                        "averageWeeklyCredits": averageWeeklyCredits,
                                        "averageWeeklyDebits": averageWeeklyDebits,
                                        "closingBalance": closingBalance,
                                        "firstDateInStatement": firstDateInStatement,
                                        "lastDateInStatement": lastDateInStatement,
                                        "numberOfTransactingMonths": numberOfTransactingMonths,
                                        "periodInStatement": periodInStatement,
                                        "yearInStatement": yearInStatement,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["TotalCreditEntry"]) -> MetaOapg.properties.TotalCreditEntry: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["TotalDebitMade"]) -> MetaOapg.properties.TotalDebitMade: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyBalance"]) -> MetaOapg.properties.averageMonthlyBalance: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyCredits"]) -> MetaOapg.properties.averageMonthlyCredits: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyDebits"]) -> MetaOapg.properties.averageMonthlyDebits: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageWeeklyBalance"]) -> MetaOapg.properties.averageWeeklyBalance: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageWeeklyCredits"]) -> MetaOapg.properties.averageWeeklyCredits: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageWeeklyDebits"]) -> MetaOapg.properties.averageWeeklyDebits: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["closingBalance"]) -> MetaOapg.properties.closingBalance: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["firstDateInStatement"]) -> MetaOapg.properties.firstDateInStatement: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["lastDateInStatement"]) -> MetaOapg.properties.lastDateInStatement: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["numberOfTransactingMonths"]) -> MetaOapg.properties.numberOfTransactingMonths: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["periodInStatement"]) -> MetaOapg.properties.periodInStatement: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["yearInStatement"]) -> MetaOapg.properties.yearInStatement: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["TotalCreditEntry", "TotalDebitMade", "averageMonthlyBalance", "averageMonthlyCredits", "averageMonthlyDebits", "averageWeeklyBalance", "averageWeeklyCredits", "averageWeeklyDebits", "closingBalance", "firstDateInStatement", "lastDateInStatement", "numberOfTransactingMonths", "periodInStatement", "yearInStatement", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["TotalCreditEntry"]) -> typing.Union[MetaOapg.properties.TotalCreditEntry, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["TotalDebitMade"]) -> typing.Union[MetaOapg.properties.TotalDebitMade, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyBalance"]) -> typing.Union[MetaOapg.properties.averageMonthlyBalance, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyCredits"]) -> typing.Union[MetaOapg.properties.averageMonthlyCredits, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyDebits"]) -> typing.Union[MetaOapg.properties.averageMonthlyDebits, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageWeeklyBalance"]) -> typing.Union[MetaOapg.properties.averageWeeklyBalance, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageWeeklyCredits"]) -> typing.Union[MetaOapg.properties.averageWeeklyCredits, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageWeeklyDebits"]) -> typing.Union[MetaOapg.properties.averageWeeklyDebits, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["closingBalance"]) -> typing.Union[MetaOapg.properties.closingBalance, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["firstDateInStatement"]) -> typing.Union[MetaOapg.properties.firstDateInStatement, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["lastDateInStatement"]) -> typing.Union[MetaOapg.properties.lastDateInStatement, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["numberOfTransactingMonths"]) -> typing.Union[MetaOapg.properties.numberOfTransactingMonths, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["periodInStatement"]) -> typing.Union[MetaOapg.properties.periodInStatement, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["yearInStatement"]) -> typing.Union[MetaOapg.properties.yearInStatement, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["TotalCreditEntry", "TotalDebitMade", "averageMonthlyBalance", "averageMonthlyCredits", "averageMonthlyDebits", "averageWeeklyBalance", "averageWeeklyCredits", "averageWeeklyDebits", "closingBalance", "firstDateInStatement", "lastDateInStatement", "numberOfTransactingMonths", "periodInStatement", "yearInStatement", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                TotalCreditEntry: typing.Union[MetaOapg.properties.TotalCreditEntry, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                TotalDebitMade: typing.Union[MetaOapg.properties.TotalDebitMade, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyBalance: typing.Union[MetaOapg.properties.averageMonthlyBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyCredits: typing.Union[MetaOapg.properties.averageMonthlyCredits, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyDebits: typing.Union[MetaOapg.properties.averageMonthlyDebits, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageWeeklyBalance: typing.Union[MetaOapg.properties.averageWeeklyBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageWeeklyCredits: typing.Union[MetaOapg.properties.averageWeeklyCredits, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageWeeklyDebits: typing.Union[MetaOapg.properties.averageWeeklyDebits, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                closingBalance: typing.Union[MetaOapg.properties.closingBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                firstDateInStatement: typing.Union[MetaOapg.properties.firstDateInStatement, str, schemas.Unset] = schemas.unset,
                                lastDateInStatement: typing.Union[MetaOapg.properties.lastDateInStatement, str, schemas.Unset] = schemas.unset,
                                numberOfTransactingMonths: typing.Union[MetaOapg.properties.numberOfTransactingMonths, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                periodInStatement: typing.Union[MetaOapg.properties.periodInStatement, str, schemas.Unset] = schemas.unset,
                                yearInStatement: typing.Union[MetaOapg.properties.yearInStatement, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'accountBreakdown':
                                return super().__new__(
                                    cls,
                                    *args,
                                    TotalCreditEntry=TotalCreditEntry,
                                    TotalDebitMade=TotalDebitMade,
                                    averageMonthlyBalance=averageMonthlyBalance,
                                    averageMonthlyCredits=averageMonthlyCredits,
                                    averageMonthlyDebits=averageMonthlyDebits,
                                    averageWeeklyBalance=averageWeeklyBalance,
                                    averageWeeklyCredits=averageWeeklyCredits,
                                    averageWeeklyDebits=averageWeeklyDebits,
                                    closingBalance=closingBalance,
                                    firstDateInStatement=firstDateInStatement,
                                    lastDateInStatement=lastDateInStatement,
                                    numberOfTransactingMonths=numberOfTransactingMonths,
                                    periodInStatement=periodInStatement,
                                    yearInStatement=yearInStatement,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class expenseBreakdown(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    MaximumExpense = schemas.StrSchema
                                    
                                    
                                    class atmLocations(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'atmLocations':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    averageMonthlyExpenseOnAirtimeandData = schemas.NumberSchema
                                    averageMonthlyExpenseOnAtmAndPOS = schemas.NumberSchema
                                    averageMonthlyExpenseOnChargesAndStampDuty = schemas.NumberSchema
                                    averageMonthlyExpenseOnEntertainment = schemas.NumberSchema
                                    averageMonthlyExpenseOnGambling = schemas.NumberSchema
                                    averageMonthlyExpenseOnHealth = schemas.NumberSchema
                                    averageMonthlyExpenseOnHospitalityandFood = schemas.NumberSchema
                                    averageMonthlyExpenseOnInsurance = schemas.NumberSchema
                                    averageMonthlyExpenseOnInternationalTransactions = schemas.NumberSchema
                                    averageMonthlyExpenseOnOnlineandWeb = schemas.NumberSchema
                                    averageMonthlyExpenseOnRent = schemas.NumberSchema
                                    averageMonthlyExpenseOnSavingsAndInvestments = schemas.NumberSchema
                                    averageMonthlyExpenseOnTransfer = schemas.NumberSchema
                                    averageMonthlyExpenseOnTransportation = schemas.NumberSchema
                                    averageMonthlyExpenseOnUSSD = schemas.NumberSchema
                                    averageMonthlyExpenseOnUtilities = schemas.NumberSchema
                                    averageMonthlyExpenseonTravel = schemas.NumberSchema
                                    averageMonthlyRecurringExpenses = schemas.NumberSchema
                                    averageMonthlyTotalExpenses = schemas.NumberSchema
                                    minimumSalary = schemas.NumberSchema
                                    monthWithmaximumExpense = schemas.StrSchema
                                    mostFrequentExpense = schemas.StrSchema
                                    mostFrequentExpenseCategory = schemas.StrSchema
                                    totalExpenseOnAirtimeAndData = schemas.NumberSchema
                                    totalExpenseOnInternationalTransactions = schemas.NumberSchema
                                    totalExpenseOnSavingsAndInvestments = schemas.NumberSchema
                                    totalExpenseOnTransfer = schemas.NumberSchema
                                    totalExpenseOnTransportation = schemas.NumberSchema
                                    totalExpenseOnTravel = schemas.NumberSchema
                                    totalExpenseOnUSSD = schemas.NumberSchema
                                    totalExpenseOnUtilities = schemas.NumberSchema
                                    totalExpenseonChargesAndStampDuty = schemas.NumberSchema
                                    totalExpenseonEntertainment = schemas.NumberSchema
                                    totalExpenseonGambling = schemas.NumberSchema
                                    totalExpenseonHealth = schemas.NumberSchema
                                    totalExpenseonHospitalityandFood = schemas.NumberSchema
                                    totalExpenseonInsurance = schemas.NumberSchema
                                    totalExpenseonOnlineandWeb = schemas.NumberSchema
                                    totalMonthlyExpenses = schemas.NumberSchema
                                    totalRecurringExpenses = schemas.NumberSchema
                                    __annotations__ = {
                                        "MaximumExpense": MaximumExpense,
                                        "atmLocations": atmLocations,
                                        "averageMonthlyExpenseOnAirtimeandData": averageMonthlyExpenseOnAirtimeandData,
                                        "averageMonthlyExpenseOnAtmAndPOS": averageMonthlyExpenseOnAtmAndPOS,
                                        "averageMonthlyExpenseOnChargesAndStampDuty": averageMonthlyExpenseOnChargesAndStampDuty,
                                        "averageMonthlyExpenseOnEntertainment": averageMonthlyExpenseOnEntertainment,
                                        "averageMonthlyExpenseOnGambling": averageMonthlyExpenseOnGambling,
                                        "averageMonthlyExpenseOnHealth": averageMonthlyExpenseOnHealth,
                                        "averageMonthlyExpenseOnHospitalityandFood": averageMonthlyExpenseOnHospitalityandFood,
                                        "averageMonthlyExpenseOnInsurance": averageMonthlyExpenseOnInsurance,
                                        "averageMonthlyExpenseOnInternationalTransactions": averageMonthlyExpenseOnInternationalTransactions,
                                        "averageMonthlyExpenseOnOnlineandWeb": averageMonthlyExpenseOnOnlineandWeb,
                                        "averageMonthlyExpenseOnRent": averageMonthlyExpenseOnRent,
                                        "averageMonthlyExpenseOnSavingsAndInvestments": averageMonthlyExpenseOnSavingsAndInvestments,
                                        "averageMonthlyExpenseOnTransfer": averageMonthlyExpenseOnTransfer,
                                        "averageMonthlyExpenseOnTransportation": averageMonthlyExpenseOnTransportation,
                                        "averageMonthlyExpenseOnUSSD": averageMonthlyExpenseOnUSSD,
                                        "averageMonthlyExpenseOnUtilities": averageMonthlyExpenseOnUtilities,
                                        "averageMonthlyExpenseonTravel": averageMonthlyExpenseonTravel,
                                        "averageMonthlyRecurringExpenses": averageMonthlyRecurringExpenses,
                                        "averageMonthlyTotalExpenses": averageMonthlyTotalExpenses,
                                        "minimumSalary": minimumSalary,
                                        "monthWithmaximumExpense": monthWithmaximumExpense,
                                        "mostFrequentExpense": mostFrequentExpense,
                                        "mostFrequentExpenseCategory": mostFrequentExpenseCategory,
                                        "totalExpenseOnAirtimeAndData": totalExpenseOnAirtimeAndData,
                                        "totalExpenseOnInternationalTransactions": totalExpenseOnInternationalTransactions,
                                        "totalExpenseOnSavingsAndInvestments": totalExpenseOnSavingsAndInvestments,
                                        "totalExpenseOnTransfer": totalExpenseOnTransfer,
                                        "totalExpenseOnTransportation": totalExpenseOnTransportation,
                                        "totalExpenseOnTravel": totalExpenseOnTravel,
                                        "totalExpenseOnUSSD": totalExpenseOnUSSD,
                                        "totalExpenseOnUtilities": totalExpenseOnUtilities,
                                        "totalExpenseonChargesAndStampDuty": totalExpenseonChargesAndStampDuty,
                                        "totalExpenseonEntertainment": totalExpenseonEntertainment,
                                        "totalExpenseonGambling": totalExpenseonGambling,
                                        "totalExpenseonHealth": totalExpenseonHealth,
                                        "totalExpenseonHospitalityandFood": totalExpenseonHospitalityandFood,
                                        "totalExpenseonInsurance": totalExpenseonInsurance,
                                        "totalExpenseonOnlineandWeb": totalExpenseonOnlineandWeb,
                                        "totalMonthlyExpenses": totalMonthlyExpenses,
                                        "totalRecurringExpenses": totalRecurringExpenses,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["MaximumExpense"]) -> MetaOapg.properties.MaximumExpense: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["atmLocations"]) -> MetaOapg.properties.atmLocations: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnAirtimeandData"]) -> MetaOapg.properties.averageMonthlyExpenseOnAirtimeandData: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnAtmAndPOS"]) -> MetaOapg.properties.averageMonthlyExpenseOnAtmAndPOS: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnChargesAndStampDuty"]) -> MetaOapg.properties.averageMonthlyExpenseOnChargesAndStampDuty: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnEntertainment"]) -> MetaOapg.properties.averageMonthlyExpenseOnEntertainment: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnGambling"]) -> MetaOapg.properties.averageMonthlyExpenseOnGambling: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnHealth"]) -> MetaOapg.properties.averageMonthlyExpenseOnHealth: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnHospitalityandFood"]) -> MetaOapg.properties.averageMonthlyExpenseOnHospitalityandFood: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnInsurance"]) -> MetaOapg.properties.averageMonthlyExpenseOnInsurance: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnInternationalTransactions"]) -> MetaOapg.properties.averageMonthlyExpenseOnInternationalTransactions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnOnlineandWeb"]) -> MetaOapg.properties.averageMonthlyExpenseOnOnlineandWeb: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnRent"]) -> MetaOapg.properties.averageMonthlyExpenseOnRent: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnSavingsAndInvestments"]) -> MetaOapg.properties.averageMonthlyExpenseOnSavingsAndInvestments: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnTransfer"]) -> MetaOapg.properties.averageMonthlyExpenseOnTransfer: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnTransportation"]) -> MetaOapg.properties.averageMonthlyExpenseOnTransportation: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnUSSD"]) -> MetaOapg.properties.averageMonthlyExpenseOnUSSD: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseOnUtilities"]) -> MetaOapg.properties.averageMonthlyExpenseOnUtilities: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyExpenseonTravel"]) -> MetaOapg.properties.averageMonthlyExpenseonTravel: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyRecurringExpenses"]) -> MetaOapg.properties.averageMonthlyRecurringExpenses: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyTotalExpenses"]) -> MetaOapg.properties.averageMonthlyTotalExpenses: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["minimumSalary"]) -> MetaOapg.properties.minimumSalary: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["monthWithmaximumExpense"]) -> MetaOapg.properties.monthWithmaximumExpense: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["mostFrequentExpense"]) -> MetaOapg.properties.mostFrequentExpense: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["mostFrequentExpenseCategory"]) -> MetaOapg.properties.mostFrequentExpenseCategory: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseOnAirtimeAndData"]) -> MetaOapg.properties.totalExpenseOnAirtimeAndData: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseOnInternationalTransactions"]) -> MetaOapg.properties.totalExpenseOnInternationalTransactions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseOnSavingsAndInvestments"]) -> MetaOapg.properties.totalExpenseOnSavingsAndInvestments: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseOnTransfer"]) -> MetaOapg.properties.totalExpenseOnTransfer: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseOnTransportation"]) -> MetaOapg.properties.totalExpenseOnTransportation: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseOnTravel"]) -> MetaOapg.properties.totalExpenseOnTravel: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseOnUSSD"]) -> MetaOapg.properties.totalExpenseOnUSSD: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseOnUtilities"]) -> MetaOapg.properties.totalExpenseOnUtilities: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseonChargesAndStampDuty"]) -> MetaOapg.properties.totalExpenseonChargesAndStampDuty: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseonEntertainment"]) -> MetaOapg.properties.totalExpenseonEntertainment: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseonGambling"]) -> MetaOapg.properties.totalExpenseonGambling: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseonHealth"]) -> MetaOapg.properties.totalExpenseonHealth: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseonHospitalityandFood"]) -> MetaOapg.properties.totalExpenseonHospitalityandFood: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseonInsurance"]) -> MetaOapg.properties.totalExpenseonInsurance: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalExpenseonOnlineandWeb"]) -> MetaOapg.properties.totalExpenseonOnlineandWeb: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalMonthlyExpenses"]) -> MetaOapg.properties.totalMonthlyExpenses: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalRecurringExpenses"]) -> MetaOapg.properties.totalRecurringExpenses: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["MaximumExpense", "atmLocations", "averageMonthlyExpenseOnAirtimeandData", "averageMonthlyExpenseOnAtmAndPOS", "averageMonthlyExpenseOnChargesAndStampDuty", "averageMonthlyExpenseOnEntertainment", "averageMonthlyExpenseOnGambling", "averageMonthlyExpenseOnHealth", "averageMonthlyExpenseOnHospitalityandFood", "averageMonthlyExpenseOnInsurance", "averageMonthlyExpenseOnInternationalTransactions", "averageMonthlyExpenseOnOnlineandWeb", "averageMonthlyExpenseOnRent", "averageMonthlyExpenseOnSavingsAndInvestments", "averageMonthlyExpenseOnTransfer", "averageMonthlyExpenseOnTransportation", "averageMonthlyExpenseOnUSSD", "averageMonthlyExpenseOnUtilities", "averageMonthlyExpenseonTravel", "averageMonthlyRecurringExpenses", "averageMonthlyTotalExpenses", "minimumSalary", "monthWithmaximumExpense", "mostFrequentExpense", "mostFrequentExpenseCategory", "totalExpenseOnAirtimeAndData", "totalExpenseOnInternationalTransactions", "totalExpenseOnSavingsAndInvestments", "totalExpenseOnTransfer", "totalExpenseOnTransportation", "totalExpenseOnTravel", "totalExpenseOnUSSD", "totalExpenseOnUtilities", "totalExpenseonChargesAndStampDuty", "totalExpenseonEntertainment", "totalExpenseonGambling", "totalExpenseonHealth", "totalExpenseonHospitalityandFood", "totalExpenseonInsurance", "totalExpenseonOnlineandWeb", "totalMonthlyExpenses", "totalRecurringExpenses", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["MaximumExpense"]) -> typing.Union[MetaOapg.properties.MaximumExpense, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["atmLocations"]) -> typing.Union[MetaOapg.properties.atmLocations, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnAirtimeandData"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnAirtimeandData, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnAtmAndPOS"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnAtmAndPOS, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnChargesAndStampDuty"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnChargesAndStampDuty, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnEntertainment"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnEntertainment, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnGambling"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnGambling, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnHealth"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnHealth, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnHospitalityandFood"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnHospitalityandFood, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnInsurance"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnInsurance, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnInternationalTransactions"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnInternationalTransactions, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnOnlineandWeb"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnOnlineandWeb, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnRent"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnRent, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnSavingsAndInvestments"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnSavingsAndInvestments, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnTransfer"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnTransfer, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnTransportation"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnTransportation, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnUSSD"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnUSSD, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseOnUtilities"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseOnUtilities, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyExpenseonTravel"]) -> typing.Union[MetaOapg.properties.averageMonthlyExpenseonTravel, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyRecurringExpenses"]) -> typing.Union[MetaOapg.properties.averageMonthlyRecurringExpenses, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyTotalExpenses"]) -> typing.Union[MetaOapg.properties.averageMonthlyTotalExpenses, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["minimumSalary"]) -> typing.Union[MetaOapg.properties.minimumSalary, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["monthWithmaximumExpense"]) -> typing.Union[MetaOapg.properties.monthWithmaximumExpense, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["mostFrequentExpense"]) -> typing.Union[MetaOapg.properties.mostFrequentExpense, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["mostFrequentExpenseCategory"]) -> typing.Union[MetaOapg.properties.mostFrequentExpenseCategory, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseOnAirtimeAndData"]) -> typing.Union[MetaOapg.properties.totalExpenseOnAirtimeAndData, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseOnInternationalTransactions"]) -> typing.Union[MetaOapg.properties.totalExpenseOnInternationalTransactions, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseOnSavingsAndInvestments"]) -> typing.Union[MetaOapg.properties.totalExpenseOnSavingsAndInvestments, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseOnTransfer"]) -> typing.Union[MetaOapg.properties.totalExpenseOnTransfer, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseOnTransportation"]) -> typing.Union[MetaOapg.properties.totalExpenseOnTransportation, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseOnTravel"]) -> typing.Union[MetaOapg.properties.totalExpenseOnTravel, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseOnUSSD"]) -> typing.Union[MetaOapg.properties.totalExpenseOnUSSD, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseOnUtilities"]) -> typing.Union[MetaOapg.properties.totalExpenseOnUtilities, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseonChargesAndStampDuty"]) -> typing.Union[MetaOapg.properties.totalExpenseonChargesAndStampDuty, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseonEntertainment"]) -> typing.Union[MetaOapg.properties.totalExpenseonEntertainment, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseonGambling"]) -> typing.Union[MetaOapg.properties.totalExpenseonGambling, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseonHealth"]) -> typing.Union[MetaOapg.properties.totalExpenseonHealth, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseonHospitalityandFood"]) -> typing.Union[MetaOapg.properties.totalExpenseonHospitalityandFood, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseonInsurance"]) -> typing.Union[MetaOapg.properties.totalExpenseonInsurance, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalExpenseonOnlineandWeb"]) -> typing.Union[MetaOapg.properties.totalExpenseonOnlineandWeb, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalMonthlyExpenses"]) -> typing.Union[MetaOapg.properties.totalMonthlyExpenses, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalRecurringExpenses"]) -> typing.Union[MetaOapg.properties.totalRecurringExpenses, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["MaximumExpense", "atmLocations", "averageMonthlyExpenseOnAirtimeandData", "averageMonthlyExpenseOnAtmAndPOS", "averageMonthlyExpenseOnChargesAndStampDuty", "averageMonthlyExpenseOnEntertainment", "averageMonthlyExpenseOnGambling", "averageMonthlyExpenseOnHealth", "averageMonthlyExpenseOnHospitalityandFood", "averageMonthlyExpenseOnInsurance", "averageMonthlyExpenseOnInternationalTransactions", "averageMonthlyExpenseOnOnlineandWeb", "averageMonthlyExpenseOnRent", "averageMonthlyExpenseOnSavingsAndInvestments", "averageMonthlyExpenseOnTransfer", "averageMonthlyExpenseOnTransportation", "averageMonthlyExpenseOnUSSD", "averageMonthlyExpenseOnUtilities", "averageMonthlyExpenseonTravel", "averageMonthlyRecurringExpenses", "averageMonthlyTotalExpenses", "minimumSalary", "monthWithmaximumExpense", "mostFrequentExpense", "mostFrequentExpenseCategory", "totalExpenseOnAirtimeAndData", "totalExpenseOnInternationalTransactions", "totalExpenseOnSavingsAndInvestments", "totalExpenseOnTransfer", "totalExpenseOnTransportation", "totalExpenseOnTravel", "totalExpenseOnUSSD", "totalExpenseOnUtilities", "totalExpenseonChargesAndStampDuty", "totalExpenseonEntertainment", "totalExpenseonGambling", "totalExpenseonHealth", "totalExpenseonHospitalityandFood", "totalExpenseonInsurance", "totalExpenseonOnlineandWeb", "totalMonthlyExpenses", "totalRecurringExpenses", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                MaximumExpense: typing.Union[MetaOapg.properties.MaximumExpense, str, schemas.Unset] = schemas.unset,
                                atmLocations: typing.Union[MetaOapg.properties.atmLocations, list, tuple, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnAirtimeandData: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnAirtimeandData, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnAtmAndPOS: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnAtmAndPOS, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnChargesAndStampDuty: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnChargesAndStampDuty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnEntertainment: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnEntertainment, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnGambling: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnGambling, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnHealth: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnHealth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnHospitalityandFood: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnHospitalityandFood, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnInsurance: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnInsurance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnInternationalTransactions: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnInternationalTransactions, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnOnlineandWeb: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnOnlineandWeb, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnRent: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnRent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnSavingsAndInvestments: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnSavingsAndInvestments, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnTransfer: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnTransfer, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnTransportation: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnTransportation, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnUSSD: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnUSSD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseOnUtilities: typing.Union[MetaOapg.properties.averageMonthlyExpenseOnUtilities, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyExpenseonTravel: typing.Union[MetaOapg.properties.averageMonthlyExpenseonTravel, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyRecurringExpenses: typing.Union[MetaOapg.properties.averageMonthlyRecurringExpenses, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyTotalExpenses: typing.Union[MetaOapg.properties.averageMonthlyTotalExpenses, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                minimumSalary: typing.Union[MetaOapg.properties.minimumSalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                monthWithmaximumExpense: typing.Union[MetaOapg.properties.monthWithmaximumExpense, str, schemas.Unset] = schemas.unset,
                                mostFrequentExpense: typing.Union[MetaOapg.properties.mostFrequentExpense, str, schemas.Unset] = schemas.unset,
                                mostFrequentExpenseCategory: typing.Union[MetaOapg.properties.mostFrequentExpenseCategory, str, schemas.Unset] = schemas.unset,
                                totalExpenseOnAirtimeAndData: typing.Union[MetaOapg.properties.totalExpenseOnAirtimeAndData, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseOnInternationalTransactions: typing.Union[MetaOapg.properties.totalExpenseOnInternationalTransactions, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseOnSavingsAndInvestments: typing.Union[MetaOapg.properties.totalExpenseOnSavingsAndInvestments, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseOnTransfer: typing.Union[MetaOapg.properties.totalExpenseOnTransfer, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseOnTransportation: typing.Union[MetaOapg.properties.totalExpenseOnTransportation, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseOnTravel: typing.Union[MetaOapg.properties.totalExpenseOnTravel, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseOnUSSD: typing.Union[MetaOapg.properties.totalExpenseOnUSSD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseOnUtilities: typing.Union[MetaOapg.properties.totalExpenseOnUtilities, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseonChargesAndStampDuty: typing.Union[MetaOapg.properties.totalExpenseonChargesAndStampDuty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseonEntertainment: typing.Union[MetaOapg.properties.totalExpenseonEntertainment, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseonGambling: typing.Union[MetaOapg.properties.totalExpenseonGambling, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseonHealth: typing.Union[MetaOapg.properties.totalExpenseonHealth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseonHospitalityandFood: typing.Union[MetaOapg.properties.totalExpenseonHospitalityandFood, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseonInsurance: typing.Union[MetaOapg.properties.totalExpenseonInsurance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalExpenseonOnlineandWeb: typing.Union[MetaOapg.properties.totalExpenseonOnlineandWeb, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalMonthlyExpenses: typing.Union[MetaOapg.properties.totalMonthlyExpenses, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalRecurringExpenses: typing.Union[MetaOapg.properties.totalRecurringExpenses, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'expenseBreakdown':
                                return super().__new__(
                                    cls,
                                    *args,
                                    MaximumExpense=MaximumExpense,
                                    atmLocations=atmLocations,
                                    averageMonthlyExpenseOnAirtimeandData=averageMonthlyExpenseOnAirtimeandData,
                                    averageMonthlyExpenseOnAtmAndPOS=averageMonthlyExpenseOnAtmAndPOS,
                                    averageMonthlyExpenseOnChargesAndStampDuty=averageMonthlyExpenseOnChargesAndStampDuty,
                                    averageMonthlyExpenseOnEntertainment=averageMonthlyExpenseOnEntertainment,
                                    averageMonthlyExpenseOnGambling=averageMonthlyExpenseOnGambling,
                                    averageMonthlyExpenseOnHealth=averageMonthlyExpenseOnHealth,
                                    averageMonthlyExpenseOnHospitalityandFood=averageMonthlyExpenseOnHospitalityandFood,
                                    averageMonthlyExpenseOnInsurance=averageMonthlyExpenseOnInsurance,
                                    averageMonthlyExpenseOnInternationalTransactions=averageMonthlyExpenseOnInternationalTransactions,
                                    averageMonthlyExpenseOnOnlineandWeb=averageMonthlyExpenseOnOnlineandWeb,
                                    averageMonthlyExpenseOnRent=averageMonthlyExpenseOnRent,
                                    averageMonthlyExpenseOnSavingsAndInvestments=averageMonthlyExpenseOnSavingsAndInvestments,
                                    averageMonthlyExpenseOnTransfer=averageMonthlyExpenseOnTransfer,
                                    averageMonthlyExpenseOnTransportation=averageMonthlyExpenseOnTransportation,
                                    averageMonthlyExpenseOnUSSD=averageMonthlyExpenseOnUSSD,
                                    averageMonthlyExpenseOnUtilities=averageMonthlyExpenseOnUtilities,
                                    averageMonthlyExpenseonTravel=averageMonthlyExpenseonTravel,
                                    averageMonthlyRecurringExpenses=averageMonthlyRecurringExpenses,
                                    averageMonthlyTotalExpenses=averageMonthlyTotalExpenses,
                                    minimumSalary=minimumSalary,
                                    monthWithmaximumExpense=monthWithmaximumExpense,
                                    mostFrequentExpense=mostFrequentExpense,
                                    mostFrequentExpenseCategory=mostFrequentExpenseCategory,
                                    totalExpenseOnAirtimeAndData=totalExpenseOnAirtimeAndData,
                                    totalExpenseOnInternationalTransactions=totalExpenseOnInternationalTransactions,
                                    totalExpenseOnSavingsAndInvestments=totalExpenseOnSavingsAndInvestments,
                                    totalExpenseOnTransfer=totalExpenseOnTransfer,
                                    totalExpenseOnTransportation=totalExpenseOnTransportation,
                                    totalExpenseOnTravel=totalExpenseOnTravel,
                                    totalExpenseOnUSSD=totalExpenseOnUSSD,
                                    totalExpenseOnUtilities=totalExpenseOnUtilities,
                                    totalExpenseonChargesAndStampDuty=totalExpenseonChargesAndStampDuty,
                                    totalExpenseonEntertainment=totalExpenseonEntertainment,
                                    totalExpenseonGambling=totalExpenseonGambling,
                                    totalExpenseonHealth=totalExpenseonHealth,
                                    totalExpenseonHospitalityandFood=totalExpenseonHospitalityandFood,
                                    totalExpenseonInsurance=totalExpenseonInsurance,
                                    totalExpenseonOnlineandWeb=totalExpenseonOnlineandWeb,
                                    totalMonthlyExpenses=totalMonthlyExpenses,
                                    totalRecurringExpenses=totalRecurringExpenses,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class fundsManagement(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    accountActivity = schemas.NumberSchema
                                    accountSweep = schemas.StrSchema
                                    averageMonthlyLoanAmount = schemas.NumberSchema
                                    averageMonthlyLoanRepaymentAmount = schemas.NumberSchema
                                    gamblingRate = schemas.NumberSchema
                                    gamblingStatus = schemas.StrSchema
                                    
                                    
                                    class loanInflowAmount(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'loanInflowAmount':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    loanRepaymentToInflowAmount = schemas.NumberSchema
                                    monthToMonthInflowToOutflowAmount = schemas.StrSchema
                                    
                                    
                                    class numberOfCreditLoanTransactions(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'numberOfCreditLoanTransactions':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class numberOfDebitRepaymentTransactions(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'numberOfDebitRepaymentTransactions':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    overallInflowToOutflowAmount = schemas.StrSchema
                                    percentOfInflowIrregularity = schemas.NumberSchema
                                    totalLoanAmount = schemas.NumberSchema
                                    totalLoanRepaymentAmount = schemas.NumberSchema
                                    __annotations__ = {
                                        "accountActivity": accountActivity,
                                        "accountSweep": accountSweep,
                                        "averageMonthlyLoanAmount": averageMonthlyLoanAmount,
                                        "averageMonthlyLoanRepaymentAmount": averageMonthlyLoanRepaymentAmount,
                                        "gamblingRate": gamblingRate,
                                        "gamblingStatus": gamblingStatus,
                                        "loanInflowAmount": loanInflowAmount,
                                        "loanRepaymentToInflowAmount": loanRepaymentToInflowAmount,
                                        "monthToMonthInflowToOutflowAmount": monthToMonthInflowToOutflowAmount,
                                        "numberOfCreditLoanTransactions": numberOfCreditLoanTransactions,
                                        "numberOfDebitRepaymentTransactions": numberOfDebitRepaymentTransactions,
                                        "overallInflowToOutflowAmount": overallInflowToOutflowAmount,
                                        "percentOfInflowIrregularity": percentOfInflowIrregularity,
                                        "totalLoanAmount": totalLoanAmount,
                                        "totalLoanRepaymentAmount": totalLoanRepaymentAmount,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["accountActivity"]) -> MetaOapg.properties.accountActivity: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["accountSweep"]) -> MetaOapg.properties.accountSweep: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyLoanAmount"]) -> MetaOapg.properties.averageMonthlyLoanAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageMonthlyLoanRepaymentAmount"]) -> MetaOapg.properties.averageMonthlyLoanRepaymentAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["gamblingRate"]) -> MetaOapg.properties.gamblingRate: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["gamblingStatus"]) -> MetaOapg.properties.gamblingStatus: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["loanInflowAmount"]) -> MetaOapg.properties.loanInflowAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["loanRepaymentToInflowAmount"]) -> MetaOapg.properties.loanRepaymentToInflowAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["monthToMonthInflowToOutflowAmount"]) -> MetaOapg.properties.monthToMonthInflowToOutflowAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["numberOfCreditLoanTransactions"]) -> MetaOapg.properties.numberOfCreditLoanTransactions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["numberOfDebitRepaymentTransactions"]) -> MetaOapg.properties.numberOfDebitRepaymentTransactions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["overallInflowToOutflowAmount"]) -> MetaOapg.properties.overallInflowToOutflowAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfInflowIrregularity"]) -> MetaOapg.properties.percentOfInflowIrregularity: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalLoanAmount"]) -> MetaOapg.properties.totalLoanAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalLoanRepaymentAmount"]) -> MetaOapg.properties.totalLoanRepaymentAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountActivity", "accountSweep", "averageMonthlyLoanAmount", "averageMonthlyLoanRepaymentAmount", "gamblingRate", "gamblingStatus", "loanInflowAmount", "loanRepaymentToInflowAmount", "monthToMonthInflowToOutflowAmount", "numberOfCreditLoanTransactions", "numberOfDebitRepaymentTransactions", "overallInflowToOutflowAmount", "percentOfInflowIrregularity", "totalLoanAmount", "totalLoanRepaymentAmount", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["accountActivity"]) -> typing.Union[MetaOapg.properties.accountActivity, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["accountSweep"]) -> typing.Union[MetaOapg.properties.accountSweep, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyLoanAmount"]) -> typing.Union[MetaOapg.properties.averageMonthlyLoanAmount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageMonthlyLoanRepaymentAmount"]) -> typing.Union[MetaOapg.properties.averageMonthlyLoanRepaymentAmount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["gamblingRate"]) -> typing.Union[MetaOapg.properties.gamblingRate, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["gamblingStatus"]) -> typing.Union[MetaOapg.properties.gamblingStatus, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["loanInflowAmount"]) -> typing.Union[MetaOapg.properties.loanInflowAmount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["loanRepaymentToInflowAmount"]) -> typing.Union[MetaOapg.properties.loanRepaymentToInflowAmount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["monthToMonthInflowToOutflowAmount"]) -> typing.Union[MetaOapg.properties.monthToMonthInflowToOutflowAmount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["numberOfCreditLoanTransactions"]) -> typing.Union[MetaOapg.properties.numberOfCreditLoanTransactions, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["numberOfDebitRepaymentTransactions"]) -> typing.Union[MetaOapg.properties.numberOfDebitRepaymentTransactions, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["overallInflowToOutflowAmount"]) -> typing.Union[MetaOapg.properties.overallInflowToOutflowAmount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfInflowIrregularity"]) -> typing.Union[MetaOapg.properties.percentOfInflowIrregularity, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalLoanAmount"]) -> typing.Union[MetaOapg.properties.totalLoanAmount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalLoanRepaymentAmount"]) -> typing.Union[MetaOapg.properties.totalLoanRepaymentAmount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountActivity", "accountSweep", "averageMonthlyLoanAmount", "averageMonthlyLoanRepaymentAmount", "gamblingRate", "gamblingStatus", "loanInflowAmount", "loanRepaymentToInflowAmount", "monthToMonthInflowToOutflowAmount", "numberOfCreditLoanTransactions", "numberOfDebitRepaymentTransactions", "overallInflowToOutflowAmount", "percentOfInflowIrregularity", "totalLoanAmount", "totalLoanRepaymentAmount", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                accountActivity: typing.Union[MetaOapg.properties.accountActivity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                accountSweep: typing.Union[MetaOapg.properties.accountSweep, str, schemas.Unset] = schemas.unset,
                                averageMonthlyLoanAmount: typing.Union[MetaOapg.properties.averageMonthlyLoanAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageMonthlyLoanRepaymentAmount: typing.Union[MetaOapg.properties.averageMonthlyLoanRepaymentAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                gamblingRate: typing.Union[MetaOapg.properties.gamblingRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                gamblingStatus: typing.Union[MetaOapg.properties.gamblingStatus, str, schemas.Unset] = schemas.unset,
                                loanInflowAmount: typing.Union[MetaOapg.properties.loanInflowAmount, None, str, schemas.Unset] = schemas.unset,
                                loanRepaymentToInflowAmount: typing.Union[MetaOapg.properties.loanRepaymentToInflowAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                monthToMonthInflowToOutflowAmount: typing.Union[MetaOapg.properties.monthToMonthInflowToOutflowAmount, str, schemas.Unset] = schemas.unset,
                                numberOfCreditLoanTransactions: typing.Union[MetaOapg.properties.numberOfCreditLoanTransactions, None, str, schemas.Unset] = schemas.unset,
                                numberOfDebitRepaymentTransactions: typing.Union[MetaOapg.properties.numberOfDebitRepaymentTransactions, None, str, schemas.Unset] = schemas.unset,
                                overallInflowToOutflowAmount: typing.Union[MetaOapg.properties.overallInflowToOutflowAmount, str, schemas.Unset] = schemas.unset,
                                percentOfInflowIrregularity: typing.Union[MetaOapg.properties.percentOfInflowIrregularity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalLoanAmount: typing.Union[MetaOapg.properties.totalLoanAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalLoanRepaymentAmount: typing.Union[MetaOapg.properties.totalLoanRepaymentAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'fundsManagement':
                                return super().__new__(
                                    cls,
                                    *args,
                                    accountActivity=accountActivity,
                                    accountSweep=accountSweep,
                                    averageMonthlyLoanAmount=averageMonthlyLoanAmount,
                                    averageMonthlyLoanRepaymentAmount=averageMonthlyLoanRepaymentAmount,
                                    gamblingRate=gamblingRate,
                                    gamblingStatus=gamblingStatus,
                                    loanInflowAmount=loanInflowAmount,
                                    loanRepaymentToInflowAmount=loanRepaymentToInflowAmount,
                                    monthToMonthInflowToOutflowAmount=monthToMonthInflowToOutflowAmount,
                                    numberOfCreditLoanTransactions=numberOfCreditLoanTransactions,
                                    numberOfDebitRepaymentTransactions=numberOfDebitRepaymentTransactions,
                                    overallInflowToOutflowAmount=overallInflowToOutflowAmount,
                                    percentOfInflowIrregularity=percentOfInflowIrregularity,
                                    totalLoanAmount=totalLoanAmount,
                                    totalLoanRepaymentAmount=totalLoanRepaymentAmount,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class inflowBreakdown(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    AdditionalIncome = schemas.StrSchema
                                    
                                    
                                    class RecurringSalaryPayments(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'RecurringSalaryPayments':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    aSalaryEarner = schemas.StrSchema
                                    averageAdditionalIncome = schemas.NumberSchema
                                    averageGuaranteedSalary = schemas.NumberSchema
                                    
                                    
                                    class estimatedSalaryPaymentDay(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'estimatedSalaryPaymentDay':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class lastDateOfSalaryPayment(
                                        schemas.StrBase,
                                        schemas.NoneBase,
                                        schemas.Schema,
                                        schemas.NoneStrMixin
                                    ):
                                    
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[None, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'lastDateOfSalaryPayment':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                _configuration=_configuration,
                                            )
                                    minimumSalary = schemas.NumberSchema
                                    netAverageMonthlySalary = schemas.NumberSchema
                                    numberOfAdditionalIncomePayments = schemas.NumberSchema
                                    totalnumberOfSalaryPayments = schemas.NumberSchema
                                    __annotations__ = {
                                        "AdditionalIncome": AdditionalIncome,
                                        "RecurringSalaryPayments": RecurringSalaryPayments,
                                        "aSalaryEarner": aSalaryEarner,
                                        "averageAdditionalIncome": averageAdditionalIncome,
                                        "averageGuaranteedSalary": averageGuaranteedSalary,
                                        "estimatedSalaryPaymentDay": estimatedSalaryPaymentDay,
                                        "lastDateOfSalaryPayment": lastDateOfSalaryPayment,
                                        "minimumSalary": minimumSalary,
                                        "netAverageMonthlySalary": netAverageMonthlySalary,
                                        "numberOfAdditionalIncomePayments": numberOfAdditionalIncomePayments,
                                        "totalnumberOfSalaryPayments": totalnumberOfSalaryPayments,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["AdditionalIncome"]) -> MetaOapg.properties.AdditionalIncome: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["RecurringSalaryPayments"]) -> MetaOapg.properties.RecurringSalaryPayments: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["aSalaryEarner"]) -> MetaOapg.properties.aSalaryEarner: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageAdditionalIncome"]) -> MetaOapg.properties.averageAdditionalIncome: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["averageGuaranteedSalary"]) -> MetaOapg.properties.averageGuaranteedSalary: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["estimatedSalaryPaymentDay"]) -> MetaOapg.properties.estimatedSalaryPaymentDay: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["lastDateOfSalaryPayment"]) -> MetaOapg.properties.lastDateOfSalaryPayment: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["minimumSalary"]) -> MetaOapg.properties.minimumSalary: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["netAverageMonthlySalary"]) -> MetaOapg.properties.netAverageMonthlySalary: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["numberOfAdditionalIncomePayments"]) -> MetaOapg.properties.numberOfAdditionalIncomePayments: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalnumberOfSalaryPayments"]) -> MetaOapg.properties.totalnumberOfSalaryPayments: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["AdditionalIncome", "RecurringSalaryPayments", "aSalaryEarner", "averageAdditionalIncome", "averageGuaranteedSalary", "estimatedSalaryPaymentDay", "lastDateOfSalaryPayment", "minimumSalary", "netAverageMonthlySalary", "numberOfAdditionalIncomePayments", "totalnumberOfSalaryPayments", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["AdditionalIncome"]) -> typing.Union[MetaOapg.properties.AdditionalIncome, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["RecurringSalaryPayments"]) -> typing.Union[MetaOapg.properties.RecurringSalaryPayments, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["aSalaryEarner"]) -> typing.Union[MetaOapg.properties.aSalaryEarner, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageAdditionalIncome"]) -> typing.Union[MetaOapg.properties.averageAdditionalIncome, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["averageGuaranteedSalary"]) -> typing.Union[MetaOapg.properties.averageGuaranteedSalary, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["estimatedSalaryPaymentDay"]) -> typing.Union[MetaOapg.properties.estimatedSalaryPaymentDay, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["lastDateOfSalaryPayment"]) -> typing.Union[MetaOapg.properties.lastDateOfSalaryPayment, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["minimumSalary"]) -> typing.Union[MetaOapg.properties.minimumSalary, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["netAverageMonthlySalary"]) -> typing.Union[MetaOapg.properties.netAverageMonthlySalary, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["numberOfAdditionalIncomePayments"]) -> typing.Union[MetaOapg.properties.numberOfAdditionalIncomePayments, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalnumberOfSalaryPayments"]) -> typing.Union[MetaOapg.properties.totalnumberOfSalaryPayments, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AdditionalIncome", "RecurringSalaryPayments", "aSalaryEarner", "averageAdditionalIncome", "averageGuaranteedSalary", "estimatedSalaryPaymentDay", "lastDateOfSalaryPayment", "minimumSalary", "netAverageMonthlySalary", "numberOfAdditionalIncomePayments", "totalnumberOfSalaryPayments", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                AdditionalIncome: typing.Union[MetaOapg.properties.AdditionalIncome, str, schemas.Unset] = schemas.unset,
                                RecurringSalaryPayments: typing.Union[MetaOapg.properties.RecurringSalaryPayments, None, str, schemas.Unset] = schemas.unset,
                                aSalaryEarner: typing.Union[MetaOapg.properties.aSalaryEarner, str, schemas.Unset] = schemas.unset,
                                averageAdditionalIncome: typing.Union[MetaOapg.properties.averageAdditionalIncome, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                averageGuaranteedSalary: typing.Union[MetaOapg.properties.averageGuaranteedSalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                estimatedSalaryPaymentDay: typing.Union[MetaOapg.properties.estimatedSalaryPaymentDay, None, str, schemas.Unset] = schemas.unset,
                                lastDateOfSalaryPayment: typing.Union[MetaOapg.properties.lastDateOfSalaryPayment, None, str, schemas.Unset] = schemas.unset,
                                minimumSalary: typing.Union[MetaOapg.properties.minimumSalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                netAverageMonthlySalary: typing.Union[MetaOapg.properties.netAverageMonthlySalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                numberOfAdditionalIncomePayments: typing.Union[MetaOapg.properties.numberOfAdditionalIncomePayments, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalnumberOfSalaryPayments: typing.Union[MetaOapg.properties.totalnumberOfSalaryPayments, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'inflowBreakdown':
                                return super().__new__(
                                    cls,
                                    *args,
                                    AdditionalIncome=AdditionalIncome,
                                    RecurringSalaryPayments=RecurringSalaryPayments,
                                    aSalaryEarner=aSalaryEarner,
                                    averageAdditionalIncome=averageAdditionalIncome,
                                    averageGuaranteedSalary=averageGuaranteedSalary,
                                    estimatedSalaryPaymentDay=estimatedSalaryPaymentDay,
                                    lastDateOfSalaryPayment=lastDateOfSalaryPayment,
                                    minimumSalary=minimumSalary,
                                    netAverageMonthlySalary=netAverageMonthlySalary,
                                    numberOfAdditionalIncomePayments=numberOfAdditionalIncomePayments,
                                    totalnumberOfSalaryPayments=totalnumberOfSalaryPayments,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class transactionRoutineBreakdown(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    MaximumExpense = schemas.NumberSchema
                                    lastCreditReceived = schemas.StrSchema
                                    lastDebitMade = schemas.StrSchema
                                    mostFrequentBalanceRange = schemas.StrSchema
                                    mostFrequentTransactionRange = schemas.StrSchema
                                    numberOfCardRequests = schemas.NumberSchema
                                    percentNumberOfDaysBalanceWasLessThan10ThousandNaira = schemas.NumberSchema
                                    percentNumberOfDaysTransactionsWasLessThan10ThousandNaira = schemas.NumberSchema
                                    percentOfBalancesBetween100ThousandTo500ThousandNaira = schemas.NumberSchema
                                    percentOfBalancesBetween10ThousandTo100ThousandNaira = schemas.NumberSchema
                                    percentOfBalancesBetween500ThousandToOneMillionNaira = schemas.NumberSchema
                                    percentOfBalancesGreaterThanOneMillionNaira = schemas.NumberSchema
                                    percentOfBalancesLessThan10ThousandNaira = schemas.NumberSchema
                                    percentOfTransactionsBetween100ThousandTo500ThousandNaira = schemas.NumberSchema
                                    percentOfTransactionsBetween10ThousandTo100ThousandNaira = schemas.NumberSchema
                                    percentOfTransactionsBetween500ThousandToOneMillionNaira = schemas.NumberSchema
                                    percentOfTransactionsGreaterThanOneMillionNaira = schemas.NumberSchema
                                    percentOfTransactionsLessThan10ThousandNaira = schemas.NumberSchema
                                    percentofCreditTransactions = schemas.NumberSchema
                                    percentofDebitTransactions = schemas.NumberSchema
                                    totalAmountOfTransactions = schemas.NumberSchema
                                    __annotations__ = {
                                        "MaximumExpense": MaximumExpense,
                                        "lastCreditReceived": lastCreditReceived,
                                        "lastDebitMade": lastDebitMade,
                                        "mostFrequentBalanceRange": mostFrequentBalanceRange,
                                        "mostFrequentTransactionRange": mostFrequentTransactionRange,
                                        "numberOfCardRequests": numberOfCardRequests,
                                        "percentNumberOfDaysBalanceWasLessThan10ThousandNaira": percentNumberOfDaysBalanceWasLessThan10ThousandNaira,
                                        "percentNumberOfDaysTransactionsWasLessThan10ThousandNaira": percentNumberOfDaysTransactionsWasLessThan10ThousandNaira,
                                        "percentOfBalancesBetween100ThousandTo500ThousandNaira": percentOfBalancesBetween100ThousandTo500ThousandNaira,
                                        "percentOfBalancesBetween10ThousandTo100ThousandNaira": percentOfBalancesBetween10ThousandTo100ThousandNaira,
                                        "percentOfBalancesBetween500ThousandToOneMillionNaira": percentOfBalancesBetween500ThousandToOneMillionNaira,
                                        "percentOfBalancesGreaterThanOneMillionNaira": percentOfBalancesGreaterThanOneMillionNaira,
                                        "percentOfBalancesLessThan10ThousandNaira": percentOfBalancesLessThan10ThousandNaira,
                                        "percentOfTransactionsBetween100ThousandTo500ThousandNaira": percentOfTransactionsBetween100ThousandTo500ThousandNaira,
                                        "percentOfTransactionsBetween10ThousandTo100ThousandNaira": percentOfTransactionsBetween10ThousandTo100ThousandNaira,
                                        "percentOfTransactionsBetween500ThousandToOneMillionNaira": percentOfTransactionsBetween500ThousandToOneMillionNaira,
                                        "percentOfTransactionsGreaterThanOneMillionNaira": percentOfTransactionsGreaterThanOneMillionNaira,
                                        "percentOfTransactionsLessThan10ThousandNaira": percentOfTransactionsLessThan10ThousandNaira,
                                        "percentofCreditTransactions": percentofCreditTransactions,
                                        "percentofDebitTransactions": percentofDebitTransactions,
                                        "totalAmountOfTransactions": totalAmountOfTransactions,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["MaximumExpense"]) -> MetaOapg.properties.MaximumExpense: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["lastCreditReceived"]) -> MetaOapg.properties.lastCreditReceived: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["lastDebitMade"]) -> MetaOapg.properties.lastDebitMade: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["mostFrequentBalanceRange"]) -> MetaOapg.properties.mostFrequentBalanceRange: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["mostFrequentTransactionRange"]) -> MetaOapg.properties.mostFrequentTransactionRange: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["numberOfCardRequests"]) -> MetaOapg.properties.numberOfCardRequests: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentNumberOfDaysBalanceWasLessThan10ThousandNaira"]) -> MetaOapg.properties.percentNumberOfDaysBalanceWasLessThan10ThousandNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentNumberOfDaysTransactionsWasLessThan10ThousandNaira"]) -> MetaOapg.properties.percentNumberOfDaysTransactionsWasLessThan10ThousandNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfBalancesBetween100ThousandTo500ThousandNaira"]) -> MetaOapg.properties.percentOfBalancesBetween100ThousandTo500ThousandNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfBalancesBetween10ThousandTo100ThousandNaira"]) -> MetaOapg.properties.percentOfBalancesBetween10ThousandTo100ThousandNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfBalancesBetween500ThousandToOneMillionNaira"]) -> MetaOapg.properties.percentOfBalancesBetween500ThousandToOneMillionNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfBalancesGreaterThanOneMillionNaira"]) -> MetaOapg.properties.percentOfBalancesGreaterThanOneMillionNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfBalancesLessThan10ThousandNaira"]) -> MetaOapg.properties.percentOfBalancesLessThan10ThousandNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfTransactionsBetween100ThousandTo500ThousandNaira"]) -> MetaOapg.properties.percentOfTransactionsBetween100ThousandTo500ThousandNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfTransactionsBetween10ThousandTo100ThousandNaira"]) -> MetaOapg.properties.percentOfTransactionsBetween10ThousandTo100ThousandNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfTransactionsBetween500ThousandToOneMillionNaira"]) -> MetaOapg.properties.percentOfTransactionsBetween500ThousandToOneMillionNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfTransactionsGreaterThanOneMillionNaira"]) -> MetaOapg.properties.percentOfTransactionsGreaterThanOneMillionNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentOfTransactionsLessThan10ThousandNaira"]) -> MetaOapg.properties.percentOfTransactionsLessThan10ThousandNaira: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentofCreditTransactions"]) -> MetaOapg.properties.percentofCreditTransactions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["percentofDebitTransactions"]) -> MetaOapg.properties.percentofDebitTransactions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["totalAmountOfTransactions"]) -> MetaOapg.properties.totalAmountOfTransactions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["MaximumExpense", "lastCreditReceived", "lastDebitMade", "mostFrequentBalanceRange", "mostFrequentTransactionRange", "numberOfCardRequests", "percentNumberOfDaysBalanceWasLessThan10ThousandNaira", "percentNumberOfDaysTransactionsWasLessThan10ThousandNaira", "percentOfBalancesBetween100ThousandTo500ThousandNaira", "percentOfBalancesBetween10ThousandTo100ThousandNaira", "percentOfBalancesBetween500ThousandToOneMillionNaira", "percentOfBalancesGreaterThanOneMillionNaira", "percentOfBalancesLessThan10ThousandNaira", "percentOfTransactionsBetween100ThousandTo500ThousandNaira", "percentOfTransactionsBetween10ThousandTo100ThousandNaira", "percentOfTransactionsBetween500ThousandToOneMillionNaira", "percentOfTransactionsGreaterThanOneMillionNaira", "percentOfTransactionsLessThan10ThousandNaira", "percentofCreditTransactions", "percentofDebitTransactions", "totalAmountOfTransactions", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["MaximumExpense"]) -> typing.Union[MetaOapg.properties.MaximumExpense, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["lastCreditReceived"]) -> typing.Union[MetaOapg.properties.lastCreditReceived, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["lastDebitMade"]) -> typing.Union[MetaOapg.properties.lastDebitMade, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["mostFrequentBalanceRange"]) -> typing.Union[MetaOapg.properties.mostFrequentBalanceRange, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["mostFrequentTransactionRange"]) -> typing.Union[MetaOapg.properties.mostFrequentTransactionRange, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["numberOfCardRequests"]) -> typing.Union[MetaOapg.properties.numberOfCardRequests, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentNumberOfDaysBalanceWasLessThan10ThousandNaira"]) -> typing.Union[MetaOapg.properties.percentNumberOfDaysBalanceWasLessThan10ThousandNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentNumberOfDaysTransactionsWasLessThan10ThousandNaira"]) -> typing.Union[MetaOapg.properties.percentNumberOfDaysTransactionsWasLessThan10ThousandNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfBalancesBetween100ThousandTo500ThousandNaira"]) -> typing.Union[MetaOapg.properties.percentOfBalancesBetween100ThousandTo500ThousandNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfBalancesBetween10ThousandTo100ThousandNaira"]) -> typing.Union[MetaOapg.properties.percentOfBalancesBetween10ThousandTo100ThousandNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfBalancesBetween500ThousandToOneMillionNaira"]) -> typing.Union[MetaOapg.properties.percentOfBalancesBetween500ThousandToOneMillionNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfBalancesGreaterThanOneMillionNaira"]) -> typing.Union[MetaOapg.properties.percentOfBalancesGreaterThanOneMillionNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfBalancesLessThan10ThousandNaira"]) -> typing.Union[MetaOapg.properties.percentOfBalancesLessThan10ThousandNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfTransactionsBetween100ThousandTo500ThousandNaira"]) -> typing.Union[MetaOapg.properties.percentOfTransactionsBetween100ThousandTo500ThousandNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfTransactionsBetween10ThousandTo100ThousandNaira"]) -> typing.Union[MetaOapg.properties.percentOfTransactionsBetween10ThousandTo100ThousandNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfTransactionsBetween500ThousandToOneMillionNaira"]) -> typing.Union[MetaOapg.properties.percentOfTransactionsBetween500ThousandToOneMillionNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfTransactionsGreaterThanOneMillionNaira"]) -> typing.Union[MetaOapg.properties.percentOfTransactionsGreaterThanOneMillionNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentOfTransactionsLessThan10ThousandNaira"]) -> typing.Union[MetaOapg.properties.percentOfTransactionsLessThan10ThousandNaira, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentofCreditTransactions"]) -> typing.Union[MetaOapg.properties.percentofCreditTransactions, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["percentofDebitTransactions"]) -> typing.Union[MetaOapg.properties.percentofDebitTransactions, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["totalAmountOfTransactions"]) -> typing.Union[MetaOapg.properties.totalAmountOfTransactions, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["MaximumExpense", "lastCreditReceived", "lastDebitMade", "mostFrequentBalanceRange", "mostFrequentTransactionRange", "numberOfCardRequests", "percentNumberOfDaysBalanceWasLessThan10ThousandNaira", "percentNumberOfDaysTransactionsWasLessThan10ThousandNaira", "percentOfBalancesBetween100ThousandTo500ThousandNaira", "percentOfBalancesBetween10ThousandTo100ThousandNaira", "percentOfBalancesBetween500ThousandToOneMillionNaira", "percentOfBalancesGreaterThanOneMillionNaira", "percentOfBalancesLessThan10ThousandNaira", "percentOfTransactionsBetween100ThousandTo500ThousandNaira", "percentOfTransactionsBetween10ThousandTo100ThousandNaira", "percentOfTransactionsBetween500ThousandToOneMillionNaira", "percentOfTransactionsGreaterThanOneMillionNaira", "percentOfTransactionsLessThan10ThousandNaira", "percentofCreditTransactions", "percentofDebitTransactions", "totalAmountOfTransactions", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                MaximumExpense: typing.Union[MetaOapg.properties.MaximumExpense, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                lastCreditReceived: typing.Union[MetaOapg.properties.lastCreditReceived, str, schemas.Unset] = schemas.unset,
                                lastDebitMade: typing.Union[MetaOapg.properties.lastDebitMade, str, schemas.Unset] = schemas.unset,
                                mostFrequentBalanceRange: typing.Union[MetaOapg.properties.mostFrequentBalanceRange, str, schemas.Unset] = schemas.unset,
                                mostFrequentTransactionRange: typing.Union[MetaOapg.properties.mostFrequentTransactionRange, str, schemas.Unset] = schemas.unset,
                                numberOfCardRequests: typing.Union[MetaOapg.properties.numberOfCardRequests, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentNumberOfDaysBalanceWasLessThan10ThousandNaira: typing.Union[MetaOapg.properties.percentNumberOfDaysBalanceWasLessThan10ThousandNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentNumberOfDaysTransactionsWasLessThan10ThousandNaira: typing.Union[MetaOapg.properties.percentNumberOfDaysTransactionsWasLessThan10ThousandNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfBalancesBetween100ThousandTo500ThousandNaira: typing.Union[MetaOapg.properties.percentOfBalancesBetween100ThousandTo500ThousandNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfBalancesBetween10ThousandTo100ThousandNaira: typing.Union[MetaOapg.properties.percentOfBalancesBetween10ThousandTo100ThousandNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfBalancesBetween500ThousandToOneMillionNaira: typing.Union[MetaOapg.properties.percentOfBalancesBetween500ThousandToOneMillionNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfBalancesGreaterThanOneMillionNaira: typing.Union[MetaOapg.properties.percentOfBalancesGreaterThanOneMillionNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfBalancesLessThan10ThousandNaira: typing.Union[MetaOapg.properties.percentOfBalancesLessThan10ThousandNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfTransactionsBetween100ThousandTo500ThousandNaira: typing.Union[MetaOapg.properties.percentOfTransactionsBetween100ThousandTo500ThousandNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfTransactionsBetween10ThousandTo100ThousandNaira: typing.Union[MetaOapg.properties.percentOfTransactionsBetween10ThousandTo100ThousandNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfTransactionsBetween500ThousandToOneMillionNaira: typing.Union[MetaOapg.properties.percentOfTransactionsBetween500ThousandToOneMillionNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfTransactionsGreaterThanOneMillionNaira: typing.Union[MetaOapg.properties.percentOfTransactionsGreaterThanOneMillionNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentOfTransactionsLessThan10ThousandNaira: typing.Union[MetaOapg.properties.percentOfTransactionsLessThan10ThousandNaira, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentofCreditTransactions: typing.Union[MetaOapg.properties.percentofCreditTransactions, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                percentofDebitTransactions: typing.Union[MetaOapg.properties.percentofDebitTransactions, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                totalAmountOfTransactions: typing.Union[MetaOapg.properties.totalAmountOfTransactions, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'transactionRoutineBreakdown':
                                return super().__new__(
                                    cls,
                                    *args,
                                    MaximumExpense=MaximumExpense,
                                    lastCreditReceived=lastCreditReceived,
                                    lastDebitMade=lastDebitMade,
                                    mostFrequentBalanceRange=mostFrequentBalanceRange,
                                    mostFrequentTransactionRange=mostFrequentTransactionRange,
                                    numberOfCardRequests=numberOfCardRequests,
                                    percentNumberOfDaysBalanceWasLessThan10ThousandNaira=percentNumberOfDaysBalanceWasLessThan10ThousandNaira,
                                    percentNumberOfDaysTransactionsWasLessThan10ThousandNaira=percentNumberOfDaysTransactionsWasLessThan10ThousandNaira,
                                    percentOfBalancesBetween100ThousandTo500ThousandNaira=percentOfBalancesBetween100ThousandTo500ThousandNaira,
                                    percentOfBalancesBetween10ThousandTo100ThousandNaira=percentOfBalancesBetween10ThousandTo100ThousandNaira,
                                    percentOfBalancesBetween500ThousandToOneMillionNaira=percentOfBalancesBetween500ThousandToOneMillionNaira,
                                    percentOfBalancesGreaterThanOneMillionNaira=percentOfBalancesGreaterThanOneMillionNaira,
                                    percentOfBalancesLessThan10ThousandNaira=percentOfBalancesLessThan10ThousandNaira,
                                    percentOfTransactionsBetween100ThousandTo500ThousandNaira=percentOfTransactionsBetween100ThousandTo500ThousandNaira,
                                    percentOfTransactionsBetween10ThousandTo100ThousandNaira=percentOfTransactionsBetween10ThousandTo100ThousandNaira,
                                    percentOfTransactionsBetween500ThousandToOneMillionNaira=percentOfTransactionsBetween500ThousandToOneMillionNaira,
                                    percentOfTransactionsGreaterThanOneMillionNaira=percentOfTransactionsGreaterThanOneMillionNaira,
                                    percentOfTransactionsLessThan10ThousandNaira=percentOfTransactionsLessThan10ThousandNaira,
                                    percentofCreditTransactions=percentofCreditTransactions,
                                    percentofDebitTransactions=percentofDebitTransactions,
                                    totalAmountOfTransactions=totalAmountOfTransactions,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        status = schemas.NumberSchema
                        __annotations__ = {
                            "accountBreakdown": accountBreakdown,
                            "expenseBreakdown": expenseBreakdown,
                            "fundsManagement": fundsManagement,
                            "inflowBreakdown": inflowBreakdown,
                            "transactionRoutineBreakdown": transactionRoutineBreakdown,
                            "status": status,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["accountBreakdown"]) -> MetaOapg.properties.accountBreakdown: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["expenseBreakdown"]) -> MetaOapg.properties.expenseBreakdown: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["fundsManagement"]) -> MetaOapg.properties.fundsManagement: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["inflowBreakdown"]) -> MetaOapg.properties.inflowBreakdown: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transactionRoutineBreakdown"]) -> MetaOapg.properties.transactionRoutineBreakdown: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountBreakdown", "expenseBreakdown", "fundsManagement", "inflowBreakdown", "transactionRoutineBreakdown", "status", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["accountBreakdown"]) -> typing.Union[MetaOapg.properties.accountBreakdown, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["expenseBreakdown"]) -> typing.Union[MetaOapg.properties.expenseBreakdown, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["fundsManagement"]) -> typing.Union[MetaOapg.properties.fundsManagement, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["inflowBreakdown"]) -> typing.Union[MetaOapg.properties.inflowBreakdown, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transactionRoutineBreakdown"]) -> typing.Union[MetaOapg.properties.transactionRoutineBreakdown, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountBreakdown", "expenseBreakdown", "fundsManagement", "inflowBreakdown", "transactionRoutineBreakdown", "status", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    accountBreakdown: typing.Union[MetaOapg.properties.accountBreakdown, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    expenseBreakdown: typing.Union[MetaOapg.properties.expenseBreakdown, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    fundsManagement: typing.Union[MetaOapg.properties.fundsManagement, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    inflowBreakdown: typing.Union[MetaOapg.properties.inflowBreakdown, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    transactionRoutineBreakdown: typing.Union[MetaOapg.properties.transactionRoutineBreakdown, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        accountBreakdown=accountBreakdown,
                        expenseBreakdown=expenseBreakdown,
                        fundsManagement=fundsManagement,
                        inflowBreakdown=inflowBreakdown,
                        transactionRoutineBreakdown=transactionRoutineBreakdown,
                        status=status,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetAccountAnalysisResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
