# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class TransferFundsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        wallet_id = schemas.StrSchema
                        transaction_amount = schemas.NumberSchema
                        transaction_type = schemas.StrSchema
                        recipient_account_number = schemas.StrSchema
                        sender_account_number = schemas.StrSchema
                        transaction_remarks = schemas.StrSchema
                        
                        
                        class transaction_reason(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'transaction_reason':
                                return super().__new__(
                                    cls,
                                    *args,
                                    _configuration=_configuration,
                                )
                        transaction_id = schemas.StrSchema
                        transaction_status = schemas.StrSchema
                        date_created = schemas.StrSchema
                        __annotations__ = {
                            "wallet_id": wallet_id,
                            "transaction_amount": transaction_amount,
                            "transaction_type": transaction_type,
                            "recipient_account_number": recipient_account_number,
                            "sender_account_number": sender_account_number,
                            "transaction_remarks": transaction_remarks,
                            "transaction_reason": transaction_reason,
                            "transaction_id": transaction_id,
                            "transaction_status": transaction_status,
                            "date_created": date_created,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["wallet_id"]) -> MetaOapg.properties.wallet_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_amount"]) -> MetaOapg.properties.transaction_amount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_type"]) -> MetaOapg.properties.transaction_type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["recipient_account_number"]) -> MetaOapg.properties.recipient_account_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sender_account_number"]) -> MetaOapg.properties.sender_account_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_remarks"]) -> MetaOapg.properties.transaction_remarks: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_reason"]) -> MetaOapg.properties.transaction_reason: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_id"]) -> MetaOapg.properties.transaction_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["transaction_status"]) -> MetaOapg.properties.transaction_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["date_created"]) -> MetaOapg.properties.date_created: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["wallet_id", "transaction_amount", "transaction_type", "recipient_account_number", "sender_account_number", "transaction_remarks", "transaction_reason", "transaction_id", "transaction_status", "date_created", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["wallet_id"]) -> typing.Union[MetaOapg.properties.wallet_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_amount"]) -> typing.Union[MetaOapg.properties.transaction_amount, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_type"]) -> typing.Union[MetaOapg.properties.transaction_type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["recipient_account_number"]) -> typing.Union[MetaOapg.properties.recipient_account_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sender_account_number"]) -> typing.Union[MetaOapg.properties.sender_account_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_remarks"]) -> typing.Union[MetaOapg.properties.transaction_remarks, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_reason"]) -> typing.Union[MetaOapg.properties.transaction_reason, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_id"]) -> typing.Union[MetaOapg.properties.transaction_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["transaction_status"]) -> typing.Union[MetaOapg.properties.transaction_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["date_created"]) -> typing.Union[MetaOapg.properties.date_created, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["wallet_id", "transaction_amount", "transaction_type", "recipient_account_number", "sender_account_number", "transaction_remarks", "transaction_reason", "transaction_id", "transaction_status", "date_created", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    wallet_id: typing.Union[MetaOapg.properties.wallet_id, str, schemas.Unset] = schemas.unset,
                    transaction_amount: typing.Union[MetaOapg.properties.transaction_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    transaction_type: typing.Union[MetaOapg.properties.transaction_type, str, schemas.Unset] = schemas.unset,
                    recipient_account_number: typing.Union[MetaOapg.properties.recipient_account_number, str, schemas.Unset] = schemas.unset,
                    sender_account_number: typing.Union[MetaOapg.properties.sender_account_number, str, schemas.Unset] = schemas.unset,
                    transaction_remarks: typing.Union[MetaOapg.properties.transaction_remarks, str, schemas.Unset] = schemas.unset,
                    transaction_reason: typing.Union[MetaOapg.properties.transaction_reason, None, str, schemas.Unset] = schemas.unset,
                    transaction_id: typing.Union[MetaOapg.properties.transaction_id, str, schemas.Unset] = schemas.unset,
                    transaction_status: typing.Union[MetaOapg.properties.transaction_status, str, schemas.Unset] = schemas.unset,
                    date_created: typing.Union[MetaOapg.properties.date_created, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        wallet_id=wallet_id,
                        transaction_amount=transaction_amount,
                        transaction_type=transaction_type,
                        recipient_account_number=recipient_account_number,
                        sender_account_number=sender_account_number,
                        transaction_remarks=transaction_remarks,
                        transaction_reason=transaction_reason,
                        transaction_id=transaction_id,
                        transaction_status=transaction_status,
                        date_created=date_created,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransferFundsResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
