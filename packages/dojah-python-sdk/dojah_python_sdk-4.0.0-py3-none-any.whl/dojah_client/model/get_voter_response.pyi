# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetVoterResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "entity",
        }
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "is_last_name_match",
                        "voter_number",
                        "sub_county",
                        "constituency",
                        "gender",
                        "parish",
                        "district",
                        "last_name",
                        "polling_station",
                        "village",
                        "first_name",
                        "is_first_name_match",
                    }
                    
                    class properties:
                        voter_number = schemas.StrSchema
                        first_name = schemas.StrSchema
                        last_name = schemas.StrSchema
                        gender = schemas.StrSchema
                        village = schemas.StrSchema
                        district = schemas.StrSchema
                        constituency = schemas.StrSchema
                        sub_county = schemas.StrSchema
                        parish = schemas.StrSchema
                        polling_station = schemas.StrSchema
                        is_first_name_match = schemas.BoolSchema
                        is_last_name_match = schemas.BoolSchema
                        __annotations__ = {
                            "voter_number": voter_number,
                            "first_name": first_name,
                            "last_name": last_name,
                            "gender": gender,
                            "village": village,
                            "district": district,
                            "constituency": constituency,
                            "sub_county": sub_county,
                            "parish": parish,
                            "polling_station": polling_station,
                            "is_first_name_match": is_first_name_match,
                            "is_last_name_match": is_last_name_match,
                        }
                
                is_last_name_match: MetaOapg.properties.is_last_name_match
                voter_number: MetaOapg.properties.voter_number
                sub_county: MetaOapg.properties.sub_county
                constituency: MetaOapg.properties.constituency
                gender: MetaOapg.properties.gender
                parish: MetaOapg.properties.parish
                district: MetaOapg.properties.district
                last_name: MetaOapg.properties.last_name
                polling_station: MetaOapg.properties.polling_station
                village: MetaOapg.properties.village
                first_name: MetaOapg.properties.first_name
                is_first_name_match: MetaOapg.properties.is_first_name_match
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["voter_number"]) -> MetaOapg.properties.voter_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["village"]) -> MetaOapg.properties.village: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["district"]) -> MetaOapg.properties.district: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["constituency"]) -> MetaOapg.properties.constituency: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sub_county"]) -> MetaOapg.properties.sub_county: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["parish"]) -> MetaOapg.properties.parish: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["polling_station"]) -> MetaOapg.properties.polling_station: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["is_first_name_match"]) -> MetaOapg.properties.is_first_name_match: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["is_last_name_match"]) -> MetaOapg.properties.is_last_name_match: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["voter_number", "first_name", "last_name", "gender", "village", "district", "constituency", "sub_county", "parish", "polling_station", "is_first_name_match", "is_last_name_match", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["voter_number"]) -> MetaOapg.properties.voter_number: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["village"]) -> MetaOapg.properties.village: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["district"]) -> MetaOapg.properties.district: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["constituency"]) -> MetaOapg.properties.constituency: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sub_county"]) -> MetaOapg.properties.sub_county: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["parish"]) -> MetaOapg.properties.parish: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["polling_station"]) -> MetaOapg.properties.polling_station: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["is_first_name_match"]) -> MetaOapg.properties.is_first_name_match: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["is_last_name_match"]) -> MetaOapg.properties.is_last_name_match: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["voter_number", "first_name", "last_name", "gender", "village", "district", "constituency", "sub_county", "parish", "polling_station", "is_first_name_match", "is_last_name_match", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    is_last_name_match: typing.Union[MetaOapg.properties.is_last_name_match, bool, ],
                    voter_number: typing.Union[MetaOapg.properties.voter_number, str, ],
                    sub_county: typing.Union[MetaOapg.properties.sub_county, str, ],
                    constituency: typing.Union[MetaOapg.properties.constituency, str, ],
                    gender: typing.Union[MetaOapg.properties.gender, str, ],
                    parish: typing.Union[MetaOapg.properties.parish, str, ],
                    district: typing.Union[MetaOapg.properties.district, str, ],
                    last_name: typing.Union[MetaOapg.properties.last_name, str, ],
                    polling_station: typing.Union[MetaOapg.properties.polling_station, str, ],
                    village: typing.Union[MetaOapg.properties.village, str, ],
                    first_name: typing.Union[MetaOapg.properties.first_name, str, ],
                    is_first_name_match: typing.Union[MetaOapg.properties.is_first_name_match, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        is_last_name_match=is_last_name_match,
                        voter_number=voter_number,
                        sub_county=sub_county,
                        constituency=constituency,
                        gender=gender,
                        parish=parish,
                        district=district,
                        last_name=last_name,
                        polling_station=polling_station,
                        village=village,
                        first_name=first_name,
                        is_first_name_match=is_first_name_match,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    entity: MetaOapg.properties.entity
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetVoterResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
