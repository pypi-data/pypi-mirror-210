# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetScreeningInfoResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class result(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class addresses(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'addresses':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    aka = schemas.StrSchema
                                    
                                    
                                    class aliases(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'aliases':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    countryName = schemas.StrSchema
                                    dob = schemas.StrSchema
                                    dob2 = schemas.StrSchema
                                    effectiveDate = schemas.StrSchema
                                    entryCategory = schemas.StrSchema
                                    entryDesc = schemas.StrSchema
                                    firstName = schemas.StrSchema
                                    govDesignation = schemas.StrSchema
                                    lastName = schemas.StrSchema
                                    levelDesc = schemas.StrSchema
                                    masterId = schemas.NumberSchema
                                    name = schemas.StrSchema
                                    nationalId = schemas.StrSchema
                                    otherId = schemas.StrSchema
                                    passportId = schemas.StrSchema
                                    pob = schemas.StrSchema
                                    positions = schemas.StrSchema
                                    prefix = schemas.StrSchema
                                    primaryName = schemas.StrSchema
                                    relatedId = schemas.NumberSchema
                                    
                                    
                                    class relationships(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.StrSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'relationships':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    remarks = schemas.StrSchema
                                    sourceName = schemas.StrSchema
                                    sourceWebLinks = schemas.StrSchema
                                    subCatDesc = schemas.StrSchema
                                    suffix = schemas.StrSchema
                                    touchDate = schemas.StrSchema
                                    watch = schemas.BoolSchema
                                    __annotations__ = {
                                        "addresses": addresses,
                                        "aka": aka,
                                        "aliases": aliases,
                                        "countryName": countryName,
                                        "dob": dob,
                                        "dob2": dob2,
                                        "effectiveDate": effectiveDate,
                                        "entryCategory": entryCategory,
                                        "entryDesc": entryDesc,
                                        "firstName": firstName,
                                        "govDesignation": govDesignation,
                                        "lastName": lastName,
                                        "levelDesc": levelDesc,
                                        "masterId": masterId,
                                        "name": name,
                                        "nationalId": nationalId,
                                        "otherId": otherId,
                                        "passportId": passportId,
                                        "pob": pob,
                                        "positions": positions,
                                        "prefix": prefix,
                                        "primaryName": primaryName,
                                        "relatedId": relatedId,
                                        "relationships": relationships,
                                        "remarks": remarks,
                                        "sourceName": sourceName,
                                        "sourceWebLinks": sourceWebLinks,
                                        "subCatDesc": subCatDesc,
                                        "suffix": suffix,
                                        "touchDate": touchDate,
                                        "watch": watch,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["addresses"]) -> MetaOapg.properties.addresses: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["aka"]) -> MetaOapg.properties.aka: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["aliases"]) -> MetaOapg.properties.aliases: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["countryName"]) -> MetaOapg.properties.countryName: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["dob"]) -> MetaOapg.properties.dob: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["dob2"]) -> MetaOapg.properties.dob2: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["entryCategory"]) -> MetaOapg.properties.entryCategory: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["entryDesc"]) -> MetaOapg.properties.entryDesc: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["govDesignation"]) -> MetaOapg.properties.govDesignation: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["levelDesc"]) -> MetaOapg.properties.levelDesc: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["masterId"]) -> MetaOapg.properties.masterId: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["nationalId"]) -> MetaOapg.properties.nationalId: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["otherId"]) -> MetaOapg.properties.otherId: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["passportId"]) -> MetaOapg.properties.passportId: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["pob"]) -> MetaOapg.properties.pob: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["positions"]) -> MetaOapg.properties.positions: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["primaryName"]) -> MetaOapg.properties.primaryName: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["relatedId"]) -> MetaOapg.properties.relatedId: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["relationships"]) -> MetaOapg.properties.relationships: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["remarks"]) -> MetaOapg.properties.remarks: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["sourceName"]) -> MetaOapg.properties.sourceName: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["sourceWebLinks"]) -> MetaOapg.properties.sourceWebLinks: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["subCatDesc"]) -> MetaOapg.properties.subCatDesc: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["touchDate"]) -> MetaOapg.properties.touchDate: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["watch"]) -> MetaOapg.properties.watch: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["addresses", "aka", "aliases", "countryName", "dob", "dob2", "effectiveDate", "entryCategory", "entryDesc", "firstName", "govDesignation", "lastName", "levelDesc", "masterId", "name", "nationalId", "otherId", "passportId", "pob", "positions", "prefix", "primaryName", "relatedId", "relationships", "remarks", "sourceName", "sourceWebLinks", "subCatDesc", "suffix", "touchDate", "watch", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["addresses"]) -> typing.Union[MetaOapg.properties.addresses, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["aka"]) -> typing.Union[MetaOapg.properties.aka, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["aliases"]) -> typing.Union[MetaOapg.properties.aliases, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["countryName"]) -> typing.Union[MetaOapg.properties.countryName, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["dob"]) -> typing.Union[MetaOapg.properties.dob, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["dob2"]) -> typing.Union[MetaOapg.properties.dob2, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["entryCategory"]) -> typing.Union[MetaOapg.properties.entryCategory, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["entryDesc"]) -> typing.Union[MetaOapg.properties.entryDesc, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["govDesignation"]) -> typing.Union[MetaOapg.properties.govDesignation, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["levelDesc"]) -> typing.Union[MetaOapg.properties.levelDesc, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["masterId"]) -> typing.Union[MetaOapg.properties.masterId, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["nationalId"]) -> typing.Union[MetaOapg.properties.nationalId, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["otherId"]) -> typing.Union[MetaOapg.properties.otherId, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["passportId"]) -> typing.Union[MetaOapg.properties.passportId, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["pob"]) -> typing.Union[MetaOapg.properties.pob, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["positions"]) -> typing.Union[MetaOapg.properties.positions, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["primaryName"]) -> typing.Union[MetaOapg.properties.primaryName, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["relatedId"]) -> typing.Union[MetaOapg.properties.relatedId, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["relationships"]) -> typing.Union[MetaOapg.properties.relationships, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["remarks"]) -> typing.Union[MetaOapg.properties.remarks, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["sourceName"]) -> typing.Union[MetaOapg.properties.sourceName, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["sourceWebLinks"]) -> typing.Union[MetaOapg.properties.sourceWebLinks, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["subCatDesc"]) -> typing.Union[MetaOapg.properties.subCatDesc, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["touchDate"]) -> typing.Union[MetaOapg.properties.touchDate, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["watch"]) -> typing.Union[MetaOapg.properties.watch, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addresses", "aka", "aliases", "countryName", "dob", "dob2", "effectiveDate", "entryCategory", "entryDesc", "firstName", "govDesignation", "lastName", "levelDesc", "masterId", "name", "nationalId", "otherId", "passportId", "pob", "positions", "prefix", "primaryName", "relatedId", "relationships", "remarks", "sourceName", "sourceWebLinks", "subCatDesc", "suffix", "touchDate", "watch", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                addresses: typing.Union[MetaOapg.properties.addresses, list, tuple, schemas.Unset] = schemas.unset,
                                aka: typing.Union[MetaOapg.properties.aka, str, schemas.Unset] = schemas.unset,
                                aliases: typing.Union[MetaOapg.properties.aliases, list, tuple, schemas.Unset] = schemas.unset,
                                countryName: typing.Union[MetaOapg.properties.countryName, str, schemas.Unset] = schemas.unset,
                                dob: typing.Union[MetaOapg.properties.dob, str, schemas.Unset] = schemas.unset,
                                dob2: typing.Union[MetaOapg.properties.dob2, str, schemas.Unset] = schemas.unset,
                                effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, schemas.Unset] = schemas.unset,
                                entryCategory: typing.Union[MetaOapg.properties.entryCategory, str, schemas.Unset] = schemas.unset,
                                entryDesc: typing.Union[MetaOapg.properties.entryDesc, str, schemas.Unset] = schemas.unset,
                                firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
                                govDesignation: typing.Union[MetaOapg.properties.govDesignation, str, schemas.Unset] = schemas.unset,
                                lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
                                levelDesc: typing.Union[MetaOapg.properties.levelDesc, str, schemas.Unset] = schemas.unset,
                                masterId: typing.Union[MetaOapg.properties.masterId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                nationalId: typing.Union[MetaOapg.properties.nationalId, str, schemas.Unset] = schemas.unset,
                                otherId: typing.Union[MetaOapg.properties.otherId, str, schemas.Unset] = schemas.unset,
                                passportId: typing.Union[MetaOapg.properties.passportId, str, schemas.Unset] = schemas.unset,
                                pob: typing.Union[MetaOapg.properties.pob, str, schemas.Unset] = schemas.unset,
                                positions: typing.Union[MetaOapg.properties.positions, str, schemas.Unset] = schemas.unset,
                                prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
                                primaryName: typing.Union[MetaOapg.properties.primaryName, str, schemas.Unset] = schemas.unset,
                                relatedId: typing.Union[MetaOapg.properties.relatedId, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                relationships: typing.Union[MetaOapg.properties.relationships, list, tuple, schemas.Unset] = schemas.unset,
                                remarks: typing.Union[MetaOapg.properties.remarks, str, schemas.Unset] = schemas.unset,
                                sourceName: typing.Union[MetaOapg.properties.sourceName, str, schemas.Unset] = schemas.unset,
                                sourceWebLinks: typing.Union[MetaOapg.properties.sourceWebLinks, str, schemas.Unset] = schemas.unset,
                                subCatDesc: typing.Union[MetaOapg.properties.subCatDesc, str, schemas.Unset] = schemas.unset,
                                suffix: typing.Union[MetaOapg.properties.suffix, str, schemas.Unset] = schemas.unset,
                                touchDate: typing.Union[MetaOapg.properties.touchDate, str, schemas.Unset] = schemas.unset,
                                watch: typing.Union[MetaOapg.properties.watch, bool, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'result':
                                return super().__new__(
                                    cls,
                                    *args,
                                    addresses=addresses,
                                    aka=aka,
                                    aliases=aliases,
                                    countryName=countryName,
                                    dob=dob,
                                    dob2=dob2,
                                    effectiveDate=effectiveDate,
                                    entryCategory=entryCategory,
                                    entryDesc=entryDesc,
                                    firstName=firstName,
                                    govDesignation=govDesignation,
                                    lastName=lastName,
                                    levelDesc=levelDesc,
                                    masterId=masterId,
                                    name=name,
                                    nationalId=nationalId,
                                    otherId=otherId,
                                    passportId=passportId,
                                    pob=pob,
                                    positions=positions,
                                    prefix=prefix,
                                    primaryName=primaryName,
                                    relatedId=relatedId,
                                    relationships=relationships,
                                    remarks=remarks,
                                    sourceName=sourceName,
                                    sourceWebLinks=sourceWebLinks,
                                    subCatDesc=subCatDesc,
                                    suffix=suffix,
                                    touchDate=touchDate,
                                    watch=watch,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        uuid = schemas.StrSchema
                        __annotations__ = {
                            "result": result,
                            "uuid": uuid,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["result", "uuid", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union[MetaOapg.properties.result, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["result", "uuid", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    result: typing.Union[MetaOapg.properties.result, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        result=result,
                        uuid=uuid,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetScreeningInfoResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
