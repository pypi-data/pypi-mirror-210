# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class AnalyzeDocumentResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class status(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    overall_status = schemas.NumberSchema
                                    document_images = schemas.StrSchema
                                    text = schemas.StrSchema
                                    document_type = schemas.StrSchema
                                    expiry = schemas.StrSchema
                                    __annotations__ = {
                                        "overall_status": overall_status,
                                        "document_images": document_images,
                                        "text": text,
                                        "document_type": document_type,
                                        "expiry": expiry,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["overall_status"]) -> MetaOapg.properties.overall_status: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["document_images"]) -> MetaOapg.properties.document_images: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["document_type"]) -> MetaOapg.properties.document_type: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["expiry"]) -> MetaOapg.properties.expiry: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["overall_status", "document_images", "text", "document_type", "expiry", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["overall_status"]) -> typing.Union[MetaOapg.properties.overall_status, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["document_images"]) -> typing.Union[MetaOapg.properties.document_images, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["document_type"]) -> typing.Union[MetaOapg.properties.document_type, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["expiry"]) -> typing.Union[MetaOapg.properties.expiry, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["overall_status", "document_images", "text", "document_type", "expiry", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                overall_status: typing.Union[MetaOapg.properties.overall_status, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                document_images: typing.Union[MetaOapg.properties.document_images, str, schemas.Unset] = schemas.unset,
                                text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                document_type: typing.Union[MetaOapg.properties.document_type, str, schemas.Unset] = schemas.unset,
                                expiry: typing.Union[MetaOapg.properties.expiry, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'status':
                                return super().__new__(
                                    cls,
                                    *args,
                                    overall_status=overall_status,
                                    document_images=document_images,
                                    text=text,
                                    document_type=document_type,
                                    expiry=expiry,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class document_type(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    document_name = schemas.StrSchema
                                    document_country_name = schemas.StrSchema
                                    document_country_code = schemas.StrSchema
                                    document_type_id = schemas.NumberSchema
                                    document_year = schemas.StrSchema
                                    __annotations__ = {
                                        "document_name": document_name,
                                        "document_country_name": document_country_name,
                                        "document_country_code": document_country_code,
                                        "document_type_id": document_type_id,
                                        "document_year": document_year,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["document_name"]) -> MetaOapg.properties.document_name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["document_country_name"]) -> MetaOapg.properties.document_country_name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["document_country_code"]) -> MetaOapg.properties.document_country_code: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["document_type_id"]) -> MetaOapg.properties.document_type_id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["document_year"]) -> MetaOapg.properties.document_year: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["document_name", "document_country_name", "document_country_code", "document_type_id", "document_year", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["document_name"]) -> typing.Union[MetaOapg.properties.document_name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["document_country_name"]) -> typing.Union[MetaOapg.properties.document_country_name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["document_country_code"]) -> typing.Union[MetaOapg.properties.document_country_code, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["document_type_id"]) -> typing.Union[MetaOapg.properties.document_type_id, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["document_year"]) -> typing.Union[MetaOapg.properties.document_year, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["document_name", "document_country_name", "document_country_code", "document_type_id", "document_year", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                document_name: typing.Union[MetaOapg.properties.document_name, str, schemas.Unset] = schemas.unset,
                                document_country_name: typing.Union[MetaOapg.properties.document_country_name, str, schemas.Unset] = schemas.unset,
                                document_country_code: typing.Union[MetaOapg.properties.document_country_code, str, schemas.Unset] = schemas.unset,
                                document_type_id: typing.Union[MetaOapg.properties.document_type_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                document_year: typing.Union[MetaOapg.properties.document_year, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'document_type':
                                return super().__new__(
                                    cls,
                                    *args,
                                    document_name=document_name,
                                    document_country_name=document_country_name,
                                    document_country_code=document_country_code,
                                    document_type_id=document_type_id,
                                    document_year=document_year,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class document_images(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    Portrait = schemas.StrSchema
                                    Fingerprint = schemas.StrSchema
                                    document_front_side = schemas.StrSchema
                                    __annotations__ = {
                                        "Portrait": Portrait,
                                        "Fingerprint": Fingerprint,
                                        "Document front side": document_front_side,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Portrait"]) -> MetaOapg.properties.Portrait: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Fingerprint"]) -> MetaOapg.properties.Fingerprint: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Document front side"]) -> MetaOapg.properties.document_front_side: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Portrait", "Fingerprint", "Document front side", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Portrait"]) -> typing.Union[MetaOapg.properties.Portrait, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Fingerprint"]) -> typing.Union[MetaOapg.properties.Fingerprint, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Document front side"]) -> typing.Union[MetaOapg.properties.document_front_side, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Portrait", "Fingerprint", "Document front side", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                Portrait: typing.Union[MetaOapg.properties.Portrait, str, schemas.Unset] = schemas.unset,
                                Fingerprint: typing.Union[MetaOapg.properties.Fingerprint, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'document_images':
                                return super().__new__(
                                    cls,
                                    *args,
                                    Portrait=Portrait,
                                    Fingerprint=Fingerprint,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class text_data(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            field_name = schemas.StrSchema
                                            field_type = schemas.NumberSchema
                                            status = schemas.NumberSchema
                                            value = schemas.StrSchema
                                            __annotations__ = {
                                                "field_name": field_name,
                                                "field_type": field_type,
                                                "status": status,
                                                "value": value,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["field_name"]) -> MetaOapg.properties.field_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["field_type"]) -> MetaOapg.properties.field_type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["field_name", "field_type", "status", "value", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["field_name"]) -> typing.Union[MetaOapg.properties.field_name, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["field_type"]) -> typing.Union[MetaOapg.properties.field_type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["field_name", "field_type", "status", "value", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        field_name: typing.Union[MetaOapg.properties.field_name, str, schemas.Unset] = schemas.unset,
                                        field_type: typing.Union[MetaOapg.properties.field_type, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            field_name=field_name,
                                            field_type=field_type,
                                            status=status,
                                            value=value,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'text_data':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "status": status,
                            "document_type": document_type,
                            "document_images": document_images,
                            "text_data": text_data,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["document_type"]) -> MetaOapg.properties.document_type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["document_images"]) -> MetaOapg.properties.document_images: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["text_data"]) -> MetaOapg.properties.text_data: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "document_type", "document_images", "text_data", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["document_type"]) -> typing.Union[MetaOapg.properties.document_type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["document_images"]) -> typing.Union[MetaOapg.properties.document_images, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["text_data"]) -> typing.Union[MetaOapg.properties.text_data, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "document_type", "document_images", "text_data", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    document_type: typing.Union[MetaOapg.properties.document_type, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    document_images: typing.Union[MetaOapg.properties.document_images, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    text_data: typing.Union[MetaOapg.properties.text_data, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        status=status,
                        document_type=document_type,
                        document_images=document_images,
                        text_data=text_data,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnalyzeDocumentResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
