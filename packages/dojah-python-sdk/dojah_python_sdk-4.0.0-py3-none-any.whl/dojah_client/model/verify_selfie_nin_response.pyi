# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class VerifySelfieNinResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        title = schemas.StrSchema
                        nin = schemas.StrSchema
                        firstname = schemas.StrSchema
                        middlename = schemas.StrSchema
                        surname = schemas.StrSchema
                        maidenname = schemas.StrSchema
                        telephoneno = schemas.StrSchema
                        state = schemas.StrSchema
                        place = schemas.StrSchema
                        profession = schemas.StrSchema
                        height = schemas.StrSchema
                        email = schemas.StrSchema
                        birthdate = schemas.StrSchema
                        birthstate = schemas.StrSchema
                        birthcountry = schemas.StrSchema
                        centralID = schemas.StrSchema
                        documentno = schemas.StrSchema
                        educationallevel = schemas.StrSchema
                        employmentstatus = schemas.StrSchema
                        nok_firstname = schemas.StrSchema
                        nok_lastname = schemas.StrSchema
                        nok_middlename = schemas.StrSchema
                        nok_address1 = schemas.StrSchema
                        nok_address2 = schemas.StrSchema
                        nok_lga = schemas.StrSchema
                        nok_state = schemas.StrSchema
                        nok_town = schemas.StrSchema
                        nok_postalcode = schemas.StrSchema
                        othername = schemas.StrSchema
                        pfirstname = schemas.StrSchema
                        photo = schemas.StrSchema
                        pmiddlename = schemas.StrSchema
                        psurname = schemas.StrSchema
                        nspokenlang = schemas.StrSchema
                        ospokenlang = schemas.StrSchema
                        religion = schemas.StrSchema
                        residence_Town = schemas.StrSchema
                        residence_lga = schemas.StrSchema
                        residence_state = schemas.StrSchema
                        residencestatus = schemas.StrSchema
                        residence_AddressLine1 = schemas.StrSchema
                        residence_AddressLine2 = schemas.StrSchema
                        self_origin_lga = schemas.StrSchema
                        self_origin_place = schemas.StrSchema
                        self_origin_state = schemas.StrSchema
                        signature = schemas.StrSchema
                        nationality = schemas.StrSchema
                        gender = schemas.StrSchema
                        trackingId = schemas.StrSchema
                        
                        
                        class selfie_verification(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    confidence_value = schemas.NumberSchema
                                    match = schemas.BoolSchema
                                    __annotations__ = {
                                        "confidence_value": confidence_value,
                                        "match": match,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["confidence_value"]) -> MetaOapg.properties.confidence_value: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["match"]) -> MetaOapg.properties.match: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["confidence_value", "match", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["confidence_value"]) -> typing.Union[MetaOapg.properties.confidence_value, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["match"]) -> typing.Union[MetaOapg.properties.match, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["confidence_value", "match", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                confidence_value: typing.Union[MetaOapg.properties.confidence_value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                match: typing.Union[MetaOapg.properties.match, bool, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'selfie_verification':
                                return super().__new__(
                                    cls,
                                    *args,
                                    confidence_value=confidence_value,
                                    match=match,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "title": title,
                            "nin": nin,
                            "firstname": firstname,
                            "middlename": middlename,
                            "surname": surname,
                            "maidenname": maidenname,
                            "telephoneno": telephoneno,
                            "state": state,
                            "place": place,
                            "profession": profession,
                            "height": height,
                            "email": email,
                            "birthdate": birthdate,
                            "birthstate": birthstate,
                            "birthcountry": birthcountry,
                            "centralID": centralID,
                            "documentno": documentno,
                            "educationallevel": educationallevel,
                            "employmentstatus": employmentstatus,
                            "nok_firstname": nok_firstname,
                            "nok_lastname": nok_lastname,
                            "nok_middlename": nok_middlename,
                            "nok_address1": nok_address1,
                            "nok_address2": nok_address2,
                            "nok_lga": nok_lga,
                            "nok_state": nok_state,
                            "nok_town": nok_town,
                            "nok_postalcode": nok_postalcode,
                            "othername": othername,
                            "pfirstname": pfirstname,
                            "photo": photo,
                            "pmiddlename": pmiddlename,
                            "psurname": psurname,
                            "nspokenlang": nspokenlang,
                            "ospokenlang": ospokenlang,
                            "religion": religion,
                            "residence_Town": residence_Town,
                            "residence_lga": residence_lga,
                            "residence_state": residence_state,
                            "residencestatus": residencestatus,
                            "residence_AddressLine1": residence_AddressLine1,
                            "residence_AddressLine2": residence_AddressLine2,
                            "self_origin_lga": self_origin_lga,
                            "self_origin_place": self_origin_place,
                            "self_origin_state": self_origin_state,
                            "signature": signature,
                            "nationality": nationality,
                            "gender": gender,
                            "trackingId": trackingId,
                            "selfie_verification": selfie_verification,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nin"]) -> MetaOapg.properties.nin: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["firstname"]) -> MetaOapg.properties.firstname: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["middlename"]) -> MetaOapg.properties.middlename: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["surname"]) -> MetaOapg.properties.surname: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["maidenname"]) -> MetaOapg.properties.maidenname: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["telephoneno"]) -> MetaOapg.properties.telephoneno: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["place"]) -> MetaOapg.properties.place: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["profession"]) -> MetaOapg.properties.profession: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["birthdate"]) -> MetaOapg.properties.birthdate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["birthstate"]) -> MetaOapg.properties.birthstate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["birthcountry"]) -> MetaOapg.properties.birthcountry: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["centralID"]) -> MetaOapg.properties.centralID: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["documentno"]) -> MetaOapg.properties.documentno: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["educationallevel"]) -> MetaOapg.properties.educationallevel: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["employmentstatus"]) -> MetaOapg.properties.employmentstatus: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_firstname"]) -> MetaOapg.properties.nok_firstname: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_lastname"]) -> MetaOapg.properties.nok_lastname: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_middlename"]) -> MetaOapg.properties.nok_middlename: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_address1"]) -> MetaOapg.properties.nok_address1: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_address2"]) -> MetaOapg.properties.nok_address2: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_lga"]) -> MetaOapg.properties.nok_lga: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_state"]) -> MetaOapg.properties.nok_state: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_town"]) -> MetaOapg.properties.nok_town: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nok_postalcode"]) -> MetaOapg.properties.nok_postalcode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["othername"]) -> MetaOapg.properties.othername: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["pfirstname"]) -> MetaOapg.properties.pfirstname: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["photo"]) -> MetaOapg.properties.photo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["pmiddlename"]) -> MetaOapg.properties.pmiddlename: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["psurname"]) -> MetaOapg.properties.psurname: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nspokenlang"]) -> MetaOapg.properties.nspokenlang: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ospokenlang"]) -> MetaOapg.properties.ospokenlang: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["religion"]) -> MetaOapg.properties.religion: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["residence_Town"]) -> MetaOapg.properties.residence_Town: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["residence_lga"]) -> MetaOapg.properties.residence_lga: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["residence_state"]) -> MetaOapg.properties.residence_state: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["residencestatus"]) -> MetaOapg.properties.residencestatus: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["residence_AddressLine1"]) -> MetaOapg.properties.residence_AddressLine1: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["residence_AddressLine2"]) -> MetaOapg.properties.residence_AddressLine2: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["self_origin_lga"]) -> MetaOapg.properties.self_origin_lga: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["self_origin_place"]) -> MetaOapg.properties.self_origin_place: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["self_origin_state"]) -> MetaOapg.properties.self_origin_state: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["signature"]) -> MetaOapg.properties.signature: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nationality"]) -> MetaOapg.properties.nationality: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["trackingId"]) -> MetaOapg.properties.trackingId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["selfie_verification"]) -> MetaOapg.properties.selfie_verification: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "nin", "firstname", "middlename", "surname", "maidenname", "telephoneno", "state", "place", "profession", "height", "email", "birthdate", "birthstate", "birthcountry", "centralID", "documentno", "educationallevel", "employmentstatus", "nok_firstname", "nok_lastname", "nok_middlename", "nok_address1", "nok_address2", "nok_lga", "nok_state", "nok_town", "nok_postalcode", "othername", "pfirstname", "photo", "pmiddlename", "psurname", "nspokenlang", "ospokenlang", "religion", "residence_Town", "residence_lga", "residence_state", "residencestatus", "residence_AddressLine1", "residence_AddressLine2", "self_origin_lga", "self_origin_place", "self_origin_state", "signature", "nationality", "gender", "trackingId", "selfie_verification", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nin"]) -> typing.Union[MetaOapg.properties.nin, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["firstname"]) -> typing.Union[MetaOapg.properties.firstname, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["middlename"]) -> typing.Union[MetaOapg.properties.middlename, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["surname"]) -> typing.Union[MetaOapg.properties.surname, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["maidenname"]) -> typing.Union[MetaOapg.properties.maidenname, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["telephoneno"]) -> typing.Union[MetaOapg.properties.telephoneno, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["place"]) -> typing.Union[MetaOapg.properties.place, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["profession"]) -> typing.Union[MetaOapg.properties.profession, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["birthdate"]) -> typing.Union[MetaOapg.properties.birthdate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["birthstate"]) -> typing.Union[MetaOapg.properties.birthstate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["birthcountry"]) -> typing.Union[MetaOapg.properties.birthcountry, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["centralID"]) -> typing.Union[MetaOapg.properties.centralID, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["documentno"]) -> typing.Union[MetaOapg.properties.documentno, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["educationallevel"]) -> typing.Union[MetaOapg.properties.educationallevel, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["employmentstatus"]) -> typing.Union[MetaOapg.properties.employmentstatus, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_firstname"]) -> typing.Union[MetaOapg.properties.nok_firstname, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_lastname"]) -> typing.Union[MetaOapg.properties.nok_lastname, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_middlename"]) -> typing.Union[MetaOapg.properties.nok_middlename, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_address1"]) -> typing.Union[MetaOapg.properties.nok_address1, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_address2"]) -> typing.Union[MetaOapg.properties.nok_address2, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_lga"]) -> typing.Union[MetaOapg.properties.nok_lga, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_state"]) -> typing.Union[MetaOapg.properties.nok_state, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_town"]) -> typing.Union[MetaOapg.properties.nok_town, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nok_postalcode"]) -> typing.Union[MetaOapg.properties.nok_postalcode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["othername"]) -> typing.Union[MetaOapg.properties.othername, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["pfirstname"]) -> typing.Union[MetaOapg.properties.pfirstname, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["photo"]) -> typing.Union[MetaOapg.properties.photo, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["pmiddlename"]) -> typing.Union[MetaOapg.properties.pmiddlename, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["psurname"]) -> typing.Union[MetaOapg.properties.psurname, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nspokenlang"]) -> typing.Union[MetaOapg.properties.nspokenlang, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ospokenlang"]) -> typing.Union[MetaOapg.properties.ospokenlang, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["religion"]) -> typing.Union[MetaOapg.properties.religion, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["residence_Town"]) -> typing.Union[MetaOapg.properties.residence_Town, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["residence_lga"]) -> typing.Union[MetaOapg.properties.residence_lga, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["residence_state"]) -> typing.Union[MetaOapg.properties.residence_state, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["residencestatus"]) -> typing.Union[MetaOapg.properties.residencestatus, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["residence_AddressLine1"]) -> typing.Union[MetaOapg.properties.residence_AddressLine1, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["residence_AddressLine2"]) -> typing.Union[MetaOapg.properties.residence_AddressLine2, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["self_origin_lga"]) -> typing.Union[MetaOapg.properties.self_origin_lga, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["self_origin_place"]) -> typing.Union[MetaOapg.properties.self_origin_place, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["self_origin_state"]) -> typing.Union[MetaOapg.properties.self_origin_state, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["signature"]) -> typing.Union[MetaOapg.properties.signature, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nationality"]) -> typing.Union[MetaOapg.properties.nationality, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["trackingId"]) -> typing.Union[MetaOapg.properties.trackingId, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["selfie_verification"]) -> typing.Union[MetaOapg.properties.selfie_verification, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "nin", "firstname", "middlename", "surname", "maidenname", "telephoneno", "state", "place", "profession", "height", "email", "birthdate", "birthstate", "birthcountry", "centralID", "documentno", "educationallevel", "employmentstatus", "nok_firstname", "nok_lastname", "nok_middlename", "nok_address1", "nok_address2", "nok_lga", "nok_state", "nok_town", "nok_postalcode", "othername", "pfirstname", "photo", "pmiddlename", "psurname", "nspokenlang", "ospokenlang", "religion", "residence_Town", "residence_lga", "residence_state", "residencestatus", "residence_AddressLine1", "residence_AddressLine2", "self_origin_lga", "self_origin_place", "self_origin_state", "signature", "nationality", "gender", "trackingId", "selfie_verification", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                    nin: typing.Union[MetaOapg.properties.nin, str, schemas.Unset] = schemas.unset,
                    firstname: typing.Union[MetaOapg.properties.firstname, str, schemas.Unset] = schemas.unset,
                    middlename: typing.Union[MetaOapg.properties.middlename, str, schemas.Unset] = schemas.unset,
                    surname: typing.Union[MetaOapg.properties.surname, str, schemas.Unset] = schemas.unset,
                    maidenname: typing.Union[MetaOapg.properties.maidenname, str, schemas.Unset] = schemas.unset,
                    telephoneno: typing.Union[MetaOapg.properties.telephoneno, str, schemas.Unset] = schemas.unset,
                    state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
                    place: typing.Union[MetaOapg.properties.place, str, schemas.Unset] = schemas.unset,
                    profession: typing.Union[MetaOapg.properties.profession, str, schemas.Unset] = schemas.unset,
                    height: typing.Union[MetaOapg.properties.height, str, schemas.Unset] = schemas.unset,
                    email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                    birthdate: typing.Union[MetaOapg.properties.birthdate, str, schemas.Unset] = schemas.unset,
                    birthstate: typing.Union[MetaOapg.properties.birthstate, str, schemas.Unset] = schemas.unset,
                    birthcountry: typing.Union[MetaOapg.properties.birthcountry, str, schemas.Unset] = schemas.unset,
                    centralID: typing.Union[MetaOapg.properties.centralID, str, schemas.Unset] = schemas.unset,
                    documentno: typing.Union[MetaOapg.properties.documentno, str, schemas.Unset] = schemas.unset,
                    educationallevel: typing.Union[MetaOapg.properties.educationallevel, str, schemas.Unset] = schemas.unset,
                    employmentstatus: typing.Union[MetaOapg.properties.employmentstatus, str, schemas.Unset] = schemas.unset,
                    nok_firstname: typing.Union[MetaOapg.properties.nok_firstname, str, schemas.Unset] = schemas.unset,
                    nok_lastname: typing.Union[MetaOapg.properties.nok_lastname, str, schemas.Unset] = schemas.unset,
                    nok_middlename: typing.Union[MetaOapg.properties.nok_middlename, str, schemas.Unset] = schemas.unset,
                    nok_address1: typing.Union[MetaOapg.properties.nok_address1, str, schemas.Unset] = schemas.unset,
                    nok_address2: typing.Union[MetaOapg.properties.nok_address2, str, schemas.Unset] = schemas.unset,
                    nok_lga: typing.Union[MetaOapg.properties.nok_lga, str, schemas.Unset] = schemas.unset,
                    nok_state: typing.Union[MetaOapg.properties.nok_state, str, schemas.Unset] = schemas.unset,
                    nok_town: typing.Union[MetaOapg.properties.nok_town, str, schemas.Unset] = schemas.unset,
                    nok_postalcode: typing.Union[MetaOapg.properties.nok_postalcode, str, schemas.Unset] = schemas.unset,
                    othername: typing.Union[MetaOapg.properties.othername, str, schemas.Unset] = schemas.unset,
                    pfirstname: typing.Union[MetaOapg.properties.pfirstname, str, schemas.Unset] = schemas.unset,
                    photo: typing.Union[MetaOapg.properties.photo, str, schemas.Unset] = schemas.unset,
                    pmiddlename: typing.Union[MetaOapg.properties.pmiddlename, str, schemas.Unset] = schemas.unset,
                    psurname: typing.Union[MetaOapg.properties.psurname, str, schemas.Unset] = schemas.unset,
                    nspokenlang: typing.Union[MetaOapg.properties.nspokenlang, str, schemas.Unset] = schemas.unset,
                    ospokenlang: typing.Union[MetaOapg.properties.ospokenlang, str, schemas.Unset] = schemas.unset,
                    religion: typing.Union[MetaOapg.properties.religion, str, schemas.Unset] = schemas.unset,
                    residence_Town: typing.Union[MetaOapg.properties.residence_Town, str, schemas.Unset] = schemas.unset,
                    residence_lga: typing.Union[MetaOapg.properties.residence_lga, str, schemas.Unset] = schemas.unset,
                    residence_state: typing.Union[MetaOapg.properties.residence_state, str, schemas.Unset] = schemas.unset,
                    residencestatus: typing.Union[MetaOapg.properties.residencestatus, str, schemas.Unset] = schemas.unset,
                    residence_AddressLine1: typing.Union[MetaOapg.properties.residence_AddressLine1, str, schemas.Unset] = schemas.unset,
                    residence_AddressLine2: typing.Union[MetaOapg.properties.residence_AddressLine2, str, schemas.Unset] = schemas.unset,
                    self_origin_lga: typing.Union[MetaOapg.properties.self_origin_lga, str, schemas.Unset] = schemas.unset,
                    self_origin_place: typing.Union[MetaOapg.properties.self_origin_place, str, schemas.Unset] = schemas.unset,
                    self_origin_state: typing.Union[MetaOapg.properties.self_origin_state, str, schemas.Unset] = schemas.unset,
                    signature: typing.Union[MetaOapg.properties.signature, str, schemas.Unset] = schemas.unset,
                    nationality: typing.Union[MetaOapg.properties.nationality, str, schemas.Unset] = schemas.unset,
                    gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
                    trackingId: typing.Union[MetaOapg.properties.trackingId, str, schemas.Unset] = schemas.unset,
                    selfie_verification: typing.Union[MetaOapg.properties.selfie_verification, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        title=title,
                        nin=nin,
                        firstname=firstname,
                        middlename=middlename,
                        surname=surname,
                        maidenname=maidenname,
                        telephoneno=telephoneno,
                        state=state,
                        place=place,
                        profession=profession,
                        height=height,
                        email=email,
                        birthdate=birthdate,
                        birthstate=birthstate,
                        birthcountry=birthcountry,
                        centralID=centralID,
                        documentno=documentno,
                        educationallevel=educationallevel,
                        employmentstatus=employmentstatus,
                        nok_firstname=nok_firstname,
                        nok_lastname=nok_lastname,
                        nok_middlename=nok_middlename,
                        nok_address1=nok_address1,
                        nok_address2=nok_address2,
                        nok_lga=nok_lga,
                        nok_state=nok_state,
                        nok_town=nok_town,
                        nok_postalcode=nok_postalcode,
                        othername=othername,
                        pfirstname=pfirstname,
                        photo=photo,
                        pmiddlename=pmiddlename,
                        psurname=psurname,
                        nspokenlang=nspokenlang,
                        ospokenlang=ospokenlang,
                        religion=religion,
                        residence_Town=residence_Town,
                        residence_lga=residence_lga,
                        residence_state=residence_state,
                        residencestatus=residencestatus,
                        residence_AddressLine1=residence_AddressLine1,
                        residence_AddressLine2=residence_AddressLine2,
                        self_origin_lga=self_origin_lga,
                        self_origin_place=self_origin_place,
                        self_origin_state=self_origin_state,
                        signature=signature,
                        nationality=nationality,
                        gender=gender,
                        trackingId=trackingId,
                        selfie_verification=selfie_verification,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VerifySelfieNinResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
