# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetEarningStructureResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        average_monthly_income = schemas.NumberSchema
                        salary_earner = schemas.BoolSchema
                        consistent = schemas.BoolSchema
                        number_of_days = schemas.NumberSchema
                        __annotations__ = {
                            "average_monthly_income": average_monthly_income,
                            "salary_earner": salary_earner,
                            "consistent": consistent,
                            "number_of_days": number_of_days,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["average_monthly_income"]) -> MetaOapg.properties.average_monthly_income: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["salary_earner"]) -> MetaOapg.properties.salary_earner: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["consistent"]) -> MetaOapg.properties.consistent: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["number_of_days"]) -> MetaOapg.properties.number_of_days: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["average_monthly_income", "salary_earner", "consistent", "number_of_days", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["average_monthly_income"]) -> typing.Union[MetaOapg.properties.average_monthly_income, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["salary_earner"]) -> typing.Union[MetaOapg.properties.salary_earner, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["consistent"]) -> typing.Union[MetaOapg.properties.consistent, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["number_of_days"]) -> typing.Union[MetaOapg.properties.number_of_days, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average_monthly_income", "salary_earner", "consistent", "number_of_days", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    average_monthly_income: typing.Union[MetaOapg.properties.average_monthly_income, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    salary_earner: typing.Union[MetaOapg.properties.salary_earner, bool, schemas.Unset] = schemas.unset,
                    consistent: typing.Union[MetaOapg.properties.consistent, bool, schemas.Unset] = schemas.unset,
                    number_of_days: typing.Union[MetaOapg.properties.number_of_days, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        average_monthly_income=average_monthly_income,
                        salary_earner=salary_earner,
                        consistent=consistent,
                        number_of_days=number_of_days,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetEarningStructureResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
