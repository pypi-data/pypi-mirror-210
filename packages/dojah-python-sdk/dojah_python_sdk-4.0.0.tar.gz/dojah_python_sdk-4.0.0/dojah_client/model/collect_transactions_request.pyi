# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class CollectTransactionsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class transactions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                transaction_date = schemas.StrSchema
                                transaction_amount = schemas.StrSchema
                                transaction_description = schemas.StrSchema
                                transaction_type = schemas.StrSchema
                                reference_number = schemas.StrSchema
                                __annotations__ = {
                                    "transaction_date": transaction_date,
                                    "transaction_amount": transaction_amount,
                                    "transaction_description": transaction_description,
                                    "transaction_type": transaction_type,
                                    "reference_number": reference_number,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["transaction_date"]) -> MetaOapg.properties.transaction_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["transaction_amount"]) -> MetaOapg.properties.transaction_amount: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["transaction_description"]) -> MetaOapg.properties.transaction_description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["transaction_type"]) -> MetaOapg.properties.transaction_type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reference_number"]) -> MetaOapg.properties.reference_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["transaction_date", "transaction_amount", "transaction_description", "transaction_type", "reference_number", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["transaction_date"]) -> typing.Union[MetaOapg.properties.transaction_date, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["transaction_amount"]) -> typing.Union[MetaOapg.properties.transaction_amount, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["transaction_description"]) -> typing.Union[MetaOapg.properties.transaction_description, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["transaction_type"]) -> typing.Union[MetaOapg.properties.transaction_type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reference_number"]) -> typing.Union[MetaOapg.properties.reference_number, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transaction_date", "transaction_amount", "transaction_description", "transaction_type", "reference_number", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            transaction_date: typing.Union[MetaOapg.properties.transaction_date, str, schemas.Unset] = schemas.unset,
                            transaction_amount: typing.Union[MetaOapg.properties.transaction_amount, str, schemas.Unset] = schemas.unset,
                            transaction_description: typing.Union[MetaOapg.properties.transaction_description, str, schemas.Unset] = schemas.unset,
                            transaction_type: typing.Union[MetaOapg.properties.transaction_type, str, schemas.Unset] = schemas.unset,
                            reference_number: typing.Union[MetaOapg.properties.reference_number, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                transaction_date=transaction_date,
                                transaction_amount=transaction_amount,
                                transaction_description=transaction_description,
                                transaction_type=transaction_type,
                                reference_number=reference_number,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            app_id = schemas.StrSchema
            __annotations__ = {
                "transactions": transactions,
                "app_id": app_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transactions", "app_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> typing.Union[MetaOapg.properties.transactions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> typing.Union[MetaOapg.properties.app_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transactions", "app_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, schemas.Unset] = schemas.unset,
        app_id: typing.Union[MetaOapg.properties.app_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CollectTransactionsRequest':
        return super().__new__(
            cls,
            *args,
            transactions=transactions,
            app_id=app_id,
            _configuration=_configuration,
            **kwargs,
        )
