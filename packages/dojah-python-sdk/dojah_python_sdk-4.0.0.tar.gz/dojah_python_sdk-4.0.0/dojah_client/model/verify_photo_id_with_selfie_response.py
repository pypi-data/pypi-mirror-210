# coding: utf-8

"""
    DOJAH APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class VerifyPhotoIdWithSelfieResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class entity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class selfie(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    confidence_value = schemas.NumberSchema
                                    match = schemas.BoolSchema
                                    photoId_image_blurry = schemas.BoolSchema
                                    selfie_image_blurry = schemas.BoolSchema
                                    selfie_glare = schemas.BoolSchema
                                    photoId_glare = schemas.BoolSchema
                                    age_range = schemas.StrSchema
                                    sunglasses = schemas.BoolSchema
                                    __annotations__ = {
                                        "confidence_value": confidence_value,
                                        "match": match,
                                        "photoId_image_blurry": photoId_image_blurry,
                                        "selfie_image_blurry": selfie_image_blurry,
                                        "selfie_glare": selfie_glare,
                                        "photoId_glare": photoId_glare,
                                        "age_range": age_range,
                                        "sunglasses": sunglasses,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["confidence_value"]) -> MetaOapg.properties.confidence_value: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["match"]) -> MetaOapg.properties.match: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["photoId_image_blurry"]) -> MetaOapg.properties.photoId_image_blurry: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["selfie_image_blurry"]) -> MetaOapg.properties.selfie_image_blurry: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["selfie_glare"]) -> MetaOapg.properties.selfie_glare: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["photoId_glare"]) -> MetaOapg.properties.photoId_glare: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["age_range"]) -> MetaOapg.properties.age_range: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["sunglasses"]) -> MetaOapg.properties.sunglasses: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["confidence_value", "match", "photoId_image_blurry", "selfie_image_blurry", "selfie_glare", "photoId_glare", "age_range", "sunglasses", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["confidence_value"]) -> typing.Union[MetaOapg.properties.confidence_value, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["match"]) -> typing.Union[MetaOapg.properties.match, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["photoId_image_blurry"]) -> typing.Union[MetaOapg.properties.photoId_image_blurry, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["selfie_image_blurry"]) -> typing.Union[MetaOapg.properties.selfie_image_blurry, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["selfie_glare"]) -> typing.Union[MetaOapg.properties.selfie_glare, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["photoId_glare"]) -> typing.Union[MetaOapg.properties.photoId_glare, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["age_range"]) -> typing.Union[MetaOapg.properties.age_range, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["sunglasses"]) -> typing.Union[MetaOapg.properties.sunglasses, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["confidence_value", "match", "photoId_image_blurry", "selfie_image_blurry", "selfie_glare", "photoId_glare", "age_range", "sunglasses", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                confidence_value: typing.Union[MetaOapg.properties.confidence_value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                match: typing.Union[MetaOapg.properties.match, bool, schemas.Unset] = schemas.unset,
                                photoId_image_blurry: typing.Union[MetaOapg.properties.photoId_image_blurry, bool, schemas.Unset] = schemas.unset,
                                selfie_image_blurry: typing.Union[MetaOapg.properties.selfie_image_blurry, bool, schemas.Unset] = schemas.unset,
                                selfie_glare: typing.Union[MetaOapg.properties.selfie_glare, bool, schemas.Unset] = schemas.unset,
                                photoId_glare: typing.Union[MetaOapg.properties.photoId_glare, bool, schemas.Unset] = schemas.unset,
                                age_range: typing.Union[MetaOapg.properties.age_range, str, schemas.Unset] = schemas.unset,
                                sunglasses: typing.Union[MetaOapg.properties.sunglasses, bool, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'selfie':
                                return super().__new__(
                                    cls,
                                    *args,
                                    confidence_value=confidence_value,
                                    match=match,
                                    photoId_image_blurry=photoId_image_blurry,
                                    selfie_image_blurry=selfie_image_blurry,
                                    selfie_glare=selfie_glare,
                                    photoId_glare=photoId_glare,
                                    age_range=age_range,
                                    sunglasses=sunglasses,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "selfie": selfie,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["selfie"]) -> MetaOapg.properties.selfie: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["selfie", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["selfie"]) -> typing.Union[MetaOapg.properties.selfie, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["selfie", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    selfie: typing.Union[MetaOapg.properties.selfie, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'entity':
                    return super().__new__(
                        cls,
                        *args,
                        selfie=selfie,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "entity": entity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> typing.Union[MetaOapg.properties.entity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entity: typing.Union[MetaOapg.properties.entity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VerifyPhotoIdWithSelfieResponse':
        return super().__new__(
            cls,
            *args,
            entity=entity,
            _configuration=_configuration,
            **kwargs,
        )
